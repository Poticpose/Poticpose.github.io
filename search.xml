<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>H5标签简述</title>
    <url>/2021/02/17/H5%E6%A0%87%E7%AD%BE%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<p>P.S.<kbd style="background-color:gray;color:white"> NEW </kbd>代表H5的新添加</p>
<p>H5中不支持标签、主流浏览器不支持标签不再出现</p>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h2><ul>
<li><p>&lt;!DOCTYPE&gt; ：定义文档类型</p>
</li>
<li><p>&lt;html&gt;：定义一个HTML文档</p>
</li>
<li><p>&lt;title&gt;：为文档定义一个标题</p>
</li>
<li><p>&lt;body&gt;：定义文档主体</p>
</li>
<li><p>&lt;h1&gt; to &lt;h6&gt;：定义文档内部内容标题</p>
</li>
<li><p>&lt;p&gt;：段落</p>
</li>
<li><p>&lt;hr&gt;：定义一个水平线</p>
</li>
<li><p>&lt;!–…–&gt;：声明一个注释</p>
</li>
<li><p>&lt;br&gt;：换行</p>
</li>
</ul>
<p>HTML 元素以开始标签起始，<br>HTML 元素以结束标签终止</p>
<h2 id="格式标签"><a href="#格式标签" class="headerlink" title="格式标签"></a>格式标签</h2><ul>
<li><p>&lt;abbr title=”xxxxxxxxx”&gt;：定义缩写</p>
</li>
<li><p>&lt;address&gt;：定义文档拥有者联系信息</p>
</li>
<li><p>&lt;b&gt;：定义粗体文字</p>
</li>
<li><p>&lt;bdi&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：允许您设置一段文本，使其脱离其父元素的文本方向设置。</p>
</li>
<li><p>&lt;bdo dir=”rtl”&gt;：定义文本方向（该dir属性表示文本从右向左）</p>
</li>
<li><p>&lt;blockquote cite=””&gt;：定义块引用，cite属性内为被引用信息来源</p>
</li>
<li><p>&lt;cite&gt;：定义引用</p>
</li>
<li><p>&lt;code&gt;：定义代码文本</p>
</li>
<li><p>&lt;del&gt;：定义被删除的文本</p>
</li>
<li><p>&lt;dfn&gt;：定义项目文本</p>
</li>
<li><p>&lt;em&gt;：定义强调文本</p>
</li>
<li><p>&lt;i&gt;：定义斜体文本</p>
</li>
<li><p>&lt;ins&gt;：定义被插入文本</p>
</li>
<li><p>&lt;kbd&gt;：定义键盘文本</p>
</li>
<li><p>&lt;mark&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义带有记号的文本</p>
</li>
<li><p>&lt;meter value=”” min=”” max=””&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个度量衡，，value属性当前值，max为最大值，min为最小值（仅限于已知最大、最小值的度量）</p>
</li>
<li><p>&lt;pre&gt;：定义预格式文本</p>
</li>
<li><p>&lt;progress value=”” max=””&gt;：定义一个进度条，value属性当前值，max为最大值</p>
</li>
<li><p>&lt;q&gt;：定义一个短引用</p>
</li>
<li><p>&lt;ruby&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个ruby注释，如中文注音或字符</p>
</li>
<li><p>&lt;rt&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义中文注音或字符的解释或发音</p>
</li>
<li><p>&lt;rp&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义不支持ruby标签的浏览器所显示的内容</p>
</li>
<li><p>&lt;s&gt;：定义加删除线的文本</p>
</li>
<li><p>&lt;samp&gt;：定义计算机代码样本</p>
</li>
<li><p>&lt;small&gt;：定义小号文本</p>
</li>
<li><p>&lt;strong&gt;：定义更加强烈的强调文本</p>
</li>
<li><p>&lt;sub&gt;：定义下标文本</p>
</li>
<li><p>&lt;sup&gt;：定义上标文本</p>
</li>
<li><p>&lt;time datetime=””&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个日期或时间，datetime属性内为time内容的时间信息</p>
</li>
<li><p>&lt;u&gt;：定义下划线文本</p>
</li>
<li><p>&lt;var&gt;：定义文本的变量部分</p>
</li>
<li><p>&lt;wbr&gt;：规定在文本中的何处适合添加换行符</p>
</li>
</ul>
<h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul>
<li><p>&lt;form&gt;：定义一个HTML表单用于用户输入</p>
</li>
<li><p>&lt;input type=”” name=””&gt;：定义一个输入控件，属性type是输入内容格式信息，name是输入内容所代名称</p>
</li>
<li><p>&lt;textarea rows=”” cols=””&gt;：定义多行的文本输入，属性rows是行数，cols是列数</p>
</li>
<li><p>&lt;button type:”button”&gt;：定义了一个按钮</p>
</li>
<li><p>&lt;select&gt;：定义了一个选择列表（下拉列表）</p>
</li>
<li><p>&lt;optgroup&gt;：定义选择列表中相关选项的组合</p>
</li>
<li><p>&lt;option&gt;：定义选择列表中的选项</p>
</li>
<li><p>&lt;label&gt;：定义input标签的标注</p>
</li>
<li><p>&lt;fieldset&gt;：定义一个围绕表单中元素的边框</p>
</li>
<li><p>&lt;legend&gt;：定义fieldset标签的标题</p>
</li>
<li><p>&lt;datalist&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了input元素的可能的选项列表</p>
</li>
<li><p>&lt;output name=”” for=””&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个计算结果，属性name中的值代表该标签所获得的结果，for为参与结果运算的元素的id，可通过oninput属性在父级标签中定义运算</p>
</li>
</ul>
<h2 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h2><ul>
<li>&lt;iframe src=””&gt;：定义了一个内联框架，属性src指向框架内容的索引</li>
</ul>
<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><ul>
<li><p>&lt;img src=””&gt;：定义一个图像，属性src指向图片地址</p>
</li>
<li><p>&lt;map&gt;：定义图像映射，指定可点击区域</p>
</li>
<li><p>&lt;area&gt;：定义图像内部的一个可点击区域</p>
</li>
<li><p>&lt;canvas&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：通过脚本（JavaScript）来绘制一个图像</p>
</li>
<li><p>&lt;figure&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：用于对元素进行组合</p>
</li>
<li><p>&lt;figcaption&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个figure标签内元素的标题</p>
</li>
</ul>
<h2 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h2><ul>
<li><p>&lt;audio&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义声音</p>
</li>
<li><p>&lt;source&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义media元素（&lt;video&gt;和&lt;audio&gt;）的媒体资源</p>
</li>
<li><p>&lt;track default kind=”captions” srclang=”en” src=””/&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：为媒体元素定义外部文本轨道，属性default提供默认形式，kind内为track提供的文本类型，srclang为文本语言，src为文本地址</p>
</li>
<li><p>&lt;video&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义一个音频或视频</p>
</li>
</ul>
<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><ul>
<li><p>&lt;a href=”xxxxx”&gt;：定义一个页面超链接</p>
</li>
<li><p>&lt;link rel=”stylesheet” type=”text/css” href=”XXXX.css”&gt;：定义文档与外部资源关系，通常链接css文件</p>
</li>
<li><p>&lt;main&gt;：定义文档的主体内容</p>
</li>
<li><p>&lt;nav&gt;：定义导航链接</p>
</li>
</ul>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul>
<li><p>&lt;ul&gt;：定义一个无序列表</p>
</li>
<li><p>&lt;ol&gt;：定义一个有序列表</p>
</li>
<li><p>&lt;li&gt;：定义一个列表项</p>
</li>
<li><p>&lt;dl&gt;：定义一个定义列表</p>
</li>
<li><p>&lt;dt&gt;：定义一个定义列表中的项目</p>
</li>
<li><p>&lt;dd&gt;：定义一个定义列表项目中的描述</p>
</li>
<li><p>&lt;menu&gt;：定义菜单列表</p>
</li>
</ul>
<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li><p>&lt;table&gt;：定义一个表格</p>
</li>
<li><p>&lt;caption&gt;：定义表格标题</p>
</li>
<li><p>&lt;th&gt;：定义表格的表头单元格</p>
</li>
<li><p>&lt;tr&gt;：定义表格中的行</p>
</li>
<li><p>&lt;td&gt;：定义表格中的单元</p>
</li>
<li><p>&lt;thead&gt;：定义表格中的表头内容</p>
</li>
<li><p>&lt;tbody&gt;：定义表格中的主体内容</p>
</li>
<li><p>&lt;tfoot&gt;：定义表格中的脚注内容</p>
</li>
<li><p>&lt;colgroup&gt;：定义表格中供格式化的列组</p>
</li>
<li><p>&lt;col span=”” style=””&gt;：定义表格中一个列或多个列的属性值，属性span内为需定义的列数</p>
</li>
</ul>
<h2 id="样式-块标签"><a href="#样式-块标签" class="headerlink" title="样式/块标签"></a>样式/块标签</h2><ul>
<li>&lt;style&gt;：定义文档的样式信息</li>
<li>&lt;div&gt;：定义文档中的一个区块</li>
<li>&lt;span&gt;：对行内元素进行组合</li>
<li>&lt;header&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义文档的页眉部分（多为导航栏或内容介绍）</li>
<li>&lt;footer&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义文档的页脚部分</li>
<li>&lt;section&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了文档的一个内容区域</li>
<li>&lt;article&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义文档中的独立内容</li>
<li>&lt;aside&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义article标签外的内容，需与周边内容相近</li>
<li>&lt;details&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了用户可见的或者隐藏的需求的补充细节，通常为折叠状态</li>
<li>&lt;dialog&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了一个对话框或者窗口</li>
<li>&lt;summary&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了一个可见的标题，当用户点击时显示详细信息</li>
</ul>
<h2 id="元信息标签"><a href="#元信息标签" class="headerlink" title="元信息标签"></a>元信息标签</h2><ul>
<li>&lt;head&gt;：定义文档所包含的信息，包容所有头部元素</li>
<li>&lt;meta&gt;：定义文档元信息，如关键词、作者、编辑时间等等</li>
<li>&lt;base&gt;：定义页面中所有链接的默认地址</li>
</ul>
<h2 id="程序标签"><a href="#程序标签" class="headerlink" title="程序标签"></a>程序标签</h2><ul>
<li>&lt;script&gt;：定义客户端脚本</li>
<li>&lt;noscript&gt;：定义针对不支持客户端脚本的用户的替代内容</li>
<li>&lt;embed&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>：定义了一个容器，用来嵌入外部应用或者互动程序（插件）</li>
<li>&lt;object&gt;：定义了一个嵌入对象，以此向文档中添加多媒体内容，在无法解析状态下可现实中间代码</li>
<li>&lt;param&gt;：定义object的参数</li>
</ul>
<h1 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h1><ul>
<li>accesskey：设置访问元素的键盘快捷键。</li>
<li>class：规定元素的类名</li>
<li>contenteditable<kbd style="background-color:gray;color:white"> NEW </kbd>：规定是否可编辑元素的内容</li>
<li>data-*<kbd style="background-color:gray;color:white"> NEW </kbd>：用于存储页面的自定义数据</li>
<li>dir：设置元素中内容的文本方向。</li>
<li>draggable<kbd style="background-color:gray;color:white"> NEW </kbd>：指定某个元素是否可以拖动</li>
<li>hidden<kbd style="background-color:gray;color:white"> NEW </kbd>：hidden 属性规定对元素进行隐藏</li>
<li>id：规定元素的唯一id</li>
<li>lang：设置元素中内容的语言代码</li>
<li>spellcheck<kbd style="background-color:gray;color:white"> NEW </kbd>：检测元素是否拼写错误</li>
<li>style：规定元素的行内样式</li>
<li>tabindex：设置元素的 Tab 键控制次序</li>
<li>title：规定元素的额外信息</li>
<li>translate<kbd style="background-color:gray;color:white"> NEW </kbd>：指定是否一个元素的值在页面载入时是否需要翻译</li>
</ul>
<h1 id="新增标签汇总"><a href="#新增标签汇总" class="headerlink" title="新增标签汇总"></a>新增标签汇总</h1><ul>
<li>&lt;bdi&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;mark&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;meter&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;ruby&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;rt&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;rp&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;time&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;datalist&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;output&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;canvas&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;figure&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;figcaption&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;audio&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;source&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;track&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;video&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;header&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;footer&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;section&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;article&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;aside&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;details&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;dialog&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;summary&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
<li>&lt;embed&gt;<kbd style="background-color:gray;color:white"> NEW </kbd>&nbsp;</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Bootstrap网格</title>
    <url>/2020/06/11/Bootstrap%E7%BD%91%E6%A0%BC/</url>
    <content><![CDATA[<h2 id="什么是Bootstrap网格？"><a href="#什么是Bootstrap网格？" class="headerlink" title="什么是Bootstrap网格？"></a>什么是Bootstrap网格？</h2><hr>
<img src="/img/Bootstrap网格/图1.png">
Bootstrap将网页横向默认的分为12个单元块，即12个网格块，而通过相关CSS内含样式可以将这12个单元块重新合并再分为四个三单元块，三个四单元块，两个六单元块等等。但始终记得一行中单元块总体不能超过12。

<h3 id="网格系统工作原理"><a href="#网格系统工作原理" class="headerlink" title="网格系统工作原理"></a>网格系统工作原理</h3><hr>
<ul>
<li>行必须放置在 .container class 内，以便获得适当的对齐（alignment）和内边距（padding）。</li>
<li>使用行来创建列的水平组。</li>
<li>内容应该放置在列内，且唯有列可以是行的直接子元素。</li>
<li>预定义的网格类，比如 .row 和 .col-xs-4，可用于快速创建网格布局。LESS 混合类可用于更多语义布局。</li>
<li>列通过内边距（padding）来创建列内容之间的间隙。该内边距是通过 .rows 上的外边距（margin）取负，表示第一列和最后一列的行偏移。</li>
<li>网格系统是通过指定您想要横跨的十二个可用的列来创建的。例如，要创建三个相等的列，则使用三个 .col-xs-4。</li>
</ul>
<h3 id="媒体限制"><a href="#媒体限制" class="headerlink" title="媒体限制"></a>媒体限制</h3><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media (max-width: @screen-xs-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-lg-min) &#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>以此方式通过确定屏幕大小来确定可展示或者隐藏的内容，只有某个限定媒体才可查看内容写在以上代码中的限定样式后的{…}内。</p>
<h3 id="网格选项总结"><a href="#网格选项总结" class="headerlink" title="网格选项总结"></a>网格选项总结</h3><hr>
<img src="/img/Bootstrap网格/图2.png">

<p>Bootstrap网格基本结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">   &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-*-*&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;col-*-*&quot;&gt;&lt;&#x2F;div&gt;      </span><br><span class="line">   &lt;&#x2F;div&gt;</span><br><span class="line">   &lt;div class&#x3D;&quot;row&quot;&gt;...&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;....</span><br></pre></td></tr></table></figure>

<p>在应用过程中，往往col-<em>-</em>是搭配使用的，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;col-xs-6 col-sm-4 col-md-6 col-lg-4&quot;&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以精确限制在各个媒体设备上的展示效果。</p>
<h3 id="响应列重置"><a href="#响应列重置" class="headerlink" title="响应列重置"></a>响应列重置</h3><hr>
<p>有时候不恰当的模块浮动布局会让人很头疼，比如<br><img src="/img/Bootstrap网格/图3.png"></p>
<p>但可以通过 .clearfix class来解决相关问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 就让div中代码为空 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;clearfix&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>即可形成以下效果：<br><img src="/img/Bootstrap网格/图4.png"></p>
<h3 id="偏移列"><a href="#偏移列" class="headerlink" title="偏移列"></a>偏移列</h3><p>有时候你想要让你的模块在一行中有所位置偏移，但利用绝对和相对定位又很麻烦而且达不到响应式效果。此时可以利用 .col-md-offset-* 类进行列偏移。范围是1-11。<br>比如有一个<div class="col-md-6">..</div>。因为之前提到一行是12个单位块，此div已经占用6个，因此偏移3个即令其达到居中效果.col-md-offset-3。</p>
<p>相关代码片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;瞅瞅这偏移&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;row&quot; &gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;col-md-6 col-md-offset-3&quot; </span><br><span class="line">        style&#x3D;&quot;background-color: #dedef8;box-shadow: </span><br><span class="line">        inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">            &lt;p&gt;我漂移了！</span><br><span class="line">            &lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>效果：<br><img src="/img/Bootstrap网格/图5.png"></p>
<h3 id="嵌套列"><a href="#嵌套列" class="headerlink" title="嵌套列"></a>嵌套列</h3><p>顾名思义，嵌套效果，其实就是一个class=”row”里面的col-<em>-</em>里面的再一个class=”row”和col-<em>-</em><br>大概效果：<br><img src="/img/Bootstrap网格/图6.png"></p>
<p>一次完整示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;title&gt;测试一下&lt;&#x2F;title&gt;</span><br><span class="line">      &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">      &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;jquery&#x2F;2.1.1&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;link href&#x3D;&quot;https:&#x2F;&#x2F;cdn.staticfile.org&#x2F;twitter-bootstrap&#x2F;3.3.7&#x2F;css&#x2F;bootstrap.min.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;!-- HTML5 Shiv 和 Respond.js 用于让 IE8 支持 HTML5元素和媒体查询 --&gt;</span><br><span class="line">      &lt;!-- 注意： 如果通过 file:&#x2F;&#x2F;  引入 Respond.js 文件，则该文件无法起效果 --&gt;</span><br><span class="line">      &lt;!--[if lt IE 9]&gt;</span><br><span class="line">         &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;oss.maxcdn.com&#x2F;libs&#x2F;html5shiv&#x2F;3.7.0&#x2F;html5shiv.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">         &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;oss.maxcdn.com&#x2F;libs&#x2F;respond.js&#x2F;1.3.0&#x2F;respond.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;![endif]--&gt;</span><br><span class="line">   &lt;&#x2F;head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">         &lt;h1&gt;来了老弟&lt;&#x2F;h1&gt;</span><br><span class="line">         &lt;div class&#x3D;&quot;row&quot; &gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;col-md-6 col-md-offset-3&quot; </span><br><span class="line">             style&#x3D;&quot;background-color: #dedef8;box-shadow: </span><br><span class="line">             inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">                 &lt;p&gt;首先，我先给大家整个漂移。</span><br><span class="line">                 &lt;&#x2F;p&gt;</span><br><span class="line">             &lt;&#x2F;div&gt;</span><br><span class="line">             &lt;div class&#x3D;&quot;col-md-6 col-xs-6 col-lg-6 col-sm-6&quot; style&#x3D;&quot;background-color: aqua;box-shadow: </span><br><span class="line">             inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">                WTM直接二分天下</span><br><span class="line">                 &lt;&#x2F;div&gt;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;col-md-6 col-xs-6 col-lg-6 col-sm-6&quot; style&#x3D;&quot;background-color: aqua;box-shadow: </span><br><span class="line">            inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">            这半边是我的。</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;col-md-6 col-xs-6 col-lg-6 col-sm-6 col-md-offset-3&quot; style&#x3D;&quot;background-color: aqua;box-shadow: </span><br><span class="line">            inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;col-md-6 col-xs-6 col-lg-6 col-sm-6&quot; style&#x3D;&quot;background-color: aqua;box-shadow: </span><br><span class="line">               inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">               我给大伙套个娃</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">               &lt;div class&#x3D;&quot;col-md-6 col-xs-6 col-lg-6 col-sm-6&quot; style&#x3D;&quot;background-color: aqua;box-shadow: </span><br><span class="line">               inset 1px -1px 1px #444, inset -1px 1px 1px #444;&quot;&gt;</span><br><span class="line">               禁止套娃！</span><br><span class="line">               &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">         &lt;&#x2F;div&gt;</span><br><span class="line">     &lt;&#x2F;div&gt;</span><br><span class="line"> </span><br><span class="line">      &lt;!-- jQuery (Bootstrap 的 JavaScript 插件需要引入 jQuery) --&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;!-- 包括所有已编译的插件 --&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>效果图：<br><img src="/img/Bootstrap网格/图7.png"></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>框架</category>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>框架</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>二十一世纪成功的游戏设计所包含的关键元素</title>
    <url>/2020/03/30/%E4%BA%8C%E5%8D%81%E4%B8%80%E4%B8%96%E7%BA%AA%E6%88%90%E5%8A%9F%E7%9A%84%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1%E6%89%80%E5%8C%85%E5%90%AB%E7%9A%84%E5%85%B3%E9%94%AE%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<center><b><font face="黑体" size=6>二十一世纪成功的游戏设计所包含的关键元素</font></b></center>
<center><font face="仿宋" size=2>郭嘉祺</font></center>
<center><b><font face="黑体" size=5>摘要</font></b></center>
<font face="宋体">&nbsp;&nbsp;随着电子竞技在当下社会中显露出其巨大的潜力和极大的可开发市场空间，因此越来越多的公司企业投入到游戏设计开发中，但大量的劣质产品只会腐蚀整个电子游戏产业环境，所以当下急需各个制作方明确成功的游戏设计其独到之处何在。本文主要从游戏的剧情、沉浸感、音乐创意三个方面出发，以五个电子游戏市场上的成功案例进行分析，而表述出当下成功游戏所具有的关键元素。针对游戏剧情，本文选取反乌托邦这个当下火爆的文案题材对相关成功案例进行分析。而沉浸感方面则是例举了市场上最具特色的成功案例分析出其如何营造出深度游玩沉浸感和深度沉浸感带给玩家怎样的游玩体验。音乐创意方面本文例举了两个成功案例，两个案例中的音乐创意所带来的整体影响各有特色，两者可以几乎代表了整个游戏市场上音乐创意对游戏设计的整体影响。通过这三个方面帮助制作方进行设计定位，更有方向性的完成优质的游戏设计开发。</font>  

<p><b><font face="宋体">关键词：</font></b><font face="宋体">电子游戏；游戏设计；剧情；沉浸感；音乐创意；关键元素</font></p>
<hr>
<center><b><font face="Times New Roman" size=5>Abstract</font></b></center>
<font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;As esports in the present society shows its great potential and great market space as far as possible, and therefore more and more companies into the design and development of the game, but a lot of bad products would only corrupt the electronic game industry environment, so the successful game design need all producers clear the present its unique. Starting from the three aspects of the game's plot, immersion and music creativity, this paper analyzes five successful cases in the video game market and describes the key elements of the current successful games. In view of the game plot, this paper selects dystopia, a popular copywriting theme, to analyze the relevant successful cases. In terms of the sense of immersion, the most distinctive successful cases in the market are cited to analyze how to create a sense of deep play immersion and what kind of play experience the sense of deep play brings to the players. In the aspect of music creativity, this paper illustrates two successful cases. The overall impact of music creativity in the two cases has its own characteristics, and both cases can almost represent the overall impact of music creativity on game design in the entire game market. Through these three aspects to help the producer design positioning, more directional to complete quality game design and development.</font>  

<p><b><font face="Times New Roman">Keywords:</font></b><font face="Times New Roman"> Video games, Game design, The plot,Immersive, Music creativity, The key elements</font>  </p>
<hr>
<center><b><font face="黑体" size=5>前言</font></b></center>  
<font face="宋体">&nbsp;&nbsp;电子竞技是当下社会最火爆的非传统体育项目。随着电子竞技热度的不断提高，越来越多的人关注于电子竞技，越来越多的人投身于电子竞技，围绕着电子竞技的产业发展也在迅速扩大，而电子竞技的载体——电子游戏也吸引了越来越多的人去接触它，无论是于其中游玩取乐还是从事相关行业，不得不说电子游戏的发展之迅速引发了许多人的思考。电子游戏自20世纪60年代末出现，当时的电子游戏还属于一种奢侈产品，因为许多一般家庭买不起运行电子游戏的主机，而且电子游戏的发行受限也较为严重，因此电子游戏出现后的很长一段时间并没有进入许多人的视野。电子游戏真正开始走向发展的“高速公路”是于1980年末期。在1980年末，显卡的出现致使电脑的整体图形质量大大提升，越来越多的高质量游戏因此诞生。与此同时，任天堂发布Game Boy开启了移动游戏新时代，电子游戏不再局限于家用主机，而是做到随时随地可以游玩，这也是开启电子游戏全民时代的一个重要转折点之一。21世纪越来越多的游戏企业崛起——艺电、索尼、暴雪……这是个百花齐放的时代，电子游戏迎来了真正的爆发期。在图形质量的不断提高下，游戏的本身质量的提升也成倍增长。越来越多的游戏公司出现导致了越来越多的游戏出现。曾经的人们因为有新游戏玩而兴奋，而如今的游戏则是需要绞尽脑汁去讨好玩家的喜好。于是，游戏作画的研究、音乐的研究、剧情的研究、及时算法的研究、动画效果的研究等等，成了当下游戏公司走向成功的必修课。而总结成功的游戏案例其中的那些特质吸引了玩家，因何而吸引玩家则是本文的主要内容。</font>  

<hr>
<p><b><font face="黑体" size=5>一、 剧情对游戏的影响</font></b><br><b><font face="宋体" size=4>1.1 火爆的剧情题材——反乌托邦</font></b><br><font face="宋体">&nbsp;&nbsp;判断一个游戏优秀、成功与否，其中占很大一部分要素的就是游戏的背景故事以及后续的发展剧情，这直接反映出这款游戏是站在什么样的思想下建立起来的。<br>&nbsp;&nbsp;每款游戏的背景故事都各不相同，但不同的故事题材也能大概进行分类，分为几个主题出来。在21世纪爆火的一种题材就是末日，或者说是反乌托邦题材。其中有环境大退化、经济危机、全球恐怖主义等等[1]。但反乌托邦题材中也有不同的表现手法，一种是于绝望中追求希望[2]，比如《行尸走肉》(The Walking Dead)，还有一种便是末日喜剧，比如《植物大战僵尸》(Plants vs Zombies)。</font></p>
<p><b><font face="宋体" size=4>1.2 反乌托邦中的“悲剧”</font></b><br><font face="宋体">&nbsp;&nbsp;自广岛核爆以及切尔诺贝利核泄漏事件后，越来越多的游戏题材围绕核危机以及能源危机进行剧情展开。其中极为有名的一部作品是广为人知的《辐射》系列，该系列中极为经典的则是《辐射4》(Fallout 4)。《辐射4》的故事背景便是在一个进行核子战争后的一个充满核污染的世界。<br>&nbsp;&nbsp;作为一个角色扮演游戏，《辐射4》的玩法上和其他角色扮演游戏无太大出入，但是其极为优秀的游戏剧情结合其玩法便是让游戏的可玩性和吸引力大大提高。比如在其剧情中主角因为核战争的爆发不得不躲入提前预备好的避难所中，但在主角苏醒后目睹了自己的孩子被人抢走，自此开始了废土之上的寻子之路。<br>&nbsp;&nbsp;在整个游玩过程中，玩家将带入主角的身份[3]，看到末世下的持强凌弱，末世下的互帮互助，末世下的爱情友情……而《辐射4》作为一个高自由度的游戏，其中的许多剧情又是由玩家自己的抉择去发现不同的新故事。这便大大提高了玩家的代入感以及想要知道接下来怎么做又能开启怎么样的新故事。但真正让游戏升华的是《辐射》系列每一部的一个共同特点——主角在故事的开始会有一条狗跟随着主角从始至终。不需要对这条狗多加什么描述和性格，只需要在主角于废土之上的孤独寻子路有这么一个陪伴，便带给玩家无尽的感动。</font>  </p>
<p><b><font face="宋体" size=4>1.3 反乌托邦中的“喜剧”</font></b><br><font face="宋体">&nbsp;&nbsp;说到国内的反乌托邦题材的优秀作品就不得不提到于2019年在国内爆火的一款可以归为末日喜剧题材的作品——《明日方舟》(Arknights)。《明日方舟》不同于许多的反乌托邦游戏，它的故事中不提末世创造者、不提末世主导者。而是一直围绕着整个末世环境下的一些小环境、小团体进行剧情展开。其故事发生在一个架空世界中，一种名为“源石”的新型能源的出现导致了科技的飞速上升，但同时也带来了一种公认的不可治之症——“矿石病”。矿石病感染者为世人所唾弃，于是一些不接受压迫的感染者们举起反抗的旗帜成立了名为“整合运动”的组织。而故事主角是一位被称为“博士”的民间医疗组织领袖。<br>&nbsp;&nbsp;故事的开始便是“博士”与组织内的干员们与各个官方或非官方的地方组织与“整合运动”进行战斗。在这样的背景下也许很难认为这款游戏是一款末日喜剧题材的游戏，但它的后续剧情展开的确是围绕着这一主题进行的。<br>&nbsp;&nbsp;因为剧情内的反派是末世的“受害者”身份[4]。因此性质上就已经表明其反派并非十恶不赦，而更多的是一些理念纠纷。显然《明日方舟》的文案也十分清楚整部作品如何进行定位，在后续的剧情中着重突出的并非战斗，而是纠纷之间的或让人潸然泪下，或让人莞尔一笑的小互动。而这种小互动不单单存在于主角的阵营中，同时存在于配角阵营以及反派阵营。这也就导致整个游戏内的所有人物无论是所谓正派，还是所谓反派都有这极为可观的粉丝群体，这种情况是十分难得的。这也正是表现出《明日方舟》的优秀剧情抓住了玩家的心，末日喜剧，苦中作乐，这不正是生活的真谛？</font>  </p>
<hr>
<p><b><font face="黑体" size=5>二、 沉浸感对游玩体验的重要性</font></b><br><b><font face="宋体" size=4>2.1 游戏中说话与行走的艺术</font></b><br><font face="宋体">&nbsp;&nbsp;许多游戏以其玩法之丰富、操作之炫目、节奏之迅速而受广大玩家的追捧。但不同于这些游戏，甚至可以说与之相反的游戏同样有着一大批的粉丝群体，针对这类游戏有个分类，称其为——“步行模拟器”。这类游戏大多数几乎没有什么操作，甚至键盘上从头到尾可能只需要用到四个键位，鼠标也只用一个左键，但就是这么操作如此单一的游戏却让人无法自拔，这是为什么呢？<br>&nbsp;&nbsp;这里需要谈到一款游戏，也许并不是如何出名，但每个接触过它的玩家都会给出近乎满分的评价，它就是《奇异人生》(Life is Strange)。这款游戏在TGA上被评为“2015年度最具革命性游戏”，正是对整个《奇异人生》系列的最好的肯定，因为这款游戏是真正的开创性的，它完美的诠释了什么是说话与行走的艺术。<br>&nbsp;&nbsp;《奇异人生》的设定背景设定在俄勒冈州的一个普通小镇。离开小镇五年后的主角麦克斯和儿时好友克洛伊回到小镇寻找失踪的同学瑞秋。在这个设定下一般的游戏都会想着解谜的方向进行发展，但《奇异人生》不同。在整个游戏游玩过程中，没有战斗，没有追逐，只有聆听、选择、行走。</font>  </p>
<p><b><font face="宋体" size=4>2.2 必要的“聆听”</font></b><br><font face="宋体">&nbsp;&nbsp;聆听是游玩这款游戏最重要的成分，没有之一。整个游戏没有一处提示，你只有去认真倾听主角和其他人的对话，然后玩家选择主角应该如何回复，几乎每一处选择都会给出三个以上的选项，甚至六到八个，这就好比像是在做英语听力一样。</font>  </p>
<p><b><font face="宋体" size=4>2.3 重要的“选择”</font></b><br><font face="宋体">&nbsp;&nbsp;选择是仅次于聆听的重中之重。《奇异人生》在游玩过程中没遇到一次选择会有大量的选项产生，于是你将面对游戏最为伟大的部分之一，那就是每一种选择都会导向不同的故事展开。要知道作为一款诠释了说话与行走的艺术的一款游戏，他必然伴随着剧情内的大量对话互动，这也就产生了数不尽的选项，可怕的是每个选项都有独立的发展剧情[5]，就像细胞分裂一样当你遇到第一个选择的时候给了你四个选项，也就是有四种发展剧情。当你遇到下一个选择的时候又给了你四个选项，又是四种新的发展剧情，与先前相结合也就是两次选择其中就包含着十六种剧情，以此类推。这就是《奇异人生》，它有着成千上万种剧情，而玩家在游玩过程中可能只会触发其中的几百种，这也是为什么聆听与选择会如此的重要。而如此剧情开放性的游戏也会大大提高玩家的代入感，毕竟玩家不代入主角的身份，是玩不了这款游戏的。</font>  </p>
<p><b><font face="宋体" size=4>2.4 抉择的“行走”</font></b><br><font face="宋体">&nbsp;&nbsp;行走[6]是增强玩家代入感和游玩体验的一个过程。因为往往在对话进行结束的时候需要玩家操控主角根据对话中所提供的线索或是要求通过行走进行剧情推进，但不同于其他游戏的任务系统那么刻板的是在《奇异人生》中你不需要必须怎样做，而是你想怎样做。举个例子来说明的话就像是近些年较为火爆的一款国产独立游戏《艾希》(Icey)的一大游玩特色就是其故事导向的选择自由性较大。玩家所操控的艾希将行走不同的路线和不同的怪物战斗会触发多种剧情，而引导玩家进行选择的便是旁白。游戏中的旁白提示你需要走一号路线，但玩家可以不遵循这种提示而选择二号路线则开启了不同于一号路线的剧情[7]。在《奇异人生》中也是如此，偶尔有英语差的玩家当NPC需要主角前往某个地点赴约时，也许玩家没有听懂，到了赴约时间却单方面违约，于是触发了另外的剧情发展。<br>&nbsp;&nbsp;整个游玩过程可以说就是由对话和行走组成的，没有多余的其他成分掺杂在其中，但就是这样的游戏却赢得了玩家的一致好评，这边是将说话与行走的艺术发挥到了极致的一款成功且优秀的游戏作品。</font>  </p>
<hr>
<p><b><font face="黑体" size=5>三、 游戏内的音乐创意</font></b><br><b><font face="宋体" size=4>3.1 音乐创意的表现</font></b><br><font face="宋体">&nbsp;&nbsp;人有五感——形、声、色、味、触。每一种对人的直接刺激，或者说人的直接快乐，绝对都是来自于这五感。而游戏则主要与其中的三感打交道，也就是形、声、触。这里的触不是说游戏内容可以进行触摸，而是游戏操作给人的感受[8]。既然人的直接快乐来自于五感，而游戏又与其中三感密切相关，那一个优秀的游戏也必然要抓住这一点，三感中的任何一点都是可以左右玩家的游玩体验的，缺其一或劣其一都需要大量的工作去弥补[9]。而在游戏行业有这么一大类游戏可以说是将这形、声、触与游戏的联系发挥到了极致，那就是音乐游戏（以下全部简称为音游）。一个优秀的音游这三要素不单单是缺一不可，而是劣一不可，其中一项的体验差了，这款音游就可以说是没有太多的发展空间了。其实这一点从当下市场优秀的音游就可以看出来，就比如音游第一和第二把交椅上的优秀作品——《喵斯快跑》(Muse Dahs)和《音乐世界2》(Cytus II)。这两款游戏各有自己的突出优势和相较劣势，但全部做到了针对形、声、触这三点上的业界典范。这两款游戏始终位于全球手游热销榜单前十，为什么这两款内容并不丰富，延展性不高，缺乏剧情因素的游戏能够收到全球玩家的喜爱？原因就是其音乐创意[10]。</font>  </p>
<p><b><font face="宋体" size=4>3.2 音乐创意的“形”</font></b><br><font face="宋体">&nbsp;&nbsp;在游玩音游的过程中，不需要针对玩家制造出恐怖游戏和战争游戏内的紧张感，也是绝对不能有任何紧张成分在其中。《喵斯快跑》这款游戏对比《音乐世界2》的优势在于她的画面感更强，它是玩家在游玩过程中操控人物在场景中击打节拍符进行游玩的日系卡通风格的音游，因此对于那些对画面感敏感的音游玩家来说可能这款游戏比《音乐世界2》更好玩一些。既然是有一定画面感且为卡通风格的游戏更需要营造出轻快的氛围。针对玩家多为男性方面，制作方则是让游戏内充满了美少女角色；针对女性玩家，制作方则是将游戏美术风格定为卡通风格，增加了可爱元素。美少女与可爱相结合则是拥有了受众面更广的画面。而针对其美术风格，则是更多的搭配了音色温柔、曲风轻快的音乐。这些音乐与其卡通风格的优秀作画相结合，让玩家更容易沉浸在游玩过程中[11]。</font>  </p>
<p><b><font face="宋体" size=4>3.3 音乐创意的“声”</font></b><br><font face="宋体">&nbsp;&nbsp;音乐创意不是音乐创作，在游戏里音乐创意不单单要考虑音乐本身的质量，还要与游戏内其余因素搭配起来要协调，这是一门需要下功夫的功课。在音乐创意上可以说音乐本身质量已然不是最重要的，简单举例来说就是将一个乡村摇滚榜单第一的音乐加入到赛博朋克风格的战斗游戏中，那样的游戏肯定很难让人接受，与优秀游戏完全不搭边，但一个不至于让人反感的乡村摇滚音乐加入到一个农场经营的游戏内则是达到了作为音乐创意的基本标准之一。</font>  </p>
<p><b><font face="宋体" size=4>3.4 音乐创意的“触”</font></b><br><font face="宋体">&nbsp;&nbsp;若《音乐世界2》中的音乐和触击操作与《喵斯快跑》进行互换的话，那这两款游戏都将成为失败作，这也就是说到了音乐创意中的节奏感。<br>&nbsp;&nbsp;《音乐世界2》是一款由玩家直接用手指进行触击节拍符进行游玩的赛博朋克风格音游，且其触击相应的声音更加清脆悦耳，那么对于喜爱摇滚乐的玩家来说则《音乐世界2》是一款更棒的游戏。不是说只要是优秀的摇滚乐都可以作为《音乐世界2》的游玩音乐，他所加入在游玩体验中的音乐必须要保持玩家操作体验并提高审美刺激上的节奏感。在提高审美刺激方面与本文主题偏离较远，本文内不加以阐述，在此将主要阐述何为保持玩家操作体验。音乐进入了音游，它将不再仅仅为人的耳朵去服务，同时要照顾到玩家手部的操作体验[12]。如果一首节奏较快，且音符多偏向左声道的音乐加入到音游内会如何？玩家将会在三分钟的时间内利用左手进行高负荷的触击操作，那么这首音乐在音游内的表现将不再是提高玩家的游玩体验，而是成为玩家的游玩负担。因此音游中的节奏感十分重要，不单说是听觉上的节奏感，还有触觉上的节奏感。尤其是对于《音乐世界2》这款赛博朋克风格的音游来说，更加需要的是左右声道音符较为平衡，节奏快，节拍顿挫感较为强烈的音乐，事实上制作商在选乐和创作音乐上也是遵循这一点，所以《音乐世界2》成功了。</font>  </p>
<hr>
<p><b><font face="黑体" size=5>四、 结果</font></b><br><font face="宋体">&nbsp;&nbsp;针对文中所提到的三大优游戏设计的成功与否的关键要素一共例举了五个例子，对五个成功案例进行分类分析可得到一下结果：<br>&nbsp;&nbsp;一、剧情要素：<br>&nbsp;&nbsp;1.《辐射4》(Fallout 4)：与前三作相比，《辐射4》它所带来的是更加自由的游玩体验。一般而言，游玩较为自由的游戏都会在剧情元素上略有缺失，但《辐射4》的制作方利用整个系列的共同点——玩家身边都有一条狗作为伙伴，以此将玩家在自由游玩过程中始终与剧情进行捆绑，令人满意的是反乌托邦题材的游戏的一大特点就是让玩家知道珍惜，从而更加注重游玩过程中的每一次接触，也就是对增强了对剧情的身临其境，因此《辐射4》成功了。<br>&nbsp;&nbsp;2.《明日方舟》(Arknights)：明日方舟的成功分三点——独特的作画、创意的玩法、优秀的剧情。在剧情方面，明日方舟是一款反乌托邦题材的游戏，但它不同于大部分同题材游戏的是玩家在游玩过程中几乎感觉不到游戏内所露出的绝望感，而绝望感是反乌托邦游戏的一大特色。《明日方舟》虽为反乌托邦题材游戏但剧情上更多的是在描写两个人或三四个人的带有喜剧性的对话，利用这些对话掩盖背景后的绝望感和推动剧情发展，这一点正是抓住了人性中所向往的苦衷作乐的心态，因此得以成功。<br>&nbsp;&nbsp;二、沉浸感要素<br>&nbsp;&nbsp;《奇异人生》(Life is Strange)主要以其剧情丰富、对话提示、互动选择等非操作性元素整合在一块，降低了玩家在游玩过程中对双手行为的注意力，为了防止玩家注意力的分散，利用其聆听的必要性将玩家的注意力集中在角色代入和剧情代入中，从而大大提高了玩家游玩的沉浸感，以此提高玩家的游玩兴趣和游玩乐趣，并且间接的为游戏本身创造出更大的拓展空间。因此《奇异人生》以其颇具特色的沉浸体验享誉业界。<br>&nbsp;&nbsp;三、音乐创意要素<br>&nbsp;&nbsp;1.《喵斯快跑》(Muse Dahs)中利用其优质的音乐和优良的作画收获了大量玩家的喜爱，并且始终明确游戏玩法定位，围绕着音乐进行作画创作、节拍设计的同时永不偏离其卡通画风所具备的可爱、轻快风格，创造了稳定的玩家群体，真正做到了围绕音乐进行玩法创作，以音乐和玩法的平衡结合对整个游戏进行了升华，因此《喵斯快跑》得到了众多玩家的追捧。<br>&nbsp;&nbsp;2.《音乐世界》(Cytus II)作为享誉世界的音游厂商雷亚游戏，在未发售前就有众多粉丝群体翘首以盼。当他发售后以其节奏紧凑、节拍交错平衡，且听觉刺激强的音乐结合其赛博朋克风格的画风，立刻收获了大量玩家的喜爱，且其全屏触击，节拍触击响应清脆悦耳，搭配其优质的电音、摇滚，立刻调动起玩家的肾上腺素，在持续兴奋的状态下进行游玩，可以说没有哪个音游玩家不会喜欢这样的一款以音乐带来刺激感的游戏，因此《音乐世界2》依旧保持雷亚游戏出品的传统，位居世界畅销榜前列。</font>  </p>
<hr>
<p><b><font face="黑体" size=5>五、 讨论</font></b><br><font face="宋体">&nbsp;&nbsp;网络上充斥着大量与本文类似的单独游戏作品的评测文章，其中大部分文章对游戏进行评价是多指出游戏最为突出的特点，如针对音乐游戏多有评价其音乐的，针对枪战游戏多有评价其对抗玩法的，较少有文章会提及为何这些游戏的优秀部分会顺利的展示给玩家。<br>&nbsp;&nbsp;本文中针对例举的游戏作品进行分析时，用较少的文字去描述其突出优势，而是更多的描述其他因素是如何配合其突出因素而让整个游戏设计显得自然且平衡。<br>&nbsp;&nbsp;事实上当下越是吸取玩家意见多的游戏，越是容易走向失败。原因就是玩家一般只会提出那些让自己最满意和最不满意的观点，而对那些可以接受的部分只字不提。因此原本游戏元素间的平衡就可能因为制作方的针对一个元素的大幅改动而导致游戏整体失衡，从而有希望成为优秀创作的游戏而越走越偏。<br>&nbsp;&nbsp;因此本文观点认为今后的游戏厂商，在吸取玩家意见，调查玩家喜好的同时，不能只注重玩家群体，同时要尊重游戏整体生态，要明确游戏各个元素间的搭配关系，如何分配元素资源才能完成一项可发展空间大，细节优良的游戏创作。</font>  </p>
<hr>
<p><b><font face="黑体" size=5>六、 结论</font></b><br><font face="宋体">&nbsp;&nbsp;在游戏中剧情处于一大主导地位，剧情的优秀与否直接导致玩家在继续游玩过程中的热度保持程度，如果剧情不够吸引人，不够有独创性，不具有艺术感则会让玩家的游玩热情加速降低，相反的优秀的剧情则会保持并且提高玩家的游玩热情。<br>&nbsp;&nbsp;沉静感则是玩家游玩过程中的投入度，电子游戏作为一个娱乐性产品，玩家去游玩定是去削减压力或是消磨时间的，而沉浸感越深，玩家削减压力的效率则越高，对玩家的心情影响就越大，从而玩家会更喜爱这个带给他快乐心情的游戏。<br>&nbsp;&nbsp;音乐创意可以说是连接了游戏内外的一大关键因素。音乐创意和画面创意作为两大游戏刺激的关键点，都可以通过提高玩家肾上腺素分泌而带来更加爽快的游玩体验。音乐创意更是让玩家直接感受到游戏的主题以及游戏所想表达的思想，可以说是建起了玩家与游戏的桥梁，因此优秀的音乐创意更容易让玩家在一种兴奋状态游玩。<br>&nbsp;&nbsp;这三点只是本文中提出的三大关键因素，但事实上能够提高游戏质量的关键因素远不止这些。在二十一世纪，游戏制作已经渐渐脱离了曾经那种追求新式引擎，追求新的平台，追求新的市场的模式，而逐渐转换为追求玩家体验，追求忠实玩家群体，追求生态环境的模式。因此当下的游戏设计所注重的已不是单单的技术层面问题，而是在策划方面加大力度，要将更多艺术与思考加入到游戏中以此带给玩家更加新颖、健康且兴奋的游戏体验，这是当下游戏设计成功与否的关键。</font>  </p>
<hr>
<p><b><font face="黑体" size=5>参考文献</font></b><br><font face="Times New Roman">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1] Óliver Pérez-Latorre   Post-apocalyptic Games, Heroism and the Great Recession[J]   Game Studies   2019年12月3日   卷19期<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2] Baccolini, R. and Moylan, T. (2003). Dark Horizons. Science fiction and dystopian imagination. London: Routledge.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3] Buinicki, M. T. (2016). “Nostalgia and the Dystopia of History in 2K’s Bioshock Infinite.” The Journal of Popular Culture, 49, 722-737.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4] Peck, J. (2013). “Austere reason, and the eschatology of neoliberalism’s End Times.” Comparative European Politics, 11(6), 713-721.<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5]Chang, A., Constantino, J., &amp; Soderman, B. (2017). The multiple lives of permadeath: An introduction. Journal of Gaming and Virtual Worlds, 9(2), P103–121<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6] Melissa Kagen   Walking, Talking and Playing with Masculinities in Firewatch[J]   Game Studies   2018年9月2日   卷18期<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7] Kagen, M. (2017). Walking sims, gamergate, and the gender of wandering. In Eburne, J.P. &amp; Schreier, B. (Eds.), The year’s work in nerds, wonks, and neo-cons (P275–300). Bloomington: Indiana University Press<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8] Alexander Wharton, Karen Collins Subjective Measures of the Influence of Music Customization on the Video Game Play Experience: A Pilot Study[J]   Game Studies   2011年5月2日   卷11期<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9] Aaron Oldenburg Sonic Mechanics: Audio as Gameplay[J]   Game Studies   2013年9月1日   卷13期<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[10] Joshua D. Sites, Robert F. Potter Everything Merges with the Game: A Generative Music System Embedded in a Videogame Increases Flow[J]   Game Studies   2018年9月2日   卷18期<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[11] Jin, S.-A. A. (2012). “Toward Integrative Models of Flow”: Effects of Performance, Skill, Challenge, Playfulness, and Presence on Flow in Video Games. Journal of Broadcasting &amp; Electronic Media, 56(2), 169-186. doi:10.1080/08838151.2012.678516<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[12] Friberg, J. and Gärdenfors, D. Audio games: New perspectives on game audio. In Proceedings of the ACM International Conference on Advances in Computer Entertainment Technology (pp. 148—154), Jumanji, Singapore, 2004.</p>
]]></content>
      <categories>
        <category>论文</category>
      </categories>
      <tags>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot①——IDEA简易搭建SpringBoot</title>
    <url>/2021/07/18/SpringBoot%E2%91%A0%E2%80%94%E2%80%94IDEA%E7%AE%80%E6%98%93%E6%90%AD%E5%BB%BASpringBoot/</url>
    <content><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>File-&gt;new-&gt;project；</p>
<p>选择“Spring Initializr”</p>
<img src='/img/springboot/1/1.png'>

<p>相关配置选择</p>
<img src='/img/springboot/1/2.png'>

<p>Maven可以先不管。</p>
<p>在templates文件下新建index.html页面，作为启动的初始页面；</p>
<img src='/img/springboot/1/3.png'>

<p>在com.example.demo下新建controller文件夹，在controller文件夹下建一个HelloController类；（Controller类要添加@Controller注解，项目启动时，SpringBoot会自动扫描加载Controller）</p>
<img src='/img/springboot/1/4.png'>

<p>为其配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.poem.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;&#x2F;index&quot;)</span><br><span class="line">    public String sayHello()&#123;</span><br><span class="line">        return &quot;index&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在resources文件夹下application中配置DataSource基本信息，application存在.properties为后缀的文件类型和.yml为后缀的文件类型，此处为.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port&#x3D;9090    #端口</span><br><span class="line">spring.datasource.name&#x3D;test     #数据库名</span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">spring.datasource.username&#x3D;root  #用户名</span><br><span class="line">spring.datasource.password&#x3D;102654  #密码</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<p>运行项目启动类DemoApplication.java</p>
<img src='/img/springboot/1/5.png'>

<p>浏览器输入<a href="http://localhost:9090/" target="_blank" rel="noopener">http://localhost:9090/</a></p>
<img src='/img/springboot/1/6.png'>

<p>链接数据库：点击右侧的Database，点“加号”，新建数据库链接</p>
<img src='/img/springboot/1/7.png'>

<p>填写数据库相关信息，点击Test Connection进行连接测试；</p>
<img src='/img/springboot/1/8.png'>

<img src='/img/springboot/1/9.png'>

<p>SpringBoot项目大概分为四层：</p>
<p>（1）DAO层：包括XxxMapper.java(数据库访问接口类)，XxxMapper.xml(数据库链接实现)；（这个命名，有人喜欢用Dao命名，有人喜欢用Mapper，看个人习惯了吧）</p>
<p>（2）Bean层：也叫model层，模型层，entity层，实体层，就是数据库表的映射实体类，存放POJO对象；</p>
<p>（3）Service层：也叫服务层，业务层，包括XxxService.java(业务接口类)，XxxServiceImpl.java（业务实现类）；（可以在service文件夹下新建impl文件放业务实现类，也可以把业务实现类单独放一个文件夹下，更清晰）</p>
<p>（4）Web层：就是Controller层，实现与web前端的交互。</p>
<p>创建响应文件后文件列表如下：</p>
<img src='/img/springboot/1/10.png'>

<p>于application配置文件中添加MyBatis配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper&#x2F;*.xml  #配置映射文件</span><br><span class="line">  type-aliases-package: com.example.test.bean #配置实体类</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统期末复习</title>
    <url>/2021/01/02/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="第一章-操作系统（OS）引论"><a href="#第一章-操作系统（OS）引论" class="headerlink" title="第一章 操作系统（OS）引论"></a>第一章 操作系统（OS）引论</h2><p><b>操作系统的目标</b></p>
<ul>
<li>方便性</li>
<li>有效性</li>
<li>可扩充性</li>
<li>开放性</li>
</ul>
<p><b>操作系统的作用</b></p>
<ul>
<li><p>OS 作为用户与计算机硬件系统之间的接口</p>
  <img src='/img/操作系统期末复习/img4.jpg'>
</li>
<li><p>OS 作为计算机系统资源的管理者，资源分为：</p>
<ul>
<li>处理机</li>
<li>存储器</li>
<li>I/O 设备</li>
<li>文件</li>
</ul>
</li>
<li><p>OS 实现了对计算机资源的抽象</p>
  <img src='/img/操作系统期末复习/img5.jpg'>

</li>
</ul>
<p>&nbsp;</p>
<p><b>操作系统的基本特性</b></p>
<p><b>并发</b> <font color='red'>★★★</font></p>
<ul>
<li><p>并行与并发</p>
<p>  并行性指两个或多个事件在同一时刻发生。而并发性是指两个或多个事件在同一时间间隔内发生。</p>
<p>  单处理机系统内，微观上并行是这些程序分时的交替执行。如 1 秒内有四个程序并行，实际是 0-15 ms 程序 A 运行；15-30 ms 程序 B 运行；30-45 ms 程序 C 运行；45-60 ms 程序 D 运行。</p>
</li>
<li><p>引入进程</p>
<p>  在未引入进程前，同一应用的计算程序和 I/O 程序只能顺序执行。若为两者分别建立一个进程，这两个进程便可以并发执行，这样便能<b>极大地提高系统资源利用率，增加系统吞吐量</b>。</p>
<p>  进程是指<b>系统中能独立运行并作为资源分配的基本单位</b>。它由一组机器指令、数据和堆栈等组成的，是一个能独立运行的活动实体。<b>进程和并发是现代操作系统中最重要的基本概念，也是操作系统运行的基础</b>。</p>
</li>
</ul>
<p><b>共享</b></p>
<p>指系统中的资源可供内存中多个并发执行的进程共同使用。</p>
<ul>
<li><p>互斥共享方式</p>
<p>  系统中某些资源可以提供给多个进程使用，但规定在一段时间内，只允许一个进程访问该资源。将这种一段时间内只允许一个进程访问的资源，称为<b>临界资源</b>。</p>
</li>
<li><p>同时访问方式</p>
<p>  单处理环境下，宏观上是“同时”，微观上，进程对资源的访问时交替进行的。</p>
</li>
</ul>
<p><b>虚拟</b></p>
<p>OS 中，把通过某种技术将一个物理实体变成若干个逻辑上的对应物的功能称为“虚拟”。</p>
<ul>
<li><p>时分复用技术</p>
<p>  该技术提高资源利用率的根本原因在于，它利用某设备为一用户服务的空闲时间，又转去为其他用户服务，使设备得到最充分的利用。</p>
<ul>
<li>虚拟处理机技术</li>
<li>虚拟设备技术</li>
</ul>
</li>
<li><p>空分复用技术</p>
<p>  例如将一个较大存储空间分成较多的窄小存储空间。</p>
</li>
</ul>
<p><b>异步</b></p>
<p>进程通常不能一次性完成工作，而是段进式的，最后利用资源的进程可能工作量较小，最先利用资源的进程可能工作量较大，因此最后利用资源的进程反而有可能最先完成工作，这便是异步。</p>
<p>操作系统的四大基本特性：</p>
<ul>
<li>并发</li>
<li>共享</li>
<li>虚拟</li>
<li>异步</li>
</ul>
<p>&nbsp;</p>
<p><b>操作系统的主要功能</b></p>
<p><b>处理机管理功能</b></p>
<ul>
<li><p>进程控制</p>
<p>  为作业创建进程、撤销已结束的进程，以及控制进程在运行过程中的状态转换。</p>
</li>
<li><p>进程同步</p>
<p>  为多个进程的运行进行协调。实现进程同步最常用的机制是信号量机制。</p>
</li>
<li><p>进程通信</p>
<p>  事先相互合作进程之间的信息交换。</p>
</li>
<li><p>调度</p>
<ul>
<li>作业调度：从后备队列中按照一定的算法选择出若干作业，为它们分配运行所需的资源，再将这些作业调入内存后，分别为他们建立进程，并插入就绪队列中。</li>
<li>进程调度：从进程的就绪队列中按照一定的算法选出一个进程，将处理机分配给它，并为它设置运行现场，使其投入执行。</li>
</ul>
</li>
</ul>
<p><b>存储器管理功能</b></p>
<ul>
<li><p>内存分配</p>
<ul>
<li><p>为每道程序分配内存空间。</p>
</li>
<li><p>提高存储器利用率。</p>
</li>
<li><p>允许正在运行的程序申请附加的内存空间。</p>
<ul>
<li>静态分配方式：装入时即确定空间，不可变。</li>
<li>动态分配方式：允许后续申请新的附加空间。</li>
</ul>
</li>
</ul>
</li>
<li><p>内存保护</p>
<ul>
<li>确保每道用户程序仅在自己的内存空间内运行。</li>
<li>绝不允许用户程序访问操作系统的程序和数据。</li>
</ul>
</li>
<li><p>地址映射</p>
<p>  将地址空间中的逻辑地址转换为内存空间中与之对应的物理地址。</p>
</li>
<li><p>内存扩充</p>
<p>  逻辑上扩充内存容量，用于实现：请求调入功能、置换功能。</p>
</li>
</ul>
<p><b>设备管理功能</b></p>
<p>主要任务有：</p>
<ol>
<li><p>完成用户进程提出的 I/O 请求，为用户进程分配所需的 I/O 设备，并完成指定的 I/O 操作。</p>
</li>
<li><p>提高 CPU 和 I/O 设备的利用率，提高 I/O 速度，方便用户使用 I/O 设备。</p>
</li>
</ol>
<ul>
<li><p>缓存管理</p>
<p>  如果在 I/O 设备和 CPU 之间引入缓冲，则可有效地缓和 CPU 和 I/O 设备速度不匹配的矛盾，提高 CPU 利用率，进而提高系统吞吐量。</p>
</li>
<li><p>设备分配</p>
<p>  根据用户进程的 I/O 请求、系统现有资源情况以及按照某种设备分配策略，为之分配其所需的设备。</p>
</li>
<li><p>设备处理</p>
<p>  实现 CPU 和设备控制器之间的通信，即由 CPU 向设备控制器发出 I/O 命令，要求它完成指定的 I/O 操作。</p>
</li>
</ul>
<p><b>文件管理功能</b></p>
<p>对用户文件和系统文件进行管理以方便用户使用，并保证文件的安全性。</p>
<ul>
<li><p>文件存储空间的管理</p>
<p>  为每个文件分配必要的外存空间，提高外存的利用率，进而提高文件系统的存、取速度。</p>
</li>
<li><p>目录管理</p>
<p>  为每个文件建立一个目录项，目录项包括文件名、文件属性、文件在磁盘上的物理位置等，并对众多的目录项加以有效地组织，以实现方便的按名存取。</p>
</li>
<li><p>文件的读/写管理和保护</p>
<ul>
<li><p>文件的读/写管理：根据用户的请求，从外存中读取数据，或将数据写入外存。</p>
</li>
<li><p>文件保护：</p>
<ol>
<li>防止未经核准的用户存取文件。</li>
<li>防止冒名顶替存取文件。</li>
<li>防止以不正确的方式使用文件。</li>
</ol>
</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><b>操作系统与用户之间的接口</b></p>
<ul>
<li><p>用户接口 <font color='red'>★★★</font></p>
<p>  为方便用户直接或间接地控制自己的作业，操作系统向用户提供了命令接口。用户可通过该接口向作业发出命令以控制作业的运行。该接口又进一步分为联机用户接口、脱机用户接口和图形用户接口。</p>
<ol>
<li>联机用户接口：为联机用户提供，由一组键盘操作命令和命令解释程序组成。当用户在终端或控制台上键入一条命令后，系统便立即转入命令解释程序，对该命令加以解释执行。</li>
<li>脱机用户接口：为批处理作业的用户提供，用户用作业控制语言 JCL 把需要对作业进行的控制和干预命令事先写在作业说明书上，然后把它与作业一同提供给系统。</li>
<li>图形用户接口：采用图形化操作界面，通过图标将系统各项功能、各种应用程序和文件直观表示。</li>
</ol>
</li>
<li><p>程序接口 <font color='red'>★★★</font></p>
<p>  为用户程序在执行中访问系统资源而设置的，是用户程序取得操作系统服务的唯一途径。它由一组系统调用组成。</p>
</li>
</ul>
<hr>
<h2 id="第二章-进程的描述与控制"><a href="#第二章-进程的描述与控制" class="headerlink" title="第二章 进程的描述与控制"></a>第二章 进程的描述与控制</h2><p><b>进程的定义</b> <font color='red'>★★★</font></p>
<p>为了使参与并发执行的每个程序都能独立地运行，在操作系统中必须为之配置一个专门的数据结构，称为<b>进程控制块（PCB）</b>。系统利用 PCB 来描述进程的基本情况和活动过程，进而控制和管理进程。这样，<b>由程序段、数据段和 PCB 三部分便构成了进程实体</b>。</p>
<p>对进程的不同定义：</p>
<ol>
<li>进程是程序的一次执行。</li>
<li>进程是一个程序机器数据在处理机上顺序执行时所发生的活动。</li>
<li>进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</li>
</ol>
<p>传统定义：<b>进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。</b></p>
<p><b>进程的特征</b></p>
<ul>
<li>动态性：进程最基本的特征。</li>
<li>并发性：多个进程实体同存于内存中，能在一段时间内同时运行。</li>
<li>独立性：进程实体是一个能独立运行、独立获取资源、独立接收调度的基本单位。</li>
<li>异步性：进程按异步方式运行。</li>
</ul>
<p><b>进程的五种基本状态及转换</b> <font color='red'>★★★</font></p>
<img src='/img/操作系统期末复习/img6'>

<p><b>进程的创建</b></p>
<ul>
<li>申请空白PCB。</li>
<li>为新进程分配其运行所需的资源。</li>
<li>初始化进程控制(PCB)。</li>
<li>如果进程就绪队列能够接纳新进程，便将新进程插入就绪队列。</li>
</ul>
<p>&nbsp;</p>
<p><b>临界区</b> <font color='red'>★★★</font></p>
<p>访问临界资源的代码称为<b>临界区</b>。对临界资源的访问是<b>互斥访问</b>。</p>
<p>进访问区前，对欲访问的临界资源进行检查。若该临界资源正被某个资源访问的时候，不能进入临界区。因此在临界区前加一段检查代码，称为<b>进入区</b>。临界区后面加一段代码，称为<b>退出区</b>。剩余部分称为<b>剩余区</b>。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(TURE)</span><br><span class="line">&#123;</span><br><span class="line">    进入区</span><br><span class="line">    临界区</span><br><span class="line">    退出区</span><br><span class="line">    剩余区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>利用信号量实现进程互斥</b></p>
<ul>
<li><p>设 mutex 为互斥信号量，初值为 1，取值范围（-1，0，1）。当mutex=1时，表示两个进程都没进入需要互斥的临界区；当mutex=0时，表示有一个进程进入临界区运行，另一个必须进行等待，挂入阻塞队列。当mutex=-1时，表示有一个进程正在临界区运行，另外一个进程因等待而阻塞在信号量队列中，需要被当前已在临界区运行的进程退出时唤醒。</p>
</li>
<li><p>代码：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">semaphore mutex &#x3D; 1</span><br><span class="line">Pa()&#123;</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        wait(mutex);</span><br><span class="line">        临界区;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        剩余区;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Pb()&#123;</span><br><span class="line">    while(1)&#123;</span><br><span class="line">        wait(mutex);</span><br><span class="line">        临界区;</span><br><span class="line">        signal(mutex);</span><br><span class="line">        剩余区;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>&nbsp;</p>
<p><b>线程的引入</b> <font color='red'>★★★</font></p>
<p>线程的引入使 OS 具有更好的并发性。</p>
<ul>
<li><p>进程的两个进本属性：</p>
<ol>
<li>进程是一个可拥有资源的独立单位，一个进程要能独立运行，它必须拥有一定的资源。</li>
<li>进程同时又是一个可独立调度和分派的基本单位，一个进程要能独立运行，它还必须是一个可独立调度和分派的基本单位。</li>
</ol>
</li>
<li><p>为使程序能并发执行，系统必须进行以下操作</p>
<ol>
<li>创建进程</li>
<li>撤销进程</li>
<li>进程切换</li>
</ol>
</li>
<li><p>线程——作为调度和分派的基本单位</p>
</li>
</ul>
<hr>
<h2 id="处理机调度与死锁"><a href="#处理机调度与死锁" class="headerlink" title="处理机调度与死锁"></a>处理机调度与死锁</h2><p><b>平均周转时间</b></p>
<p>完成时间=等待时间+时间片大小*距离完成相差进程数<br>周转时间=完成时间-服务时间<br>带权周转时间=周转时间/服务时间<br>平均周转时间=周转时间总和/进程数<br>带权平均周转时间=带权周转时间总和/进程数</p>
<p><b>短作业优先调度算法 SJF算法</b></p>
<p>书P101</p>
<p><b>死锁的概念</b> <font color='red'>★★★</font></p>
<p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>
<p><b>死锁的定义</b> <font color='red'>★★★</font></p>
<p>如果一组进程中的每一个进程都在等待仅由该组进程中的其他进程才能引发的事件，那么该组进程是死锁的。</p>
<p><b>产生死锁的必要条件</b></p>
<ul>
<li>互斥条件：进程对所分配到的资源进行排他性使用。</li>
<li>请求和保持条件：进程已经保持了至少一个资源，但又提出新的资源请求，该资源已被其他进程占有。</li>
<li>不可抢占条件：进程已获得的资源在未使用前不能被抢占，只能在进程使用完时由自己释放。</li>
<li>循环等待条件：在发生死锁时，必然存在一个进程——资源的循环链中的第一个资源在等待下一个资源，下一个资源在等待下下一个资源，最后一个资源在等待被第一个资源所占用的资源。</li>
</ul>
<p><b>处理死锁的方法</b></p>
<ul>
<li>预防死锁：设置限制条件，破坏产生死锁的四个必要条件中的一个或几个来预防死锁产生。</li>
<li>避免死锁：在资源动态分配程中，用某种方法防止系统进入不安全状态。</li>
<li>检测死锁：通过检测机构及时地检测出死锁的发生，然后采取适当的措施，将进程从死锁中解脱出来。</li>
<li>解除死锁：常用方法是撤销一些进程，回收它们的资源，将其分配给已堵塞的资源使其运行。</li>
</ul>
<p><b>避免死锁</b> <font color='red'>★★★</font></p>
<p>银行家算法，书P119</p>
<hr>
<h2 id="第四章-存储器管理"><a href="#第四章-存储器管理" class="headerlink" title="第四章 存储器管理"></a>第四章 存储器管理</h2><p><b>连续分配存储管理方式</b></p>
<ul>
<li>单一连续分配</li>
<li>固定分区分配</li>
<li>动态分区分配</li>
</ul>
<p><b>基于顺序搜索的动态分区分配算法</b></p>
<ul>
<li>首次适应算法(FF算法)</li>
<li>循环首次适应算法(NF算法)</li>
<li>最佳适应算法(BF算法)</li>
<li>最坏适应算法(WF算法)</li>
</ul>
<p><b>分页存储管理方式</b> <font color='red'>★★★</font></p>
<p>分页地址结构：<br>二进制下，前11位是偏移量，后最多20位是页号，比如偏移量800，即地址结构内偏移量为01100100000，属于第2页，最大为8页，其页号为1000，则第二页页号为0010。其地址结构为0010,01100100000</p>
<p><b>分段存储管理方式</b></p>
<p>分段地址结构：<br>二进制下，前15位是偏移量，后最多15位是页号，比如偏移量800，即地址结构内偏移量为000001100100000，属于第2页，最大为8页，其页号为1000，则第二页页号为0010。其地址结构为0010,000001100100000</p>
<hr>
<h2 id="第五章-虚拟存储器"><a href="#第五章-虚拟存储器" class="headerlink" title="第五章 虚拟存储器"></a>第五章 虚拟存储器</h2><p><b>虚拟存储器的定义</b></p>
<p>指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行速度接近于内存速度。</p>
<p><b>虚拟存储器的实现方法</b></p>
<ul>
<li><p>分页请求系统</p>
<p>  在分页系统基础上增加了请求调页功能和页面置换功能所形成的页式虚拟存储系统。</p>
<ul>
<li><p>硬件支持</p>
<ol>
<li>请求分页的页表机制：作为请求分页的数据结构。</li>
<li>缺页中断机构：每当用户程序要访问的页面尚未调入内存时，便产生一缺页中断，以请求OS将所缺的页调入内存。</li>
<li>地址变换机构：在纯分页地址变换机构的基础上发展形成的。</li>
</ol>
</li>
<li><p>软件支持</p>
<p>  包括用于实现请求调页的软件和实现页面置换的软件。</p>
</li>
</ul>
</li>
<li><p>请求分段系统</p>
<p>  在分段系统基础上，增加了请求调段及分段置换功能后所形成的段式虚拟存储系统。</p>
<ul>
<li><p>硬件支持</p>
<ol>
<li>请求分段的段表机制：作为请求分段的数据结构。</li>
<li>缺段中断机构：每当用户程序要访问的段尚未调入内存时，便产生一缺段中断，以请求OS将所缺的段调入内存。</li>
<li>地址变换机构：在纯分段地址变换机构的基础上发展形成的。</li>
</ol>
</li>
<li><p>软件支持：</p>
<p>  包括用于实现请求调段的软件和实现段置换的软件。</p>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="第六章-输入输出系统"><a href="#第六章-输入输出系统" class="headerlink" title="第六章 输入输出系统"></a>第六章 输入输出系统</h2><p><b>假脱机(Spooling)系统</b></p>
<p>假脱机系统构成部分：</p>
<ul>
<li>输入井和输出井。</li>
<li>输入缓冲区和输出缓冲区。</li>
<li>输入进程和输出进程。</li>
<li>井管理程序。</li>
</ul>
<p>假脱机系统特点：</p>
<ul>
<li>提高了I/O的速度。</li>
<li>将独占设备改造为共享设备。</li>
<li>实现了虚拟设备功能。</li>
</ul>
<p><b>磁盘调度算法</b></p>
<p>书P233</p>
<hr>
<h2 id="第七章-文件管理"><a href="#第七章-文件管理" class="headerlink" title="第七章 文件管理"></a>第七章 文件管理</h2><p><b>数据项</b></p>
<ul>
<li>基本数据项：又称字段。</li>
<li>组合数据项：若干基本数据项组成。</li>
</ul>
<p><b>记录</b></p>
<p>是一组相关数据项的集合，用于描述一个对象在某方面的属性。</p>
<p><b>文件</b></p>
<p>文件指由创建者所定义的、具有文件名的一组相关元素的集合，可分为有结构文件和无结构稳健两种。</p>
<p>文件的属性包括：</p>
<ul>
<li>文件类型。</li>
<li>文件长度。</li>
<li>文件的物理位置。</li>
<li>文件的建立时间。</li>
</ul>
<p>文件包括文件名和拓展名。</p>
<p>文件类型：</p>
<p>按用途分类：</p>
<ul>
<li>系统文件：不可读写。</li>
<li>用户文件：指由用户的源代码、目标文件、可执行文件或数据所构成的文件。</li>
<li>库文件：由标准子例程及常用的例程所构成的文件。</li>
</ul>
<p>按文件中数据形式分类：</p>
<ul>
<li>源文件</li>
<li>目标文件（.obj）</li>
<li>可执行文件（.exe）</li>
</ul>
<p>按存取控制属性分类：</p>
<ul>
<li>只执行文件（不可读写）</li>
<li>只读文件（不可写）</li>
<li>读写文件</li>
</ul>
<p>按组织形式和处理方式分类：</p>
<ul>
<li>普通文件</li>
<li>目录文件</li>
<li>特殊文件</li>
</ul>
<p><b>文件管理系统管理对象</b></p>
<ul>
<li>文件。</li>
<li>目录。</li>
<li>磁盘存储空间。</li>
</ul>
<p>文件系统接口：</p>
<ul>
<li>命令接口。</li>
<li>程序接口。</li>
</ul>
<p>最基本文件操作：</p>
<ul>
<li>创建文件。</li>
<li>删除文件。</li>
<li>读文件。</li>
<li>写文件。</li>
<li>设置文件读写位置。</li>
</ul>
<h2 id="雨课堂习题"><a href="#雨课堂习题" class="headerlink" title="雨课堂习题"></a>雨课堂习题</h2><p><b>选择</b></p>
<p>在计算机系统中配置操作系统的主要目的是<b><font color='red'>提高系统资源的利用率</font></b></p>
<p>操作系统的主要功能是管理计算机系统中的<b><font color='red'>资源</font></b></p>
<p>在<b><font color='red'>实时操作系统</font></b>的控制下，计算机系统能及时处理由该过程控制反馈的数据，并作出响应。</p>
<p>下面描述正确的是<b><font color='red'>并发性是指若干事件在同一时间间隔内发生</font></b></p>
<ul>
<li>易错：<b><font color='blue'>并发性是指若干时间在同一时刻内发生</font></b></li>
</ul>
<p>Windows XP 是一个<b><font color='red'>单用户多任务操作系统</font></b>。</p>
<p>下列进程状态转换中，绝对不可能发生的状态转换是<b><font color='red'>就绪-&gt;堵塞</font></b></p>
<p>对于记录型信号量，在执行一次wait操作时，信号量的值应当<b><font color='red'>减1</font></b></p>
<p>下面对临界区的论述中，正确的是<b><font color='red'>临界区是指进程中访问临界资源的那段代码</font></b>。</p>
<p>对于记录型信号量，在执行signal操作时，当其值为<b><font color='red'>小于等于0</font></b>时，应唤醒阻塞队列中的进程。</p>
<p>作业调度是从处于<b><font color='red'>后备</font></b>状态的队列中选取作业投入运行。</p>
<p><b><font color='red'>周转时间</font></b>是指作业进入系统到作业完成所经过的时间间隔。</p>
<p>下列算法，<b><font color='red'>FCFS调度算法</font></b>只能采用非抢占调度方式。</p>
<p>系统产生死锁是指<b><font color='red'>若干进程等待被其他进程所占用而又不可能被释放的资源</font></b>。</p>
<p>下列解决死锁的方法中，属于死锁避免策略的是<b><font color='red'>银行家算法</font></b>。</p>
<p>下列解决死锁的方法中，属于死锁预防策略的是<b><font color='red'>资源有序分配法</font></b>。</p>
<p>从下列关于非虚拟存储器的论述中，选出一条正确的论述。<b><font color='red'>要求作业在运行前，必须全部装入内存，且在运行过程中也必须一直驻留内存。</font></b></p>
<p>提高内存利用率主要通过<b><font color='red'>内存分配</font></b>功能实现。</p>
<p>&nbsp;</p>
<p><b>填空</b></p>
<p>操作系统最基本的特征是<b><font color='red'>并发</font></b>和<b><font color='red'>共享</font></b>，最主要的任务是<b><font color='red'>管理资源</font></b>。</p>
<p>引入进程的主要目的是<b><font color='red'>并发执行</font></b>，进程存在的唯一标志是<b><font color='red'>PCB</font></b>。</p>
<p>从静态的角度看，进程是由<b><font color='red'>程序段</font></b>、<b><font color='red'>数据段</font></b>、<b><font color='red'>进程控制块（PCB）</font></b>三部分组成。</p>
<p>在生产者——消费者问题中，应该设置互斥信号量mutex、资源信号量full和empty，它们的初值分别是<b><font color='red'>1</font></b>、<b><font color='red'>0</font></b>、<b><font color='red'>n</font></b>。</p>
<p>&nbsp;</p>
<p><b>主观题</b></p>
<img src='/img/操作系统期末复习/img1.jpg'>

<img src='/img/操作系统期末复习/img2.jpg'>

<img src='/img/操作系统期末复习/img3.jpg'>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Bootstrap框架</title>
    <url>/2020/06/11/%E5%88%9D%E8%AF%86Bootstrap%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="什么是Bootstrap？"><a href="#什么是Bootstrap？" class="headerlink" title="什么是Bootstrap？"></a>什么是Bootstrap？</h1><hr>
<p>Bootstrap是应用于快速开发Web应用程序和网站的前端框架。其技术基于HTML、CSS、JS。<br>Bootstrap主要应用于响应式设计方便开发者编写一个在任何设备都方便查看且简洁美观的网站。</p>
<p>Bootstrap的优点：</p>
<ul>
<li><b>移动设备优先：</b>框架包含了贯穿于整个库的移动设备优先的样式。</li>
<li><b>浏览器支持：</b>所有主流浏览器都支持Bootstrap。</li>
<li><b>容易上手：</b>没啥说的，入门涉及JS方面代码较少，主要是HTML、CSS。</li>
<li><b>响应式设计：</b>Bootstrap响应式CSS能够自适应于台式机、平板电脑和手机等相关设备。</li>
</ul>
<hr>
<h2 id="移动设备的优先支持"><a href="#移动设备的优先支持" class="headerlink" title="移动设备的优先支持"></a>移动设备的优先支持</h2><hr>
<p>有时候开发者在开发网站时，可能会遇到想要确定网站的布局样式，不希望它在不同设备上出现不同的效果，此时可以利用在head标签内添加viewport meta 标签。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>width 属性控制设备的宽度。假设您的网站将被带有不同屏幕分辨率的设备浏览，那么将它设置为 device-width 可以确保它能正确呈现在不同设备上。</p>
<p>initial-scale=1.0 确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放。</p>
<p>在移动设备浏览器上，通过为 viewport meta 标签添加 user-scalable=no 可以禁用其缩放（zooming）功能。</p>
<p>通常情况下，maximum-scale=1.0 与 user-scalable=no 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉。</p>
<h2 id="响应式图像"><a href="#响应式图像" class="headerlink" title="响应式图像"></a>响应式图像</h2><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;...&quot; class&#x3D;&quot;img-responsive&quot; alt&#x3D;&quot;响应式图像&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>通过添加 img-responsive class 可以让 Bootstrap 3 中的图像对响应式布局的支持更友好。</p>
<h2 id="容器（Container）"><a href="#容器（Container）" class="headerlink" title="容器（Container）"></a>容器（Container）</h2><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<p>反正写Bootstrap框架下的代码，套在这里面就对了。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>框架</category>
        <category>Bootstrap</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>框架</tag>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot学习</title>
    <url>/2021/03/01/SpringBoot%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="SpringBoot-初始"><a href="#SpringBoot-初始" class="headerlink" title="SpringBoot 初始"></a>SpringBoot 初始</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>main/resource/static：放置静态文件，如图片、CSS、JS等<br>main/resource/templates：放置前端框架文件，如.html</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><ul>
<li>@Controller：返回页面，显示用</li>
<li>@RestController：返回JSON格式数据</li>
<li>@ResponseBody：返回JSON数据</li>
<li>@ControllerAdvice：捕获全局异常</li>
<li>@ExceptionHandler(RuntimeException.class)：返回当前异常</li>
</ul>
<p>两种启动方式：</p>
<p>一：单独启动一个.class文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span>    <span class="comment">//启动注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(HelloSpring<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二：启动包内文件</p>
<p>于基本包中创建一个 .java 文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bootstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span>      <span class="comment">//启动注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将会启动 com.bootstudy 包内的结构。</p>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>可以在基础包新建一个异常处理包，创建异常处理类，如：GetException.class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HelloSpring.java</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">2</span>/<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//GetException.java</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetException</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">runtimeException</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"发生异常错误"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后页面显示“发生异常错误”</p>
<h2 id="集成-thymeleaf"><a href="#集成-thymeleaf" class="headerlink" title="集成 thymeleaf"></a>集成 thymeleaf</h2><p>可以在pom.xml引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以此来引入thymeleaf前台框架</p>
<p>于HTML中&lt;html&gt;标签加入 xmlns:th=”<a href="http://www.thymeleaf.org&quot;，如：">http://www.thymeleaf.org&quot;，如：</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>于 templates 中创建好 html 文件后，可以创建启动类，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PageController.class</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>即可于页面中显示 index 中内容。</p>
<p><b>thymeleaf 展示数据</b></p>
<p>引入模板形参，添加 list 集合，对模板命名，然后在html中利用thymeleaf语法进行加入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PageController.class</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"AAAAAA"</span>);</span><br><span class="line">        list.add(<span class="string">"BBBBBB"</span>);</span><br><span class="line">        list.add(<span class="string">"CCCCCC"</span>);</span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"POEM"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"list"</span>,list);</span><br><span class="line">        model.addAttribute(<span class="string">"tel"</span>,<span class="string">"15591073186"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello index!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">th:value</span>=<span class="string">"$&#123;tel&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">"L:$&#123;list&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">"$&#123;L&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<img src='/img/springboot/2/1.png'>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>双向链表</title>
    <url>/2020/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B011%EF%BC%89/</url>
    <content><![CDATA[<p>双线链表其必要性在火车运货问题上可以见得。<br>当存在A-B-C-D-E-F-G-H-I-J-K-L这几个点时，火车在J点，要运货到I点。正常的运作是J-K-L-A-B-C-D-E-F-G-H-I。十分的麻烦，因此火车在尾部也加了一个火车头，从而达到J-I的效果，双向链表也是如此。</p>
<p>双向链表结点结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct DualNode</span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct DualNode *prior;     &#x2F;&#x2F;前驱结点</span><br><span class="line">    struct DualNode *next;      &#x2F;&#x2F;后继结点</span><br><span class="line">&#125;DualNode, *DuLinkList;</span><br></pre></td></tr></table></figure>
<img src="/img/数据结构（简述11）/图1.png">
从上图可以看到不同于一般链表结点的data+next形式而是prior+data+next形式。判断为空的条件即自身指向自身，x->prior = x->prior; x->next = x->next;   
以下为双向循环链表
<img src="/img/数据结构（简述11）/图2.png">

<h3 id="双向链表插入操作"><a href="#双向链表插入操作" class="headerlink" title="双向链表插入操作"></a>双向链表插入操作</h3><hr>
<img src="/img/数据结构（简述11）/图3.png">
以上为插入操作图示。
插入操作很看重顺序，图示上已经标出操作顺序，不可打乱！

<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s-&gt;next &#x3D; p;</span><br><span class="line">s-&gt;prior &#x3D; p-&gt;prior;</span><br><span class="line">p-&gt;prior-&gt;next &#x3D; s;</span><br><span class="line">p-&gt;prior &#x3D; s;</span><br></pre></td></tr></table></figure>
<p>图示插入操作原理为：</p>
<ul>
<li>令s结点的后继指向p，此时有两个结点的后继都指向p结点，但p结点的前驱只指向最前面的那个结点；</li>
<li>s的前驱指向p的前驱，即s的前驱指向了最前面的结点；</li>
<li>p的前驱的后继指向s，即最前面结点的后继指向s；</li>
<li>p的前驱指向s，完成连接，插入完成。</li>
</ul>
<h3 id="双线链表删除操作"><a href="#双线链表删除操作" class="headerlink" title="双线链表删除操作"></a>双线链表删除操作</h3><hr>
<img src="/img/数据结构（简述11）/图4.png">
以上为删除操作图示。
代码实现：
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">p-&gt;prior-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;prior &#x3D; p-&gt;prior;</span><br><span class="line">free(p);</span><br></pre></td></tr></table></figure>

<p>图示删除操作原理为：</p>
<ul>
<li>令p结点的前驱所指结点的的后继指向p结点后继所指结点，即p前面的结点后继指向p后面的结点；</li>
<li>p后继所指结点的前驱指向p的前驱所指的结点，即p的后面结点的前驱指向p前面的结点，此时两个结点已经与p没有任何关系了；</li>
<li>释放p结点，完成删除操作。</li>
</ul>
<h1 id="双向链表实践操作"><a href="#双向链表实践操作" class="headerlink" title="双向链表实践操作"></a>双向链表实践操作</h1><hr>
<p>题目：<br>要求实现用户输入一个数字，使得26个字幕的排列发生变化，如用户输入3，输出结果：<br>DEFGHIJKLMNOPQRSTUVWXYZABC<br>即实现输入数字n后，将前n个字母依照原先的排列顺序将其排到最后一个字母Z的后面。<br>当用户输入-3，输出结果：<br>XYZABCDEFGHIJKLMNOPQRSTUVW<br>即实现输入数字-n后，将后n个字母依照原先的排列顺序将其排到第一个字母A的前面。</p>
<p>完整代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define ERROR 0;</span><br><span class="line">#define OK 1;</span><br><span class="line"></span><br><span class="line">typedef char ElemType;</span><br><span class="line">typedef int Status;</span><br><span class="line"></span><br><span class="line">typedef struct DualNode</span><br><span class="line">&#123;</span><br><span class="line">	ElemType data;</span><br><span class="line">	struct DualNode* next;</span><br><span class="line">	struct DualNode* prior;</span><br><span class="line">&#125;DualNode, *DualLinkList;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化链表</span><br><span class="line">Status initDualList(DualLinkList* L)</span><br><span class="line">&#123;</span><br><span class="line">	DualNode* p, * q;	&#x2F;&#x2F;两个工具指针</span><br><span class="line"></span><br><span class="line">	*L &#x3D; (DualLinkList)malloc(sizeof(DualNode));</span><br><span class="line"></span><br><span class="line">	if (!(*L))</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	(*L)-&gt;next &#x3D; (*L)-&gt;prior &#x3D; NULL;	&#x2F;&#x2F;完成头结点初始化</span><br><span class="line"></span><br><span class="line">	p &#x3D; (*L);	&#x2F;&#x2F;先令p等于头结点</span><br><span class="line"></span><br><span class="line">	for (int i &#x3D; 0; i &lt; 26; i++)	&#x2F;&#x2F;因为要26个字母，因此循环26次</span><br><span class="line">	&#123;</span><br><span class="line">		q &#x3D; (DualNode*)malloc(sizeof(DualNode));</span><br><span class="line">		if (!q)</span><br><span class="line">		&#123;</span><br><span class="line">			return ERROR;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		q-&gt;data &#x3D; &#39;A&#39; + i;	&#x2F;&#x2F;让q的数据域存放字母，第一次为A+i即A+0等于A，第二次即A+1等于B</span><br><span class="line">		q-&gt;prior &#x3D; p;	&#x2F;&#x2F;令q的前驱指向p，第一次中即q的前驱指向头结点</span><br><span class="line">		q-&gt;next &#x3D; p-&gt;next;		&#x2F;&#x2F;令q的后继等于p的后继，即q的后继等于NULL</span><br><span class="line">		p-&gt;next &#x3D; q;	&#x2F;&#x2F;令p的后继指向q，在第一次中即，头结点的后继指向q</span><br><span class="line"></span><br><span class="line">		p &#x3D; q;</span><br><span class="line">		&#x2F;*</span><br><span class="line">		令p最后等于q</span><br><span class="line">		到了第二次即，q有了新的空间存放B，</span><br><span class="line">		q的前驱指向p即指向存放B的结点，</span><br><span class="line">		q的后继等于p的后继，扔等同于NULL，</span><br><span class="line">		p的后继指向q，即存放A的的结点的后继指向q，完成链接。</span><br><span class="line">		最后又令p等于q完成了第二次初始化</span><br><span class="line">		*&#x2F;</span><br><span class="line"></span><br><span class="line">		p-&gt;next &#x3D; (*L)-&gt;next;</span><br><span class="line">		(*L)-&gt;next-&gt;prior &#x3D; p;		&#x2F;&#x2F;将头结点排除在外，完成26个字母的封闭双向循环链表初始化</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;排序函数</span><br><span class="line">void Sort(DualLinkList* L, int i)</span><br><span class="line">&#123;</span><br><span class="line">	if (i &gt; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			(*L) &#x3D; (*L)-&gt;next;</span><br><span class="line">		&#125; while (--i);</span><br><span class="line">	&#125;</span><br><span class="line">	if (i &lt; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		do</span><br><span class="line">		&#123;</span><br><span class="line">			(*L) &#x3D; (*L)-&gt;next;</span><br><span class="line">		&#125; while (++i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	DualLinkList L;</span><br><span class="line">	int i, n;</span><br><span class="line"></span><br><span class="line">	initDualList(&amp;L);</span><br><span class="line"></span><br><span class="line">	printf(&quot;请输入数字：&quot;);</span><br><span class="line">	scanf_s(&quot;%d&quot;, &amp;n);</span><br><span class="line"></span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">	Sort(&amp;L, n);</span><br><span class="line"></span><br><span class="line">	for(i &#x3D; 0; i &lt; 26; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L &#x3D; L-&gt;next;</span><br><span class="line">		printf(&quot;%c&quot;, L-&gt;data);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（基础）</title>
    <url>/2020/05/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><p><b>数据结构</b>是相互之间存在一种或多种特定关系的数据元素的集合。</p>
<p>数据结构分<b>逻辑结构</b>和<b>存储结构</b>。</p>
<h2 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1. 逻辑结构"></a>1. 逻辑结构</h2><hr>
<p>逻辑结构可以看作是具体问题中抽象出的数学模型。<br>逻辑结构两大要素：<b>数据元素</b>、<b>关系</b>。<br>四大逻辑结构：集合结构（统一集合无对应关系）、线性结构（一对一）、树结构（一对多）、图结构（多对多）。<br><img src="/img/数据结构（基础）/图1.png"></p>
<h2 id="2-存储结构"><a href="#2-存储结构" class="headerlink" title="2. 存储结构"></a>2. 存储结构</h2><hr>
<p>数据对象在计算机中的存储表示称为数据的<b>存储结构</b>,也称为<b>物理结构</b>。</p>
<p>（1）顺序存储结构</p>
<p>利用元素在存储器中的相对位置表达数据元素间的逻辑关系，比如由学号排序的学生信息表。（根据学生学号进行位置一一分配，明确上一个才能分配下一个）</p>
<p>（2）链式存储结构</p>
<p>一个结点占用两个存储单元，一个存储结点信息，一个存储后继结点的首地址。（让指针指向下个结点的地址进行联系）</p>
<img src="/img/数据结构（基础）/图二.png">  

<h2 id="3-数据类型和抽象数据类型"><a href="#3-数据类型和抽象数据类型" class="headerlink" title="3. 数据类型和抽象数据类型"></a>3. 数据类型和抽象数据类型</h2><hr>
<p><b>1. 数据类型</b></p>
<p><b>数据类型</b>是一个值的集合和定义在这个值集上的一组操作的总称。</p>
<p><b>2. 抽象数据类型</b></p>
<p><b>抽象数据类型</b>一般指由用户定义的、表示应用问题的数学模型以及定义在这个模型上的一组操作的总称。<br>包括三部分：数据对象、数据对象上的关系集合、对数据对象的基本操作的集合。</p>
<p>其伪代码：</p>
<pre><code>ADT 抽象数据类型名{
  数据对象：&lt;数据对象的定义&gt;  
  数据关系：&lt;数据关系的定义&gt;  
  基本操作：&lt;基本操作的定义&gt;  
}ADT 抽象数据类型名</code></pre><p>基本操作定义格式：</p>
<pre><code>基本操作名（参数表）
  初始条件：&lt;初始条件描述&gt;
  操作结果：&lt;操作结果描述&gt;</code></pre><div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库期末碎片化知识点复习</title>
    <url>/2020/12/16/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%9F%E6%9C%AB%E7%A2%8E%E7%89%87%E5%8C%96%E7%9F%A5%E8%AF%86%E7%82%B9%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="第一章-数据库系统概述"><a href="#第一章-数据库系统概述" class="headerlink" title="第一章 数据库系统概述"></a>第一章 数据库系统概述</h2><p><b>数据</b> </p>
<ul>
<li>数据是描述现实世界中各种具体事物或抽象概念的符号标记，除了常用的数字数据外，文字、图形、图像、声音等信息也都是数据。</li>
</ul>
<p><b>数据库系统阶段特点</b></p>
<ul>
<li>数据结构化：数据结构化是数据库系统与文件系统的根本区别。</li>
<li>较高的数据共享性：数据共享是指允许<b>多个用户同时存取数据而互不影响</b>，该特征是数据库技术先进性的体现。</li>
<li>较高的数据独立性：所谓数据独立是指<b>数据与应用程序的彼此独立</b>，他们之间不存在相互依赖的关系。</li>
<li>数据由DBMS统一管理和控制：数据库的共享是<b>并发共享</b> ，即多个用户可以同时存取数据库中的数据，因此DBMS还必须提供数据的统一管理和控制功能。</li>
</ul>
<p><b>数据库系统的组成</b> </p>
<img src="/img/数据库期末复习/img1.jpg">

<hr>
<p>由底层到外层：<b>硬件 -&gt; 数据库 -&gt; OS -&gt; DBMS -&gt; 开发工具 -&gt; 数据库应用系统 -&gt; 人员</b></p>
<p><b>概念模型</b></p>
<ul>
<li>实体：实体是客观存在并且可以相互区分的事物，人、物、概念、状态都可以用实体表示，也可指事物之间的具体联系，如一名学生、一名老师。</li>
<li>属性：属性是<b>实体所具有的某些特性</b>。实体是由<b>属性组成的</b>，通过<b>属性</b>对<b>实体</b>进行<b>描述</b>。</li>
</ul>
<p><b>实体关系模型（E-R图）</b></p>
<img src="/img/数据库期末复习/img2.jpg">

<hr>
<p>由上图可以知道E-R图的画法：</p>
<ul>
<li><b>矩形：</b>表示实体。</li>
<li><b>椭圆形：</b>表示实体所含属性</li>
<li><b>菱形：</b>表示两实体之间的联系（<em>两实体之间必须有一联系作为介质</em> ）</li>
<li><b>N、M、1：</b>表示对应数量【图中<em>课程</em> 与<em>选修</em> 之间的N，以及<em>选修</em> 与<em>学生</em> 之间的M表示<b>N个课程由M个学生选修</b>或<b>M个学生选修N个课程</b>】</li>
</ul>
<p>一个复杂的E-R图（供学习理解）</p>
<img src="/img/数据库期末复习/img3.jpg">

<hr>
<p><b>关系模型</b></p>
<img src="/img/数据库期末复习/img4.jpg">

<hr>
<ul>
<li>关系：一个关系就是一张二维表，每个关系都有一个关系名。</li>
<li>元组：二维表中的行称为元组，每一行是一个元组，元组对应存储文件中的一个记录。</li>
<li>属性：二维表的列称为属性，每一列有一个属性名，属性值是属性的具体值，属性对应存储文件中的一个字段。</li>
<li>域：域是属性的取值范围。</li>
<li>关系模式：对关系的信息结构及语义限制的描述称为关系模式，用关系名和包含的属性名的集合表示。</li>
<li>关键字或码：在关系的属性中，能够用来唯一标识元组的属性（或属性组合）称为关键字或码。</li>
<li>候选关键字或候选码：如果一个关系中存在多个属性（或属性组合）都能用来唯一标识该关系中的元组，这些属性都成为该关系的候选关键字或候选码，候选码可以有多个。</li>
<li>主键或主码：在一个关系的若干候选关键字中，被指定作为关键字的候选关键字称为该关系的主键或主码。</li>
<li>主属性和非主属性：在一个关系中，包含在任何候选关键字中的各个属性都成为主属性，不包含在任一候选关键字中的属性称为非主属性。（图中<em>职工号、姓名</em> 为主属性，<em>性别、年龄</em> 为非主属性）</li>
<li>外键或外码：一个关系的某个属性（或属性组合）不是该关系的主键的一部分，却是另一个关系的主键，则称这样的属性为该关系的外键或外码。</li>
</ul>
<hr>
<h2 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h2><p><b>关系的性质</b></p>
<ul>
<li>列是同质的，<em>即每一列中的分量是同一类型的数据，来自同一个域</em> 。</li>
<li>在同一关系中，列的次序无关紧要，即<em>列的排序是不分先后的</em> 。</li>
<li>在同一关系中，不同的列的数据可以是同一种数据类型，但各属性的名称必须互不相同。</li>
<li>在同一关系中，任意两个元组都<b>不能完全相同</b>。</li>
<li>在同一关系中，元组的位置无关紧要，即排行不分先后，可以任意交换两行的位置。</li>
<li>关系中的每个属性必须是单值，即不可再分，这就要求关系的结构<b>不能嵌套</b>，这是最基本的条件。</li>
</ul>
<p><b>笛卡尔积</b></p>
<ul>
<li>笛卡尔积记作：A×B={(x,y)|x∈A∧y∈B}</li>
<li>设A,B为集合，用A中元素为第一元素，B中元素为第二元素构成有序对，所有这样的有序对组成的集合叫做A与B的笛卡尔积，记作AxB</li>
</ul>
<p>例如，A={a,b}, B={0,1,2}，则</p>
<p>A×B={(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}</p>
<p>B×A={(0, a), (0, b), (1, a), (1, b), (2, a), (2, b)}</p>
<p><b>专门的关系计算——选择</b></p>
<img src="/img/数据库期末复习/img5.png">

<p><b>用于查询满足某一条件的元组</b></p>
<p>如果要查询student表中的专业是数学系的学生。</p>
<p>即：<em>特殊符号（下标：专业）=’数学系’【上标（student）】</em></p>
<p>详细例子看书P29-4。</p>
<p><b>专门的关系计算——投影</b></p>
<img src="/img/数据库期末复习/img6.png">

<p><b>用于查询所有元组中满足某些条件的属性</b></p>
<p>如果要查询课程表中的课程名和课程号</p>
<p>即：<em>特殊符号（下标：课程名，课程号）（课程表）</em></p>
<p>详细例子看书P29-4</p>
<p><b>专门的关系运算——连接</b></p>
<img src="/img/数据库期末复习/img8.jpg">

<img src="/img/数据库期末复习/img7.jpg">

<p>连接是比较两个表的笛卡尔积，因此要对比较大小的值每一个都互相匹配一遍，将满足连接条件的所有元组单独成表。</p>
<p>其中自然连接可以看到原两表中R.B和S.B的值相同，即将该元组加入新表。目的为了筛选掉重复信息。</p>
<p>一般条件下，经常使用自然连接。</p>
<p>详细例子看书P29-4。</p>
<p><b>三大范式</b></p>
<ul>
<li><b>第一范式：</b><ul>
<li>每个属性值域不可再分即满足第一范式。例如工资下分基本工资、职务工资等便不满足第一范式</li>
</ul>
</li>
<li><b>第二范式：</b><ul>
<li>若主码为学号, 课程名称的组合。存在决定关系：(学号, 课程名称) → (姓名, 年龄, 成绩, 学分)。但又存在(课程名称) → (学分)<br>(学号) → (姓名, 年龄)。有多余匹配，造成数据冗余，因此不符合第二范式。</li>
</ul>
</li>
<li><b>第三范式：</b><ul>
<li>存在传递关系关键字段 → 非关键字段x → 非关键字段y。例如”A → B → C”，若存在A → C，则不满足第三范式。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="第三章-数据库设计"><a href="#第三章-数据库设计" class="headerlink" title="第三章 数据库设计"></a>第三章 数据库设计</h2><p><b>将E-R图转化为关系数据模型</b></p>
<ul>
<li><p>实体的转换</p>
<p>  一个实体转化为一个关系模式，实体属性即关系模式的属性，实体主码即关系模式主码。</p>
</li>
<li><p>联系的转换</p>
<p>  在E-R图中，菱形表示实体间的联系，用无向边分别把菱形与有关实体连接起来，并在无向边旁注明了联系的类型。而在关系数据模型中，实体和联系都用关系来表示。</p>
</li>
</ul>
<p>举例：</p>
<ul>
<li><p>1:1联系的转换</p>
<img src="/img/数据库期末复习/img9.jpg">

<p>  如图内，有两种转换方法，一种是独立型，即将联系、实体分别转换成关系模式，第二种是整合型，将联系和实体整合转换成关系模式。</p>
<p>  方法一：</p>
<p>  转换成以下关系模式：</p>
<p>  班级（<u>班号</u>，系别，班主任，入学时间）</p>
<p>  班长（<u>学号</u>，姓名，性别，年龄）</p>
<p>  班级-班长（<u>班号，学号</u>，任期）</p>
<p>  &nbsp;</p>
<p>  方法二：（<em>因为任期是班长的任期而不是班级的任期，因此将任期整合在班长中</em> ）</p>
<p>  班级（<u>班号</u>，系别，班主任，入学时间）</p>
<p>  班长（<u>学号</u>，姓名，性别，年龄，班号，<b>任期</b>）</p>
<p>  &nbsp;</p>
</li>
<li><p>1:N联系的转换</p>
<img src="/img/数据库期末复习/img10.jpg">

<p>  方法一：（<em>关系的主码为N端实体的主码</em> ）</p>
<p>  转换成以下关系模式：</p>
<p>  系（<u>系号</u>，系名，系主任）</p>
<p>  教师（<u>教师号</u>，教师名，年龄，职称）</p>
<p>  工作（<u>教师号</u>，系号，入系日期）</p>
<p>  &nbsp;</p>
<p>  方法二：（<em>联系合并到N端实体</em> ）</p>
<p>  转换成以下关系模式：</p>
<p>  系（<u>系号</u>，系名，系主任）</p>
<p>  教师（<u>教师号</u>，教师名，年龄，职称，系号，<b>入系日期</b>）</p>
<p>  &nbsp;</p>
</li>
<li><p>M:N联系的转换</p>
<img src="/img/数据库期末复习/img11.jpg">

<p>  方法一：</p>
<p>  职工（<u>职工号</u>，姓名，性别，年龄，职务）</p>
<p>  项目（<u>项目号</u>，项目名，起始日期，鉴定日期）</p>
<p>  参加（<u>职工号，项目号</u>，薪酬）</p>
</li>
</ul>
<hr>
<h2 id="第四章-SQL-Server-2008基础"><a href="#第四章-SQL-Server-2008基础" class="headerlink" title="第四章 SQL Server 2008基础"></a>第四章 SQL Server 2008基础</h2><p><b>T-SQL语言的分类</b></p>
<ul>
<li><p>数据定义语言（DDL）</p>
<table>
<thead>
<tr>
<th align="center">语句</th>
<th align="center">功能</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CREATE</td>
<td align="center">创建数据库或数据库对象</td>
<td align="center">不同数据库对象的创建，其CREATE语句的语法形式不同</td>
</tr>
<tr>
<td align="center">ALTER</td>
<td align="center">修改数据库或数据库对象</td>
<td align="center">不同数据库对象的修改，其ALTER语句的语法形式不同</td>
</tr>
<tr>
<td align="center">DROP</td>
<td align="center">删除数据库或数据库对象</td>
<td align="center">不同数据库对象的删除，其DROP语句的语法形式不同</td>
</tr>
</tbody></table>
</li>
<li><p>数据操作语言（DML）</p>
<table>
<thead>
<tr>
<th align="center">语句</th>
<th align="center">功能</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">INSERT</td>
<td align="center">插入数据</td>
<td align="center">插入一行或多行数据到表或视图末尾</td>
</tr>
<tr>
<td align="center">UPDATE</td>
<td align="center">修改数据</td>
<td align="center">既可修改表或视图的一行数据，也可修改一组或全部数据</td>
</tr>
<tr>
<td align="center">DELETE</td>
<td align="center">删除数据</td>
<td align="center">可根据条件删除表或视图中指定的数据行或全部数据行</td>
</tr>
</tbody></table>
</li>
<li><p>数据控制语言（DCL）</p>
<table>
<thead>
<tr>
<th align="center">语句</th>
<th align="center">功能</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">GRANT</td>
<td align="center">授予权限</td>
<td align="center">可把语句许可成对象许可的权限授予其他用户或角色</td>
</tr>
<tr>
<td align="center">REVOKE</td>
<td align="center">撤销权限</td>
<td align="center">与GRANT的功能相反，但不影响该用户或角色从其他角色中作为成员继承许可权限</td>
</tr>
<tr>
<td align="center">DENY</td>
<td align="center">禁止权限</td>
<td align="center">功能与REVOKE相似，不同之处是除收回权限外，还禁止从其他角色继承许可权限</td>
</tr>
</tbody></table>
</li>
<li><p>数据查询语言（DQL）</p>
<table>
<thead>
<tr>
<th align="center">语句</th>
<th align="center">功能</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">SELECT</td>
<td align="center">检索数据</td>
<td align="center">从表或视图中检索需要的数据，是使用最频繁的SQL语句之一</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h2 id="第五章-数据库的概念和操作"><a href="#第五章-数据库的概念和操作" class="headerlink" title="第五章 数据库的概念和操作"></a>第五章 数据库的概念和操作</h2><p><b>SQL Server 2008中数据库文件的类型</b></p>
<ul>
<li>主数据文件：主数据文件是数据库的起点，指向是数据库中的其他文件。每个数据库都<b>有且只有一个主数据文件</b>。文件扩展名.mdf</li>
<li>辅助数据文件：除<b>主数据</b>文件以外的<b>其他所有数据文件</b>都是<b>辅助数据文件</b>。某些数据库可能不含有任何辅助数据文件，而有些数据库有多个辅助数据文件。文件扩展名.ndf</li>
<li>事务日志文件：日志文件包括了用于<b>恢复数据库的所有日志信息</b>。每个数据库必须<b>至少有一个</b>日志文件，也可以有多个。SQL Server 2008中采用事务日志提前写入的方式，即对数据库的修改先写进日志，再写入数据库。文件扩展名.ldf</li>
</ul>
<p>&nbsp;</p>
<p><b>逻辑数据库</b></p>
<ul>
<li><p>master数据库</p>
<p>  master数据库是SQL Server 2008中的主数据库，它是最重要的<b>系统数据库</b>，记录系统中的所有系统级信息。对其他数据库实施控制和管理功能。</p>
</li>
<li><p>model数据库</p>
<p>  model数据库为用户新创建的数据库提供模板，它包含用户数据库中应该包含的所有系统表结构。用户创建数据库时，系统会自动把model数据库中的内容复制到新建的用户数据库中。</p>
</li>
<li><p>msdb数据库</p>
<p>  msdb数据库记录备份及还原的历史信息、维护计划信息、作业信息、异常信息以及操作者信息等。它可以为SQL Server代理程序提供要调度的警报和作业等信息。</p>
</li>
<li><p>tempdb数据库</p>
<p>  tempdb数据库是<b>临时的</b>，每次打开SQL Server它都将被重新创建。tempdb数据库用于存放临时表和临时数据库对象的存储过程，它是一个全局资源。</p>
</li>
</ul>
<p>&nbsp;</p>
<p><b>创建数据库</b></p>
<p>基本语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE STUDENT1</span><br></pre></td></tr></table></figure>

<p>创建数据库名为 <em>STUDENT2</em> 的数据库，包含一个主数据文件和一个事务日志文件。主数据文件逻辑名为 <em>STUDENT2_DATA</em> ，操作系统文件名称为 <em>STUDENT2_DATA.MDF</em> ，初始容量大小为5MB，最大容量为20MB，文件增长量为20%。事务日志文件的逻辑名为 <em>STUDENT2_LOG</em> ，物理文件名为 <em>STUDENT2_LOG.LDF</em> ，初始容量为5MB，最大容量为10MB，文件增长量为2MB。数据文件和事务日志文件都放在F盘根目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE STUDENT2</span><br><span class="line">ON PRIMARY</span><br><span class="line">(NAME &#x3D; &#39;STUDENT2_DATA&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENT2_DATA.MDF&#39;,</span><br><span class="line">SIZE &#x3D; 5MB,</span><br><span class="line">MAXSIZE &#x3D; 20MB,</span><br><span class="line">FILEGROWTH &#x3D; 20% )</span><br><span class="line">LOG ON</span><br><span class="line">(NAME &#x3D; &#39;STUDENT2_LOG&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENT2_LOG.LDF&#39;,</span><br><span class="line">SIZE &#x3D; 5MB,</span><br><span class="line">MAXSIZE &#x3D; 10MB,</span><br><span class="line">FILEGROWTH &#x3D; 2MB )</span><br></pre></td></tr></table></figure>

<p>创建数据库名为 <em>STUDENTS</em> 的数据库，包含多个数据文件和多个事务日志文件。数据文件逻辑名为 <em>STUDENT1</em> 和 <em>STUDENT2</em> ，操作系统文件名称为 <em>STUDENT1.MDF</em> 和 <em>STUDENT2.MDF</em> ，初始容量大小为5MB和10MB，最大容量为无限大和100MB，文件增长量为10%和1MB，主数据文件 <em>STUDENT1</em> 属于 <em>PRIMARY</em> 文件组，辅助数据文件 <em>STUDENT2</em> ，属于新建文件分组 <em>FG1</em> 。事务日志文件的逻辑名为 <em>STUDENTLOG1</em> 和 <em>STUDENTLOG2</em> ，物理文件名为 <em>STUDENTLOG1.LDF</em> 和 <em>STUDENTLOG2.LDF</em> ，初始容量都为5MB，最大容量为50MB，文件增长量为1MB。数据文件和事务日志文件都放在F盘根目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE STUDENTS</span><br><span class="line">ON PRIMARY</span><br><span class="line">(NAME &#x3D; &#39;STUDENT1&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENT1.MDF&#39;,</span><br><span class="line">SIZE &#x3D; 5MB,</span><br><span class="line">MAXSIZE &#x3D; unlimited,</span><br><span class="line">FILEGROWTH &#x3D; 10% )，</span><br><span class="line">FILEGROUP FG1</span><br><span class="line">(NAME &#x3D; &#39;STUDENT2&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENT2.MDF&#39;,</span><br><span class="line">SIZE &#x3D; 10MB,</span><br><span class="line">MAXSIZE &#x3D; 100MB,</span><br><span class="line">FILEGROWTH &#x3D; 1MB )</span><br><span class="line">LOG ON</span><br><span class="line">(NAME &#x3D; &#39;STUDENTLOG1&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENTLOG1.LDF&#39;,</span><br><span class="line">SIZE &#x3D; 5MB,</span><br><span class="line">MAXSIZE &#x3D; 50MB,</span><br><span class="line">FILEGROWTH &#x3D; 1MB ),</span><br><span class="line">(NAME &#x3D; &#39;STUDENTLOG2&#39;,</span><br><span class="line">FILENAME &#x3D; &#39;F:\DATA\STUDENTLOG2.LDF&#39;,</span><br><span class="line">SIZE &#x3D; 5MB,</span><br><span class="line">MAXSIZE &#x3D; 50MB,</span><br><span class="line">FILEGROWTH &#x3D; 1MB )</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第六章-表的操作"><a href="#第六章-表的操作" class="headerlink" title="第六章 表的操作"></a>第六章 表的操作</h2><p><b>创建表</b></p>
<p>在数据库 <em>teaching</em> 中创建 <em>course</em> 表，该表结构如图：<br><img src="/img/数据库期末复习/img12.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE TABLE course</span><br><span class="line">(cno        char(4) PRIMARY KEY,</span><br><span class="line">cname       nvarchar(20) NOT NULL,</span><br><span class="line">classhour   tinyint,</span><br><span class="line">credit      tinyint</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>创建和删除FOREIGN KEY约束</b></p>
<p>在数据库 <em>STUDENT1</em> 中创建一个 “<em>成绩</em> ” 表，包括 “<em>学号</em> ” 、 “<em>课程号</em> ”、 “<em>成绩</em> ” 字段，并为 “<em>成绩</em> ” 表创建<b>外键</b>约束，该约束把 “<em>成绩</em> ” 表中的 “<em>学号</em> ” 字段和 “<em>学生</em> ” 表中的 “<em>学号</em> ” 字段关联起来。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">CREATE TABLE 成绩</span><br><span class="line">( 学号      char(6)  CONSTRAINT f_st_pk  FOREIGN KEY REFERENCES 学生(学号),</span><br><span class="line">  课程号    char(4),</span><br><span class="line">  成绩      int )</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>表中插入数据</b></p>
<p>在 <em>teaching</em> 数据库的 <em>student</em> 表中插入一行数据，即 “<em>sno，sname，ssex，grade</em> ” 值为 “ ‘1600215’，‘刘玲玲’，‘女’，‘16级’ ”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">INSERT INTO student(sno,sname,ssex,grade)</span><br><span class="line">VALUE(&#39;1600215&#39;,&#39;刘玲玲&#39;,&#39;女&#39;,&#39;16级&#39;)</span><br></pre></td></tr></table></figure>

<p>在 <em>STUDENT1</em> 数据库的 “<em>学生</em> ” 表中插入3行数据，即“ ‘160102’，‘王小玲’，‘130212199907190926’，‘女’ ” 、 “ ‘160103’，‘王伟’，‘130212199809100871’，‘男’ ” 、 “ ‘160104’，‘张大力’，‘130212199702150812’，‘男’ ”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">INSERT INTO 学生 VALUE(&#39;160102&#39;,&#39;王小玲&#39;,&#39;130212199907190926&#39;,&#39;女&#39;),</span><br><span class="line">                      (&#39;160103&#39;,&#39;王伟&#39;,&#39;130212199809100871&#39;,&#39;男&#39;),</span><br><span class="line">                      (&#39;160104&#39;,&#39;张大力&#39;,&#39;130212199702150812&#39;,&#39;男&#39;)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>表中修改数据</b></p>
<p>将 <em>STUDENT1</em> 数据库的 “<em>学生</em> ” 表中的 “<em>性别</em> ” 字段的值设为 “<em>男</em> ”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">UPDATE 学生 SET 性别 &#x3D; &#39;男&#39;</span><br></pre></td></tr></table></figure>

<p>在 <em>STUDENT1</em> 数据库的 “<em>学生</em> ” 表中添加 “<em>备注</em> ” 字段 <em>navchar(20)</em> ， “<em>备注</em> ” 字段的信息为 “<em>已毕业</em> ”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">ALTER TABLE 学生</span><br><span class="line">ADD 备注 navchar(20)</span><br><span class="line">UPDATE 学生 SET 备注 &#x3D; &#39;已毕业&#39;</span><br></pre></td></tr></table></figure>

<p>在 “<em>学生</em> ” 表中将学号为 “<em>160101</em> ” 的学生的姓名改为 “<em>王武</em> ”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">UPDATE 学生 SET 姓名 &#x3D; &#39;王武&#39; WHERE 学号 &#x3D; &#39;160101&#39;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>表中删除数据</b></p>
<p>删除 “<em>学生</em> ” 表中 “<em>160101</em> ” 号学生的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE STUDENT1</span><br><span class="line">GO</span><br><span class="line">DELETE 学生 WHERE 学号 &#x3D; &#39;160101&#39;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第七章-数据库查询"><a href="#第七章-数据库查询" class="headerlink" title="第七章 数据库查询"></a>第七章 数据库查询</h2><p><b>SELECT查询语法</b></p>
<ul>
<li>INTO XXX：指定使用结果集创建新表。</li>
<li>FROM {XXX}：指定要从中检索数据的表名或视图名。</li>
<li>WHERE {XXX}：定义了源表中的行要满足SELECT语句的要求所必须达到的条件。</li>
<li>GROUP BY{XXX}：根据列中的值将结果集分成组。</li>
</ul>
<p>&nbsp;</p>
<p><b>投影查询</b></p>
<p>查询 <em>teaching</em> 数据库中学生的姓名、性别和专业。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sname,ssex,specialty FROM student</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 <em>course</em> 表的所有记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM course        &#x2F;&#x2F; * 表示所有列</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 <em>student</em> 表的专业名称，滤掉重复行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT DISTINCT specialty FROM student</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 <em>course</em> 表的前三行信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT top 3 * FROM course</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 <em>course</em> 表的前50%行的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT top 50 percent * FROM course</span><br></pre></td></tr></table></figure>

<p>查询 <em>student</em> 表中所有学生的学号、姓名，将结果中各列的标题分别指定为汉字 “学号” 和 “姓名” 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno AS 学号, sname AS 姓名 FROM student</span><br></pre></td></tr></table></figure>

<p>查询 <em>sc</em> 表，按150分制计算成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno,score150 &#x3D; score*1.50 FROM sc</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>选择查询</b></p>
<p>常用查询条件：</p>
<table>
<thead>
<tr>
<th align="center">查 询 条 件</th>
<th align="center">谓 词</th>
</tr>
</thead>
<tbody><tr>
<td align="center">比较运算符</td>
<td align="center">=、&gt;、&lt;、&gt;=、&lt;=、!=、&lt;&gt;、!&gt;、!&lt;</td>
</tr>
<tr>
<td align="center">确定范围</td>
<td align="center">BETWEEN AND、NOT BETWEEN AND</td>
</tr>
<tr>
<td align="center">确定集合</td>
<td align="center">IN、NOT IN</td>
</tr>
<tr>
<td align="center">字符匹配</td>
<td align="center">LIKE、NOT LIKE</td>
</tr>
<tr>
<td align="center">空值</td>
<td align="center">IS NULL、IS NOT NULL</td>
</tr>
<tr>
<td align="center">多重条件</td>
<td align="center">AND、OR、NOT</td>
</tr>
</tbody></table>
<p>&nbsp;</p>
<p>查询 <em>teaching</em> 数据库的 <em>sc</em> 表中成绩大于等于60的学生的学号、课程号和成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM sc WHERE score &gt;&#x3D; 60</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 “计算机” 专业的 “男” 生的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM student WHERE specialty &#x3D; &#39;计算机&#39; AND ssex &#x3D; &#39;男&#39;</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 “计算机” 专业学生或所有专业 “男” 生的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM student WHERE specialty &#x3D; &#39;计算机&#39; OR ssex &#x3D; &#39;男&#39;</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中成绩在80到90之间的学生的学号、课程号和成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno,score FROM sc WHERE score BETWEEN 80 AND 90</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中成绩不在80到90之间的学生的学号、课程号和成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno,score FROM sc WHERE score NOT BETWEEN 80 AND 90</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中 “<em>计算机</em> ” 和 “<em>通信</em> ” 专业的学生的姓名、学号和专业。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sname,sno,specialty FROM student WHERE specialty IN(&#39;计算机&#39;,&#39;通信&#39;)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>常用通配符</b></p>
<table>
<thead>
<tr>
<th align="center">通 配 符</th>
<th align="center">含 义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">%</td>
<td align="center">包含零个或多个字符的任意字符串</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">任何单个字符</td>
</tr>
<tr>
<td align="center">[ ]</td>
<td align="center">代表指定范围内的单个字符，在[ ]中可以是单个字符（如[acef]），也可以是字符范围（如[a-f]）</td>
</tr>
<tr>
<td align="center">[^]</td>
<td align="center">代表不在指定范围内的单个字符，在[^]中可以是单个字符（如[^acef]），也可以是字符范围（如[^a-f]）</td>
</tr>
</tbody></table>
<p>&nbsp;</p>
<p>通配符示例：</p>
<ul>
<li>LIKE ‘AB%’：返回以 “AB” 开始的任意字符串。</li>
<li>LIKE ‘Ab%’：返回以 “Ab” 开始的任意字符串。</li>
<li>LIKE ‘%abc’：返回以 “abc” 结束的任意字符串。</li>
<li>LIKE ‘%abc%’：返回包含 “abc” 的任意字符串。</li>
<li>LIKE ‘_ab’：返回以 “ab” 结束的 3 个字符的字符串。</li>
<li>LIKE ‘[ACK]%’：返回以 “A” 、 “C” 或 “K” 开始的任意字符串。</li>
<li>LIKE ‘[A-T]ing’：返回 4 个字符的字符串，结尾是 “ing” ，首字符的范围是从 A 到 T 。</li>
<li>LIKE ‘M[^c]%’：返回以 “M” 开始且第二个字符不是 “c” 的任意长度的字符串。</li>
</ul>
<p>&nbsp;</p>
<p>查询 <em>teaching</em> 数据库中所有姓 “张” 的学生的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM student WHERE sname LIKE &#39;张%&#39;</span><br></pre></td></tr></table></figure>

<p>查询 <em>teaching</em> 数据库中所有 “成绩” 为空值的学生的学号、课程号和成绩</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno,score FROM sc WHERE score IS NULL</span><br></pre></td></tr></table></figure>

<p>从 <em>teaching</em> 数据库的 <em>student</em> 表中查询所有 “<em>计算机</em> ” 和 “<em>通信</em> ” 专业的 “<em>女</em> ” 生的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM student WHERE ssex &#x3D; &#39;女&#39; AND (specialty &#x3D; &#39;计算机&#39; OR specialty &#x3D; &#39;通信&#39;)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>常用聚合函数</b></p>
<table>
<thead>
<tr>
<th align="center">函 数 名</th>
<th align="center">功 能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">sum(列名)</td>
<td align="center">对一个数字列求和</td>
</tr>
<tr>
<td align="center">avg(列名)</td>
<td align="center">对一个数字列计算平均值</td>
</tr>
<tr>
<td align="center">min(列名)</td>
<td align="center">返回一个数字、字符串或日期的最小值</td>
</tr>
<tr>
<td align="center">max(列名)</td>
<td align="center">返回一个数字、字符串或日期的最大值</td>
</tr>
<tr>
<td align="center">count(列名)</td>
<td align="center">返回一个列的数据项数</td>
</tr>
<tr>
<td align="center">count(*)</td>
<td align="center">返回找到的行数</td>
</tr>
</tbody></table>
<p>&nbsp;</p>
<p>在 <em>teaching</em> 数据库中查询 <em>sc</em> 表中成绩的平均值，平均值显示列标题为“平均成绩”。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT avg(score) AS 平均成绩 FROM sc</span><br></pre></td></tr></table></figure>

<p>从 <em>teaching</em> 数据库的 <em>student</em> 表中查询专业的种类（相同的按一种计算）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT count (DISTINCT specialty) AS 专业种类数 FROM student</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询 1302001 号学生的平均成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT avg(score) AS 平均成绩 FROM student WHERE sno &#x3D; &#39;1302001&#39;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>分组查询</b></p>
<p><font color='red'><em>注：分组查询用于查询后返回的结果不仅有聚合函数列，同时也有一般的列做分类的时候，以一般列为主体进行分组（如果有两个一般列，则两个一般列都是主体），当最后还要显示每列的总计结果时，加 WITH CUBE</em>。</font></p>
<p>查询 <em>teaching</em> 数据库中男生和女生的人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT ssex,count(ssex) AS 人数 FROM student GROUP BY ssex</span><br></pre></td></tr></table></figure>

<p>在 <em>sc</em> 表中查询选修了两门及以上课程的学生的学号和选修课程数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,count(cno) FROM sc GROUP BY sno HAVING count(cno) &gt;&#x3D; 2</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询 <em>sc</em> 表，求被选修的各门课程的平均成绩和选修该课程的人数，以及所有课程的总平均成绩和总选修人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT cno,AVG(score) AS 平均成绩,COUNT(sno) AS 选修人数 FROM sc GROUP BY cno WITH CUBE</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询 <em>student</em> 表，统计各专业男生、女生的人数，每个专业的学生人数和男生总人数、女生总人数以及所有学生人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT specialty,ssex,count(*) AS 人数 FROM student GROUP BY specialty,ssex WITH CUBE</span><br></pre></td></tr></table></figure>
<p><font color='red'>*注：使用 WITH CUBE 和 WITH ROLLUP 时，不支持区分性聚合函数，如 AVG(DISTINCT 列名) 等。</font></p>
<p><font color='red'>*注：CUBE 会依据分组将每个类别都进行总计，而 ROLLUP 仅依据分组时第一顺序的类别进行总计。</font></p>
<p>统计 <em>teaching</em> 数据库中每个专业的男、女生人数，每个专业的总人数和所有学生人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT specialty,ssex,count(*) AS 人数 FROM student GROUP BY specialty,ssex WITH ROLLUP</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询 “<em>计算机</em> ” 专业的学生的学号、姓名和性别，并统计学生总人数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,sname,ssex FROM student WHERE specialty &#x3D; &#39;计算机&#39; COMPUTE COUNT(sno)</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询所有学生的选课信息，并计算每个学生的平均成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno,score FROM sc ORDER BY sno COMPUTE avg(score) BY sno</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>无关子查询</b></p>
<p>在 <em>teaching</em> 数据库中查询与 “<em>沈艳</em> ” 在同一个专业学习的学生的学号、姓名和专业。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,sname,specialty FROM student WHERE specialty &#x3D; ( SELECT specialty FROM student WHERE sname &#x3D; &#39;沈艳&#39;)</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中查询 C001 号课的考试成绩比 “<em>郑丽</em> ” 高的学生的学号和姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT student.sno,sname FROM student,sc WHERE student.sno &#x3D; sc.sno AND cno &#x3D; &#39;C001&#39; AND score &gt; ( SELECT score FROM sc WHERE cno &#x3D; &#39;C001&#39; AND sno &#x3D; (SELECT sno FROM student WHERE sname &#x3D; &#39;郑丽&#39;))</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第八章-视图和索引"><a href="#第八章-视图和索引" class="headerlink" title="第八章 视图和索引"></a>第八章 视图和索引</h2><p>&nbsp;</p>
<p><b>创建视图</b></p>
<p>创建 <em>s_c_sc</em> 视图，包括 “<em>计算机</em> ” 专业的学生的学号、姓名，以及他们选修的课程号、课程名和成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE VIEW s_c_sc</span><br><span class="line">AS</span><br><span class="line">    SELECT student.sno,sname,course.cno,cname,score FROM student,sc,course WHERE student.sno &#x3D; sc.sno AND course.cno &#x3D; sc.cno AND specialty &#x3D; &#39;计算机&#39;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>创建 <em>inve_count</em> 库存统计视图，求每种商品的总库存量，要求包括商品编号和商品名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE inventory</span><br><span class="line">GO</span><br><span class="line">CREATE VIEW inve_count</span><br><span class="line">AS</span><br><span class="line">    SELECT goods.gno,gname,SUM(number) AS snumber FROM goods,invent WHERE goods.gno &#x3D; invent.gno GROUP BY goods.gno,gname</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>使用视图</b></p>
<p>在查询窗口中查询 <em>s_c_sc</em> 视图，统计 “<em>C++语言</em> ” 课程的总分和平均分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT SUM(score) AS sumscore,AVG(score) AS avgscore FROM s_c_sc WHERE cname &#x3D; &#39;C++语言&#39;</span><br></pre></td></tr></table></figure>

<p>查询 <em>inve_count</em> 视图中 “<em>冰箱</em> ” 的商品统计信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT * FROM inve_count WHERE gname &#x3D; &#39;冰箱&#39;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>索引的类型</b></p>
<ul>
<li><p><b>聚集索引：</b></p>
<p>  聚集索引会对表和视图<b>进行物理排序</b>，所以这种索引对查询非常有效，在表和视图中<b>只能有一个聚集索引</b>。当建立主键约束时，表中没有聚集索引，则SQL Server会用主键列作为聚集索引建。用户可以在表的任何列或列额组合上建立索引，在实际应用中一般为定义成主键约束的列建立聚集索引。</p>
<p>  字典中文字按照拼音的排序就是一种聚集索引。</p>
</li>
<li><p>非聚集索引</p>
<p>  非聚集索引对表和视图<b>不会进行物理排序</b>。如果表中不存在聚集索引，则表是未排序的。在表或视图中<b>最多可以建立250个非聚集索引，或者249个非聚集索引和1个聚集索引</b>。 </p>
<p>  字典中按偏旁部首查找，两个同偏旁的字却在字典中并不连续，这就是一种非聚集索引。</p>
<p>  聚集索引和非聚集索引都可以是唯一索引。因此，只要在列中的数据是唯一的，就可以在同一个表上创建一个唯一的聚集索引。如果要必须实施数据的唯一性，则应该添加主键约束，而不是单靠唯一索引。</p>
</li>
</ul>
<p>&nbsp;</p>
<p><b>创建索引</b></p>
<p>根据 <em>teaching</em> 数据库中 <em>student</em> 表的姓名列的升序创建一个名为 <em>index_sname</em> 的普通索引。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE INDEX index_sname ON student(sname)</span><br></pre></td></tr></table></figure>

<p>根据 <em>inventory</em> 数据库中 <em>goods</em> 表的商品名称、生产商创建一个名为 <em>goods_producer</em> 的唯一性复合索引，其中商品名称为升序、生产商为降序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE inventory</span><br><span class="line">GO</span><br><span class="line">CREATE UNIQUE INDEX goods_producer ON goods(gname ASC,producer DESC)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;ASC 代表升序，DESC 代表降序</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第九章-T-SQL-编程"><a href="#第九章-T-SQL-编程" class="headerlink" title="第九章 T-SQL 编程"></a>第九章 T-SQL 编程</h2><p><b>标识符</b></p>
<p>常规标识符：</p>
<ul>
<li>必须以汉字、字母、下划线、@或#开头，不能以数字开头。</li>
<li>不能是 SQL Server 保留字。</li>
<li>最长不超过128个字符。</li>
</ul>
<p>分隔标识符：</p>
<p>分隔标识符括在[ ]或“ ”中。</p>
<p>下列情况需要使用分隔标识符：</p>
<ul>
<li>使用保留关键字作为对象名或对象名的一部分。</li>
<li>标识符的命名不符合常规标识符命名规则。</li>
</ul>
<p>&nbsp;</p>
<p><b>变量</b></p>
<p>全局变量：</p>
<p>全局变量由系统提供且预先声明，通过在名称前加两个“@”符号区别于局部变量。用户只能使用全局变量，无法修改，全局变量作用于整个SQL Server系统，可以随时调用。</p>
<p>局部变量：</p>
<p>T-SQL语言的变量在定义和引用时要在名称前加“@”，且必须用DECLARE命令定以后才可以使用。</p>
<p>计算表达式的值，并将结果赋值给变量 <em>@ExpResult</em> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @ExpResult numeric</span><br><span class="line">SET @ExpResult &#x3D; 67 % 31</span><br><span class="line">SELECT @ExpResult AS &#39;表达式计算结果&#39;</span><br></pre></td></tr></table></figure>

<p>定义变量 <em>@a1</em> <em>@a2</em> ，给变量赋值，然后求两个变量与、或、异或的结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @a1 int,@a2 int</span><br><span class="line">SET @a1 &#x3D; 3</span><br><span class="line">SET @a2 &#x3D; 8</span><br><span class="line">SELECT @a1 &amp; @a2 AS 与,@a1 | @a2 AS 或,@a1 ^ @a2 AS 异或</span><br></pre></td></tr></table></figure>

<p>使用比较运算符计算表达式的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @Exp1 int,@Exp2 int</span><br><span class="line">SET @Exp1 &#x3D; 30</span><br><span class="line">SET @Exp2 &#x3D; 50</span><br><span class="line">IF @Exp1 &lt; @Exp2</span><br><span class="line">SELECT @Exp1 AS 小数据</span><br></pre></td></tr></table></figure>

<p>使用字符串连接运算符计算表达式的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @ExpResult char(60)</span><br><span class="line">SELECT @ExpResult &#x3D; &#39;河北省石家庄市&#39; + &#39;河北师范大学&#39; + &#39;网络工程&#39;</span><br><span class="line">SELECT @ExpResult AS &#39;字符串的连接结果&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;结果即 “河北省石家庄市河北师范大学网络工程”</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>流程控制语句</b></p>
<ul>
<li><p>SET 语句用于赋值变量</p>
</li>
<li><p>BEGIN…END 语句用于创造语句块，例如</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line">    *******************</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li>
<li><p>IF…ELSE 语句用于条件判断，例如</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IF (*******)***</span><br><span class="line">    *********</span><br><span class="line">ELSE</span><br><span class="line">    ****************</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果 <em>C001</em> 号课的平均成绩高于 80 分，则显示 “平均成绩还不错” ，否则显示 “平均成绩一般” 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">IF (SELECT avg(score) FROM sc WHERE cno &#x3D; &#39;C001&#39;) &gt; 80</span><br><span class="line">    PRINT &#39;平均成绩还不错&#39;</span><br><span class="line">ELSE</span><br><span class="line">    PRINT &#39;平均成绩一般&#39;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>CASE 语句</b></p>
<ul>
<li>简单 CASE 格式：将某个表达式与一组简单表达式进行比较，以确定结果。</li>
<li>搜索 CASE 格式：计算一组布尔表达式，以确定结果。</li>
</ul>
<p>简单 CASE 格式查询所有学生的专业情况，包括学号、姓名和专业的英文名。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,sname</span><br><span class="line">    CASE specialty</span><br><span class="line">    WHEN &#39;计算机&#39; THEN &#39;Computer&#39;</span><br><span class="line">    WHEN &#39;电子&#39; THEN &#39;Electronic&#39;</span><br><span class="line">    WHEN &#39;网络&#39; THEN &#39;Network&#39;</span><br><span class="line">    WHEN &#39;通信&#39; THEN &#39;Communication&#39;</span><br><span class="line">    END AS specialty</span><br><span class="line">FROM student</span><br></pre></td></tr></table></figure>

<p>搜索 CASE 格式查询所有学生的考试等级，包括学号、课程号和成绩级别（a、b、c、d、e）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">SELECT sno,cno</span><br><span class="line">    CASE</span><br><span class="line">    WHEN score &gt;&#x3D; 90 then &#39;a&#39;</span><br><span class="line">    WHEN score &gt;&#x3D; 80 then &#39;b&#39;</span><br><span class="line">    WHEN score &gt;&#x3D; 70 then &#39;c&#39;</span><br><span class="line">    WHEN score &gt;&#x3D; 60 then &#39;d&#39;</span><br><span class="line">    WHEN score &lt; 60 then &#39;e&#39;</span><br><span class="line">    END AS score_level</span><br><span class="line">FROM sc</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>WHILE 语句</b></p>
<p>循环语句，以布尔表达式设置条件。</p>
<p>创建一个 <em>usern</em> 表，包含 <em>userid</em> 和 <em>username</em> 列，接着利用 WHILE 循环向其中插入前 20 行数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @i int</span><br><span class="line">SET @i &#x3D; 1</span><br><span class="line">WHILE @i &lt;&#x3D; 20</span><br><span class="line">BEGIN</span><br><span class="line">INSERT INTO usern (userid,username) value(@i,&#39;user&#39; + ltrim(str(@i)))</span><br><span class="line">SET @i &#x3D; @i + 1</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>求 1 到 100 的累加和，当和超过 1000 时停止累加，显示累加和以及累加到的位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @i int,@a int</span><br><span class="line">SET @i &#x3D; 1</span><br><span class="line">SET @a &#x3D; 0</span><br><span class="line">WHILE @i &lt;&#x3D; 100</span><br><span class="line">    BEGIN</span><br><span class="line">        SET @a &#x3D; @a + @i</span><br><span class="line">        IF @a &gt;&#x3D; 1000 BREAK</span><br><span class="line">        SET @i &#x3D; @i + 1</span><br><span class="line">    END</span><br><span class="line">SELECT @a AS &#39;a&#39;,@i AS &#39;i&#39;</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>函数</b></p>
<p>系统内置函数：</p>
<ul>
<li>确定性函数：每次使用特定的输入值集调用该函数时总是返回相同的结果。</li>
<li>非确定性函数：每次使用特定的输入值集调用时可能返回不同的结果。</li>
</ul>
<p>数学函数：</p>
<table>
<thead>
<tr>
<th align="center">函 数 名 称</th>
<th align="center">函 数 功 能</th>
<th align="center">函 数 名 称</th>
<th align="center">函 数 功 能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ABS</td>
<td align="center">求绝对值</td>
<td align="center">POWER</td>
<td align="center">求 x 的 y 次方</td>
</tr>
<tr>
<td align="center">COS</td>
<td align="center">余弦函数</td>
<td align="center">RAND</td>
<td align="center">求随机数</td>
</tr>
<tr>
<td align="center">COT</td>
<td align="center">余切函数</td>
<td align="center">ROUND</td>
<td align="center">四舍五入</td>
</tr>
<tr>
<td align="center">EXP</td>
<td align="center">计算 e 的 x 次幂</td>
<td align="center">SIN</td>
<td align="center">正弦函数</td>
</tr>
<tr>
<td align="center">FLOOR</td>
<td align="center">求仅次于最小值的值</td>
<td align="center">SQUARE</td>
<td align="center">开方</td>
</tr>
<tr>
<td align="center">LOG</td>
<td align="center">求自然对数</td>
<td align="center">SQRT</td>
<td align="center">求平方根</td>
</tr>
<tr>
<td align="center">PI</td>
<td align="center">常量，圆周率</td>
<td align="center">TAN</td>
<td align="center">正切函数</td>
</tr>
</tbody></table>
<p>日期和时间函数：</p>
<ul>
<li>GETDATE( )：返回系统当前的日期和时间</li>
<li>DATEADD(a,b,c)：返回指定日期 a 加伤指定的额外日期间隔 b 产生的新日期。</li>
<li>DAY(a)：返回日期表达式中的日。</li>
<li>MONTH(a)：返回日期表达式中的月。</li>
<li>YEAR(a)：返回日期表达式中的年。</li>
</ul>
<p>计算现在是几月。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MONTH(GETDATE())</span><br></pre></td></tr></table></figure>

<p>字符串函数：</p>
<ul>
<li>CHAR(a)：返回证书所代表的 ASCII 码值对应的字符。</li>
<li>LOWER(a)：将大写字符转换成小写字符。</li>
<li>UPPER(a)：将小写字符转换成大写字符。</li>
<li>LTRIM(a)：删除字符串开始部分的空格。</li>
<li>RTRIM(a)：删除字符串结尾部分的空格。</li>
</ul>
<p>将字符串 “I am a student” 以大写字母表示。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT UPPER(&#39;I am a student&#39;)</span><br></pre></td></tr></table></figure>

<p>用户自定义函数：</p>
<p>函数体包含在 BEGIN…END 中。</p>
<p>求 “选课” 表中某门课的平均成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE FUNCTION average(@cn char(4)) RETURNS float</span><br><span class="line">AS</span><br><span class="line">    BEGIN</span><br><span class="line">        DECLARE @aver float</span><br><span class="line">        SELECT @aver &#x3D; (SELECT avg(score) FROM sc WHERE cno &#x3D; @cn)</span><br><span class="line">        RETURN @aver</span><br><span class="line">    END</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第十章-存储过程和触发器"><a href="#第十章-存储过程和触发器" class="headerlink" title="第十章 存储过程和触发器"></a>第十章 存储过程和触发器</h2><p><b>创建存储过程</b></p>
<p>存储过程类似于其他编程语言中的方法，一经创建将被保存在系统库中，后续可以直接通过存储过程名进行调用。</p>
<p>在 <em>teaching</em> 数据库中创建无参存储过程，查询每个学生的各门课程的平均成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE student_avg</span><br><span class="line">AS</span><br><span class="line">SELECT sno,avg(score) AS &#39;avgstore&#39; FROM sc</span><br><span class="line">GROUP BY sno</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 库中创建带参数的存储过程，查询某个学生的学号、姓名、专业、其选修的所有课程的课程号和考试成绩以及平均成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE GetStudent @number char(7)</span><br><span class="line">AS</span><br><span class="line">SELECT s.sno,sname,specialty,cno,score FROM student s,sc</span><br><span class="line">WHERE s.sno &#x3D; @number AND s.sno &#x3D; sc.sno</span><br><span class="line">compute avg(score)</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中创建带参数的存储过程，修改某个学生的某门课的成绩。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE Update_score @number &#x3D; char(7),@cno char(4),@score int</span><br><span class="line">AS UPDATE sc SET score &#x3D; @score WHERE sno &#x3D; @number AND cno &#x3D; @cno</span><br></pre></td></tr></table></figure>

<p>使用流程控制语句在 <em>inventory</em> 数据库中创建存储过程，修改某商品的单价，如果库存总量大于某个值，就打九折。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE inventory</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE Update_price @gno char(3),@s float</span><br><span class="line">AS</span><br><span class="line">    IF (SELECT sum(number) FROM invent WHERE gno &#x3D; @gno)&gt;@s</span><br><span class="line">        UPDATE goods SET price &#x3D; price * 0.9</span><br><span class="line">        WHERE gno &#x3D; @gno</span><br></pre></td></tr></table></figure>

<p>在 <em>teaching</em> 数据库中创建带有参数和默认值（通配符）的存储过程，从 <em>student</em> 表中返回指定学生（提供姓名）的信息。该存储过程对传递的参数进行模式匹配，如果没有提供参数，则返回所有学生的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE Student_Name @sname varchar(40) &#x3D; &#39;%&#39;</span><br><span class="line">AS</span><br><span class="line">    SELECT * FROM student WHERE sname LIKE @sname</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p>在 <em>inventory</em> 数据库中创建带 OUTPUT 参数的存储过程，用于计算指定商品的平均价格，在存储过程中使用一个输入参数（商品名）和一个输出参数（平均价格）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE inventory</span><br><span class="line">GO</span><br><span class="line">CREATE PROCEDURE avgprice @gn varchar(20),@avgp int OUTPUT</span><br><span class="line">AS</span><br><span class="line">    SELECT @avgp &#x3D; avg(price) FROM goods WHERE gname &#x3D; @gn</span><br><span class="line">GO</span><br></pre></td></tr></table></figure>

<p><b>执行存储过程</b></p>
<p>显示学生 “张明明” 的信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXECUTE Student_Name &#39;张明明&#39;</span><br></pre></td></tr></table></figure>

<p>执行带有输入和输出参数的存储过程 <em>avgprice</em> 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DECLARE @avgprice int</span><br><span class="line">EXECUTE avgprice &#39;冰箱&#39;,@avgprice OUTPUT</span><br><span class="line">PRINT &#39;冰箱的平均价格：&#39; + str(@avgprice)</span><br></pre></td></tr></table></figure>

<p>&nbsp;</p>
<p><b>触发器的分类</b></p>
<ul>
<li><p>DML 触发器：</p>
<p>  DML触发器是当数据库服务器中发生数据操作语言（DML）事件时会自动执行的存储过程。</p>
<p>  DML 事件包括修改数据的 INSERT 语句、UPDATE 语句或 DELETE 语句。</p>
</li>
<li><p>DDL 触发器：</p>
<p>  响应数据定义语言（DDL）语句时触发，一般在数据库中用于管理任务。</p>
</li>
</ul>
<p>使用 DDL 触发器 <em>limited</em> 防止数据库中的任何一表被修改或删除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE TRIGGER limited ON database</span><br><span class="line">FOR DROP_TABLE,ALTER_TABLE</span><br><span class="line">AS</span><br><span class="line">    PRINT &#39;名为 limited 的触发器不允许您执行对表的修改或删除操作！&#39;</span><br><span class="line">    ROLLBACK</span><br></pre></td></tr></table></figure>

<p>为 <em>student</em> 表创建一个简单 DML 触发器，在插入和修改数据时都会自动显示提示信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO</span><br><span class="line">CREATE TRIGGER reminder ON student</span><br><span class="line">FOR INSERT,UPDATE</span><br><span class="line">AS</span><br><span class="line">    PRINT &#39;你在插入或修改 student 的数据&#39;</span><br></pre></td></tr></table></figure>

<p>为 <em>student</em> 表创建一个 DML 触发器，在插入和修改数据时都会自动显示所有学生的信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">USE teaching</span><br><span class="line">GO CREATE TRIGGER print_table ON student</span><br><span class="line">FOR INSERT,UPDATE</span><br><span class="line">AS</span><br><span class="line">    SELECT * FROM student</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="第十一章-事务与并发控制"><a href="#第十一章-事务与并发控制" class="headerlink" title="第十一章 事务与并发控制"></a>第十一章 事务与并发控制</h2><p><b>事务概述</b></p>
<p>在 SQL Server 2008 中，事务要求处理时必须满足4个原则：</p>
<ul>
<li>原子性：事物必须是原子工作单元，对于其数据修改，要么全都执行，要么全都不执行。</li>
<li>一致性：一致性要求事务执行完成后将数据库从一个一致状态转变到另一个一致状态。即在相关数据库中所有规则都必须应用于事务的修改，以保持所有数据的完整性。</li>
<li>隔离性：也称为独立性，指并行事务的修改必须与其他并行事务的修改相互独立。</li>
<li>持久性：在事务完成提交后会对系统产生持久的影响，即事务的操作将写入数据库中，无论发生何种机器和系统故障都不应该对其有任何影响。</li>
</ul>
<p>&nbsp;</p>
<p><b>并发带来的问题</b></p>
<ul>
<li>丢失修改：指在一个事务读取一个数据时，另一个事务也访问该同一数据。第一个事务对数据进行修改后，第二个事务也对数据进行了修改，则第一个事务的修改结果就会丢失。</li>
<li>脏读：指当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另一个事务也访问了这个数据，然后使用了这个数据。因这个数据还没有最终确定，而另一个事务则使用了该数据，那么另一个事务读取到的这个数据就是个“脏数据”，依据“脏数据”执行的操作可能是不正确的。</li>
<li>不可重复读：指在一个事务内多次读取同一数据。在这个事务还没有结束时，另外一个事物也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，第一个事务两次读取到的数据可能不一样。</li>
<li>幻读：第一个事务对一个表中数据进行了修改，这种修改设计表中全部数据行，第二个事务也修改了表中数据，向其中插入了一条数据。后续读取时，第一个事务就会发现一条未被修改的数据行。</li>
</ul>
<p>&nbsp;</p>
<p><b>锁的类型</b></p>
<ul>
<li><p>共享锁：</p>
<p>  简称（S锁），允许并发事务读取（SELECT）一个资源。当资源上存在共享 S锁 时，任何其他事物都不能修改数据。一旦已经读取数据，便立即释放资源上的共享 S锁 ，除非在事务生存周期内用锁定提示保护共享 S锁 。</p>
</li>
<li><p>排它锁：</p>
<p>  简称（X锁），可以防止并发事务对资源进行访问，其他事物不能读取或修改 X锁 锁定的数据。即 X锁 锁定的资源只允许进行<b>锁定操作</b>的程序使用，其他任何对他的操作均不会被接受。</p>
</li>
</ul>
<hr>
<h2 id="第十二章-数据库的安全管理"><a href="#第十二章-数据库的安全管理" class="headerlink" title="第十二章 数据库的安全管理"></a>第十二章 数据库的安全管理</h2><ul>
<li><p><b>Windows 验证模式</b></p>
<p>  用户通过 Windows 的用户身份验证，连接到 SQL Server 服务器上，而 SQL Server 本身不需要管理一套登录数据。 SQL Server 检测当前使用 Windows 的用户账户，并在系统注册表中查找该用户，以确定该用户是否有权登录。这种验证只适用于能够进行有效身份验证的 Windows 操作系统，在其他操作系统无法使用。</p>
<p>  其优点：</p>
<ul>
<li>数据库管理员的工作可以集中在管理数据库上，对用户账户的管理可以交给 Windows 去完成。</li>
<li>Windows 有着更强的用户账户管理工具。</li>
<li>Windows 的组策略支持多个用户同时被授权访问 SQL Server。</li>
</ul>
</li>
<li><p><b>混合验证模式</b></p>
<p>  用户可以使用 Windows 身份验证或 SQL Server 身份验证与 SQL Server 服务器连接。它将通过数据库最初 IP 地址进行区分用户账户在 Windows 操作系统下是否可信。不可信用户需要通过账户存在性和密码的匹配性验证。</p>
<p>  其优点：</p>
<ul>
<li>创建了 Windows 之上的另一个安全层次。</li>
<li>支持更大范围的用户，例如非 Windows 用户。</li>
<li>一个应用程序可以利用单个 SQL Server 登录或口令。</li>
</ul>
</li>
</ul>
<p>&nbsp;</p>
<p><b>固定服务器角色</b></p>
<ul>
<li><em>sysadmin</em> ：可以在 SQL Server 中执行任何活动。</li>
<li><em>serveradmin</em> ：可以设置服务器范围的配置选项，还可以关闭服务器。</li>
<li><em>setupadmin</em> ：可以管理连接服务器和启动过程。</li>
<li><em>securityadmin</em> ：可以管理登录和创建数据库的权限，还可以读取错误日志和更改密码。</li>
<li><em>processadmin</em> ：可以管理在 SQL Server 中运行的进程。</li>
<li><em>dbcreator</em> ：可以创建、更改和删除数据库。</li>
<li><em>diskadmin</em> ：可以管理磁盘文件。</li>
<li><em>bulkadmin</em> ：可以执行 BULK INSERT （大容量插入语句）。</li>
</ul>
<p><b>固定数据库角色</b></p>
<ul>
<li><em>db_owner</em> ：具有数据库中的全部权限。</li>
<li><em>db_accessadmin</em> ：可以添加和删除用户。</li>
<li><em>db_securityadmin</em> ：可以管理全部权限、对象所有权限，拥有角色和角色成员资格。</li>
<li><em>db_ddladmin</em> ：可以发出除 GRANT、REVOKE、DENY 以外的所有数据定义语句。</li>
<li><em>db_backupoperator</em> ：具有备份数据库的权限。</li>
<li><em>db_datareader</em> ：可以查询数据库内任何用户表、视图及表值函数中的所有数据。</li>
<li><em>db_denydatareader</em> ：不能选择数据库内任何用户表、视图及表值函数中的任何数据。</li>
<li><em>db_denydatawriter</em> ：不能更改数据库内任何用户表、视图及表值函数中的任何数据。</li>
<li><em>public</em> ：最基本的数据库角色。</li>
</ul>
<hr>
<h2 id="第十三章-数据库的备份与还原"><a href="#第十三章-数据库的备份与还原" class="headerlink" title="第十三章 数据库的备份与还原"></a>第十三章 数据库的备份与还原</h2><p><b>备份内容</b></p>
<p>备份内容主要包括系统数据库、用户数据库和事务日志。</p>
<ul>
<li>系统数据库记录了 SQL Server 系统配置参数、用户资料以及所有用户数据库等重要信息，主要包括 <em>master</em> 、 <em>msdb</em> 、 <em>model</em> 数据库。</li>
<li>用户数据库中存储了用户的数据。</li>
<li>事务日志记录了用户对数据库中数据的各种操作，平时系统会自动管理和维护所有的数据库事务日志。</li>
</ul>
<p><b>备份频率</b></p>
<p>数据库备份频率一般取决于修改数据库的频繁程度，以及一旦出现意外丢失的工作量的大小，还有发生意外丢失数据的可能性大小。</p>
<p>当用户数据库中执行了加入数据、创建索引等操作时应该对用户数据库进行备份，此外，清空了事务日志，也应该备份数据库。</p>
<p><b>备份存储介质</b></p>
<p>常用的备份存储介质包括硬盘、磁带和命令管道等。</p>
<p><b>其他计划</b></p>
<ul>
<li>确定备份工作负责人。</li>
<li>确定使用在线备份还是脱机备份。</li>
<li>确定是否使用备份服务器。</li>
<li>确定备份存储的地方。</li>
<li>确定备份存储的期限。</li>
</ul>
<p>&nbsp;</p>
<p><b>数据库备份的类型</b></p>
<p><b>完整数据库备份</b></p>
<p>完整备份会将所有数据进行备份，还原时操作更加方便，但备份用时更长，需要更多存储空间。因此小型数据库常用完整备份，大型数据库更推荐使用差异数据库备份。</p>
<p><b>差异数据库备份</b></p>
<p>差异数据库备份只备份自上一次完整数据库备份发生改变的内容和在差异数据库备份过程中所发生的所有活动。差异数据库备份基于以前的完整数据库备份，因此，这样的完整数据库备份称为“基准备份”。</p>
<p><b>事务日志备份</b></p>
<p>事务日志备份是自上次事务日志备份后对数据库执行的所有事物的一系列记录，可以记录数据库的更改，但前提是在执行了完整数据库备份之后，用户可以使用事务日志备份将数据库恢复到特定的即时点。</p>
<font color='red'>
注意：

<ul>
<li>除非已经至少执行了一次完整数据库备份，否则不用做事务日志备份。</li>
<li>如果没有了相应的数据库备份，则无法还原事务日志备份。</li>
<li>当数据库使用简单恢复模式时无法备份事务日志。</font>

</li>
</ul>
<p><b>数据库文件或文件组备份</b></p>
<ul>
<li>必须指定逻辑文件或文件组。</li>
<li>必须执行事务日志备份，使还原的文件与数据库的其他部分相一致。</li>
<li>最多可以指定 16 个文件或文件组。</li>
<li>应制定轮流备份每个文件的计划。</li>
</ul>
<p>&nbsp;</p>
<p><b>完整恢复模式</b></p>
<p>完整恢复模式是等级最高的数据库恢复模式。</p>
<p>特点：</p>
<ul>
<li>允许将数据库还原到故障点状态。</li>
<li>数据库可以进行 4 中备份方式中的任何一种。</li>
<li>可以还原到某个即时点。</li>
</ul>
<p>符合下列任何要求则使用完整恢复模式：</p>
<ul>
<li>用户必须能够恢复所有数据。</li>
<li>数据库包含多个文件组，并且希望逐段还原读写辅助文件组。</li>
<li>必须能够恢复到故障点。</li>
</ul>
<p><b>简单恢复模式</b></p>
<p>简单恢复模式简略地记录大多数事务，记录信息只是为了确保在系统崩溃或还原数据备份之后的数据库的一致性。</p>
<p>特点：</p>
<ul>
<li>允许将数据库还原到最新的备份。</li>
<li>数据库只能进行完整数据库备份和差异备份，不能进行事务日志备份和文件及文件组备份。</li>
<li>不能还原到某个即时点。</li>
</ul>
<p>符合下列任何要求则使用简单恢复模式：</p>
<ul>
<li>丢失日志中的一些数据无关紧要。</li>
<li>无论何时还原自主文件组，用户都希望始终还原读写辅助文件组。</li>
<li>是否备份事务日志无所谓，只需要完整和差异备份。</li>
<li>不在乎无法恢复到故障点以及丢失上次备份到发生故障之间的任何更新。</li>
</ul>
<p><b>大容量日志恢复模式</b></p>
<p>特点：</p>
<ul>
<li>还原允许大容量日志记录的操作。</li>
<li>数据库可以进行 4 中备份方式中的任何一种。</li>
<li>不能还原到某个即时点。</li>
</ul>
<p>将整个 <em>teaching</em> 数据库完整备份到磁盘上，并创建一个新的媒体集。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BACKUP DATABASE teaching</span><br><span class="line">TO DISK &#x3D; &#39;F:\BACKUP\teaching.Bak&#39;</span><br><span class="line">    WITH FORMAT</span><br><span class="line">    NAME &#x3D; &#39;teaching 的完整备份&#39;</span><br></pre></td></tr></table></figure>

<p>创建 <em>teaching</em> 的差异数据库备份。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BACKUP DATABASE teaching</span><br><span class="line">TO DISK &#x3D; &#39;F\BACKUP\teaching差异备份.Bak&#39;</span><br><span class="line">    WITH DIFFERENTIAL</span><br></pre></td></tr></table></figure>

<p><b>数据库还原操作</b></p>
<p>将 <em>teaching</em> 数据库的完整数据库备份进行还原。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RESTORE DATABASE teaching</span><br><span class="line">FROM DISK &#x3D; &#39;F:\BACKUP\teaching.Bak&#39;</span><br><span class="line">WITH REPLACE,NORECOVERY</span><br></pre></td></tr></table></figure>

<p>将 <em>teaching</em> 数据库的差异数据库备份进行还原。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RESTORE DATABASE teaching</span><br><span class="line">FROM DISK &#x3D; &#39;F:\BACKUP\teaching差异备份.Bak&#39;</span><br><span class="line">WITH RECOVERY</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="个人练习纠错"><a href="#个人练习纠错" class="headerlink" title="个人练习纠错"></a>个人练习纠错</h2><font color='red'>
数据库能为各种用户共享

<p>第三范式仍存在一定的插入和删除异常</p>
<p>软件错误属于系统故障</p>
<p>数据库中存放三级模式结构定义的是DB</p>
<p>DBMS通过语法检查来保证数据库中的数据是正确的，便面非法的不符合语义的错误数据的输入和输出</p>
<p>数据流表示某一加工处理过程的输入或输出数据</p>
<p>DBS运行的最小逻辑工作单元是事务</p>
<p>系统能把数据库从被破坏、不正确的状态，恢复到最近一个正确的状态，DBMS的这种能力称为可恢复性</p>
<p>关系模型的实体完整性是指关系的主键值唯一且非空</p>
<p>外模式/模式映像为数据库提供了逻辑数据独立性</p>
<p>设计全局ER模式时需要消除的冲突有：属性冲突、命名冲突和结构冲突</p>
<p>需求说明书的主要内容是数据流图（DFD）和数据字典</p>
<p>采用ER方法的数据库概念设计包括以下步骤：设计局部ER模式、设计全局ER模式、优化全局ER模式。</p>
<p>关系数据库中的关键码包括超键、候选键、主键和外键。超键和候选键是能唯一地标识关系中的元组的属性或属性集，但候选键中不含有多于属性。主键是从候选键中人为指定的，外键是指一个关系包含另一个关系的主键所对应的属性组。<br></font></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>栈的初识</title>
    <url>/2020/06/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B012%EF%BC%89/</url>
    <content><![CDATA[<h3 id="什么是栈？"><a href="#什么是栈？" class="headerlink" title="什么是栈？"></a>什么是栈？</h3><hr>
<p>栈是一种后进先出的线性结构，比如平常的手枪和自动步枪，子弹在弹夹中补充时，最后填入的子弹会被第一次射击中射出。<br>浏览器的浏览历史中，点击后退一步会跳转到距离现在最新点开的上一个网页，而不是最早点开的网页。</p>
<p>官方定义：栈（Stack）是一个<b>后进先出</b>的线性表，他要求只在表尾进行删除和插入操作。</p>
<p>栈在操作上的特殊要求和限制：</p>
<ul>
<li>栈的元素必须“<b>后进先出</b>”。</li>
<li>栈的操作只能在这个线性表的表尾进行。</li>
<li>在栈中，表尾称为栈的栈顶，表头称为栈的栈底。</li>
</ul>
<p>栈的插入操作（Push），叫做进栈，也称为压栈，入栈。<br>栈的删除操作（Pop），叫做出栈，也称为弹(tan)栈。</p>
<h3 id="栈的存储结构"><a href="#栈的存储结构" class="headerlink" title="栈的存储结构"></a>栈的存储结构</h3><hr>
<p>因栈是一种特殊的线性表，因此栈也存在顺序存储结构和链式存储结构。</p>
<p>栈为空时叫“空栈”，栈顶等于栈底。当数据从栈顶进入，则栈顶和栈底分离，栈的当前容量会变大，数据出栈从栈顶弹出，栈顶下移，栈的当前容量会减小。</p>
<img src="/img/数据结构（简述12）/图1.png">

<p>栈的顺序存储结构定义代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    ElemType *base;</span><br><span class="line">    ElemType *top;</span><br><span class="line">    int stackSzie;</span><br><span class="line">&#125;sqStack;</span><br></pre></td></tr></table></figure>

<p>其中包含三个元素，base是指向栈底的指针变量，top是指向栈顶的指针变量，stackSize是指示栈当前可用最大容量。</p>
<ul>
<li><b>创建栈</b></li>
</ul>
<p>创建栈的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define STACK_INIT_SIZE 100;</span><br><span class="line">void initStack(sqStack *s)</span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;base &#x3D; (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));</span><br><span class="line">    &#x2F;&#x2F;100乘分配的数据空间即，分配了100个数据元素的空间</span><br><span class="line">    if(!s-&gt;base)</span><br><span class="line">    &#123;</span><br><span class="line">        exit(0);</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;top &#x3D; s-&gt;base;   &#x2F;&#x2F;空栈状态，栈顶等于栈底</span><br><span class="line">    s-&gt;stackSize &#x3D; STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><b>入栈操作</b></li>
</ul>
<ol>
<li>入栈操作又称为压栈操作，即向栈中存放数据。</li>
<li>入栈操作在栈顶进行，每次向栈中压入一个数据，top指针+1，直到栈满。</li>
</ol>
<p>入栈操作的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define STACKINCREMENT 10</span><br><span class="line"></span><br><span class="line">void Push(sqStack *s, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;若栈满，追加空间</span><br><span class="line">    if(s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stackSize)    &#x2F;&#x2F;判断栈顶减栈底是否比可用空间大</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;base &#x3D; (ElemType *)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * sizeof(ElemType));</span><br><span class="line">        &#x2F;*realloc可以看作是malloc的伸展，用于在原分配的空间上进行加分配，</span><br><span class="line">        它会自动判断空间是否已满，如果空间已满会自动增加10个空间，</span><br><span class="line">        这个加分配不会只进行一次，而是需要进行几次他就会自动进行几次。</span><br><span class="line">        此处在加分配数据前写s-&gt;base是定位一下栈底坐标再进行加分配。</span><br><span class="line">        加分配过程需原空间大小加上需要加分配的空间大小，</span><br><span class="line">        实际上是重新选择一个更大的数重新分配空间。*&#x2F;</span><br><span class="line"></span><br><span class="line">        if(!s-&gt;base)</span><br><span class="line">            exit(0);</span><br><span class="line">        </span><br><span class="line">        s-&gt;top &#x3D; s-&gt;base + s-&gt;stackSize;    &#x2F;&#x2F;栈顶此时需要重新设置，设置栈顶</span><br><span class="line">        s-&gt;stackSize &#x3D; s-&gt;stackSize + STACKINCREMENT;   &#x2F;&#x2F;栈的空间大小也要重新定义。</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(s-&gt;top) &#x3D; e;  &#x2F;&#x2F;放入数据</span><br><span class="line">    s-&gt;top++;   &#x2F;&#x2F;栈顶增加1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><b>出栈操作</b></li>
</ul>
<ol>
<li>出栈操作就是在栈顶取出数据，栈顶指针随之下移的操作。</li>
<li>每当从栈内弹出一个数据，栈的当前容量就-1。</li>
</ol>
<p>出栈操作的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void Pop(sqstack *s, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    if(s-&gt;top &#x3D;&#x3D; s-&gt;base)</span><br><span class="line">        return;</span><br><span class="line">    *e &#x3D; *--(s-&gt;top);</span><br><span class="line">    &#x2F;*因为栈顶实际上是指在栈的最新一个数据元素顶上的空间，因此需要</span><br><span class="line">    栈顶指针下移一位指向最新的数据元素，并将其存入*e中。*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构化</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>栈的操作延伸</title>
    <url>/2020/06/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B013%EF%BC%89/</url>
    <content><![CDATA[<h3 id="栈的规范套路性创建"><a href="#栈的规范套路性创建" class="headerlink" title="栈的规范套路性创建"></a>栈的规范套路性创建</h3><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef int ElemType</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">    ElemType data[MAXSIZE];</span><br><span class="line">    int top;    &#x2F;&#x2F;用于标注栈顶的位置</span><br><span class="line">    int stackSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与上一篇创建的操作只有方法不同，但同样是创建栈，不过推荐上一篇的创建栈的方法。</p>
<h3 id="清空栈"><a href="#清空栈" class="headerlink" title="清空栈"></a>清空栈</h3><hr>
<p>清空栈是将其中的数据元素进行清空，而栈的物理空间不发生改变。<br>因此只需要令top=base即可，不需要将整个栈进行销毁。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ClearStack(sqStack *s)</span><br><span class="line">&#123;</span><br><span class="line">    s-&gt;top &#x3D; s-&gt;base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="销毁栈"><a href="#销毁栈" class="headerlink" title="销毁栈"></a>销毁栈</h3><hr>
<p>不同于清空栈的只是把其中的数据元素作废，销毁栈是切实的将栈的物理空间进行释放。<br>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DestroyStack(sqStack *s)</span><br><span class="line">&#123;</span><br><span class="line">    int i, len;</span><br><span class="line">    len &#x3D; s-&gt;stackSize;</span><br><span class="line">    for(i&#x3D;0; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        free(s-&gt;base);</span><br><span class="line">        s-&gt;base++;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;base &#x3D; s-&gt;top &#x3D; NULL;</span><br><span class="line">    s-&gt;stackSize &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计算栈的当前容量"><a href="#计算栈的当前容量" class="headerlink" title="计算栈的当前容量"></a>计算栈的当前容量</h3><hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int StackLen(sqStack s)</span><br><span class="line">&#123;</span><br><span class="line">    return s.top-s.base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈的实例操作"><a href="#栈的实例操作" class="headerlink" title="栈的实例操作"></a>栈的实例操作</h3><hr>
<p>题目：利用栈的数据结构特点，将二进制数据转换为十进制。</p>
<p>提示：第n位乘2^(n-1)，将所有位乘后数字相加即可得到转换后的十进制数。记住第一位是从个位开始数，即从右往左数。<br>比如存放11001001时，即：<br><img src="/img/数据结构（简述13）/图1.png"></p>
<p>实际代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_INIT_SIZE 20</span><br><span class="line">#define STACKINCREMENT 10</span><br><span class="line"></span><br><span class="line">typedef char ElemType;</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">	ElemType* base;</span><br><span class="line">	ElemType* top;</span><br><span class="line">	int stackSize;</span><br><span class="line">&#125;sqStack;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化栈</span><br><span class="line">void InitStack(sqStack* s)</span><br><span class="line">&#123;</span><br><span class="line">	s-&gt;base &#x3D; (ElemType *)malloc(STACK_INIT_SIZE * sizeof(ElemType));</span><br><span class="line">	if (!(s-&gt;base))</span><br><span class="line">	&#123;</span><br><span class="line">		exit(0);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	s-&gt;top &#x3D; s-&gt;base;</span><br><span class="line">	s-&gt;stackSize &#x3D; STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;压栈操作</span><br><span class="line">void Push(sqStack* s, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stackSize)   </span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;base &#x3D; (ElemType*)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * sizeof(ElemType));</span><br><span class="line"></span><br><span class="line">        if (!s-&gt;base)</span><br><span class="line">        &#123;</span><br><span class="line">            exit(0);</span><br><span class="line">        &#125;</span><br><span class="line">             </span><br><span class="line">        s-&gt;top &#x3D; s-&gt;base + s-&gt;stackSize; </span><br><span class="line">        s-&gt;stackSize &#x3D; s-&gt;stackSize + STACKINCREMENT; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(s-&gt;top) &#x3D; e; </span><br><span class="line">    s-&gt;top++;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出栈操作</span><br><span class="line">void Pop(sqStack* s, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    if (s-&gt;top &#x3D;&#x3D; s-&gt;base)</span><br><span class="line">        return;</span><br><span class="line">    *e &#x3D; *--(s-&gt;top);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;计算栈的大小</span><br><span class="line">int StackLen(sqStack s)</span><br><span class="line">&#123;</span><br><span class="line">    return (s.top - s.base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    ElemType c;</span><br><span class="line">    sqStack s;</span><br><span class="line">    int len, i, sum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    InitStack(&amp;s);</span><br><span class="line"></span><br><span class="line">    printf(&quot;请输入需要转换的二进制数，最后输入#表示输入完成：\n&quot;);</span><br><span class="line"></span><br><span class="line">    scanf_s(&quot;%c&quot;, &amp;c);</span><br><span class="line"></span><br><span class="line">    while (c !&#x3D;&#39;#&#39;)</span><br><span class="line">    &#123;</span><br><span class="line">        Push(&amp;s, c);</span><br><span class="line">        scanf_s(&quot;%c&quot;, &amp;c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    len &#x3D; StackLen(s);</span><br><span class="line"></span><br><span class="line">    printf(&quot;栈的当前容量为：%d\n&quot;, len);</span><br><span class="line"></span><br><span class="line">    for (i &#x3D; 0; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Pop(&amp;s, &amp;c);</span><br><span class="line">        sum &#x3D; sum + (c - 48) * pow(2, i);</span><br><span class="line">        &#x2F;*因为c在传值过程中是以字符形式传值，而数</span><br><span class="line">        字0在ASCII码中代表数字48，所以在整型计算</span><br><span class="line">        这里要减掉48，而pow就是math函数库中的一个</span><br><span class="line">        函数，这里意思是2的i次方*&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printf(&quot;转化后得到的十进制数：%d&quot;, sum);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（单链表增删）</title>
    <url>/2020/05/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A2%EF%BC%89/</url>
    <content><![CDATA[<p>假设当下有ai结点和ai+1结点相连，此时e结点想要插入到ai结点后面形成ai —— e —— ai+1。ai的指针为p，e的指针为s。那么进行插入操作即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">p-&gt;next &#x3D; s;</span><br></pre></td></tr></table></figure>
<p><b>两行代码不可先后顺序替换！</b> </p>
<p>总结一下单链表插入操作流程：</p>
<ul>
<li><p>声明一结点p指向链表头结点，初始化j从1开始；</p>
</li>
<li><p>当j&lt;1时，就遍历链表，让p指针向后移动，不断指向下一个结点，j累加1；</p>
</li>
<li><p>若到链表末尾p为空，则第i元素不存在；</p>
</li>
<li><p>反之查找成功，于系统中生成空结点s；</p>
</li>
<li><p>将数据元素e赋值给s-&gt;data；</p>
</li>
<li><p>单链表插入语句</p>
<pre><code>s-&gt;next = p-&gt;next;
p-&gt;next = s;</code></pre></li>
<li><p>返回成功</p>
</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ERROR 0</span><br><span class="line">#define OK 1</span><br><span class="line"></span><br><span class="line">Status ListInsert(linkList *L, int i, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">	int j;</span><br><span class="line">	LinkList p, s;</span><br><span class="line"></span><br><span class="line">	p &#x3D; *L;		&#x2F;&#x2F;令p为链表L头结点</span><br><span class="line">	j &#x3D; 1;		&#x2F;&#x2F;初始化j为1</span><br><span class="line"></span><br><span class="line">	while(p &amp;&amp; j &lt; i)		&#x2F;&#x2F;查找位置i</span><br><span class="line">	&#123;</span><br><span class="line">		p &#x3D; p-&gt;next;</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if(!p || j &gt; i)</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	s &#x3D; (LinkList)malloc(sizeof(Node));		&#x2F;&#x2F;给结点s动态分配一个空间</span><br><span class="line">	s-&gt;data &#x3D; e;	&#x2F;&#x2F;将需要插入的数值赋值给s的数据域</span><br><span class="line"></span><br><span class="line">	s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line">	p-&gt;next &#x3D; s;	&#x2F;&#x2F;经典两行代码完成插入操作</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单链表删除"><a href="#单链表删除" class="headerlink" title="单链表删除"></a>单链表删除</h2><hr>
<p>删除操作完成代码：<br>    p-&gt;next = p-&gt;next-&gt;next;<br>或者<br>    q=p-&gt;next; p-&gt;next = q-&gt;next;<br>这是删除了结点q。</p>
<p>单链表删除操作流程：</p>
<ul>
<li>声明结点p指向链表第一个结点，初始化j=1；</li>
<li>当j&lt;1时，遍历链表，让p的指针后移，不断指向下一个结点，j++；</li>
<li>若链表末尾p为空，则说明第i个元素不存在；</li>
<li>否则查找成功，p-next赋值给q；</li>
<li>删除语句p-&gt;next = q-&gt;next；</li>
<li>q节点中数据赋值给e，作为返回；</li>
<li>释放q结点。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ERROR 0;</span><br><span class="line">#define OK 1;</span><br><span class="line"></span><br><span class="line">Status ListDelete(LinkList *L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">	int j;</span><br><span class="line">	LinkList p, q;</span><br><span class="line"></span><br><span class="line">	p &#x3D; *L;		&#x2F;&#x2F;令p等于链表L的头结点</span><br><span class="line">	j &#x3D; 1;		&#x2F;&#x2F;初始化j&#x3D;1</span><br><span class="line"></span><br><span class="line">	while(p-&gt;next &amp;&amp; j&lt;i)	&#x2F;&#x2F;查找第i个元素</span><br><span class="line">	&#123;</span><br><span class="line">		p &#x3D; p-&gt;next;</span><br><span class="line">		++j;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if(!(p-&gt;next) || j&gt;i)</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	q &#x3D; p-&gt;next;	</span><br><span class="line">	p-&gt;next &#x3D; q-&gt;next;		&#x2F;&#x2F;删除操作二连</span><br><span class="line"></span><br><span class="line">	*e &#x3D; q-&gt;data;		&#x2F;&#x2F;q的数据给e</span><br><span class="line">	free(q);		&#x2F;&#x2F;释放结点q，C++也可以delete(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size="5"><b>在线性表中，对于进行频繁增删操作的选用链表，对于主要用于存储查找的选用顺序表。</b></font></p>
<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/2021/06/20/Vue%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="Vue基本概念"><a href="#Vue基本概念" class="headerlink" title="Vue基本概念"></a>Vue基本概念</h2><p>Vue：渐进式javacript框架</p>
<p>渐进式：渐进式就是逐渐使用, 集成更多的功能</p>
<p>库和框架：库是方法的集合, 而框架是一套拥有自己规则的语法</p>
<h2 id="Vue开发方式"><a href="#Vue开发方式" class="headerlink" title="Vue开发方式"></a>Vue开发方式</h2><p>传统开发模式：基于html文件开发Vue</p>
<p>工程化开发方式：在webpack环境中开发Vue（推荐）</p>
<hr>
<h2 id="vue-cli：脚手架"><a href="#vue-cli：脚手架" class="headerlink" title="@vue/cli：脚手架"></a>@vue/cli：脚手架</h2><p>@vue/cli是Vue官方提供的一个全局模块包(得到vue命令), 此包用于创建脚手架项目</p>
<p>脚手架是为了保证各施工过程顺利进行而搭设的工作平台</p>
<p>目录结构：</p>
<img src='/img/web/vue/1.png'>

<p>vue自定义服务器配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">      port: <span class="number">3000</span>,</span><br><span class="line">      open: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关闭eslint代码检查：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    lintOnSave: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>vue文件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      Hello world!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"app"</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>Vue推荐采用.vue文件来开发项目</li>
<li>template里只能有一个根标签</li>
<li>vue文件-独立模块-作用域互不影响</li>
<li>style配合scoped属性, 保证样式只针对当前template内标签生效</li>
<li>vue文件配合webpack, 把他们打包起来插入到index.html</li>
</ol>
<p>Vue项目回归原始化（删除欢迎界面）</p>
<ol>
<li>assets 和 components 文件夹下的一切都删除</li>
<li>src/App.vue仅保留标签</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h2><ul>
<li>插值表达式（声明式渲染/文本插值）</li>
</ul>
<p>在dom标签中, 直接插入vue数据变量</p>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; obj.age &gt; 18 ? '成年' : '未成年' &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">            msg: <span class="string">"hello, vue"</span>,</span></span><br><span class="line">            obj:&#123;</span><br><span class="line"><span class="actionscript">                name: <span class="string">"vue"</span>,</span></span><br><span class="line">                age: 5</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>msg和obj是vue数据变量</p>
<p>要在js中data函数里声明</p>
<hr>
<ul>
<li>MVVM设计模式</li>
</ul>
<p>设计模式: 是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结</p>
<p>MVVM：MVVM(模型, 视图, 视图模型双向关联的一种设计模式)</p>
<p>减少DOM操作, 提高开发效率</p>
<ul>
<li>v-bind</li>
</ul>
<p>给标签属性设置Vue变量的值</p>
<p>语法：v-bind:属性名=”vue变量”</p>
<p>简写：:属性名=”vue变量”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>标签a<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imgSrc"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-on</li>
</ul>
<p>给标签绑定事件</p>
<p>语法：</p>
<ol>
<li>v-on:事件名=“要执行的少量代码”</li>
<li>v-on:事件名=“methods中的函数名”</li>
<li>v-on:事件名=“methods中的函数名(实参)” </li>
</ol>
<p>方法在methods选项定义</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你要购买的商品数量：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"count = count + 1"</span>&gt;</span>增加1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"addFn"</span>&gt;</span>增加1个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"addCountFn(5)"</span>&gt;</span>一次加5件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">      data()&#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span>&#123;</span></span><br><span class="line">              count: 5</span><br><span class="line">              &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      methods:&#123;</span><br><span class="line">          addFn()&#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.count++</span></span><br><span class="line">          &#125;,</span><br><span class="line">          addCountFn(num)&#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.count += num</span></span><br><span class="line">          &#125;,</span><br><span class="line">          subFn()&#123;</span><br><span class="line"><span class="actionscript">              <span class="keyword">this</span>.count--</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>v-on: 可以简写成@</p>
<p>语法：@事件名=”methods中的函数”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"subFn"</span>&gt;</span>减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue事件处理函数中, 拿到事件对象：</p>
<p>无传参, 通过形参直接接收</p>
<p>传参, 通过$event指代事件对象传给事件处理函数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"one"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>阻止百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"two(10, $event)"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>阻止去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">      methods:&#123;</span><br><span class="line">          one(e)&#123;</span><br><span class="line">              e.preventDefault()</span><br><span class="line">          &#125;,</span><br><span class="line">         two(num, e)&#123;</span><br><span class="line">              e.preventDefault()</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在事件后面.修饰符名 - 给事件带来更强大的功能:</p>
<p>语法：@事件名.修饰符=”methods里函数”</p>
<p>修饰符列表：</p>
<ol>
<li>.stop - 阻止事件冒泡</li>
<li>.prevent - 阻止默认行为</li>
<li>.once - 程序运行期间, 只触发一次事件处理函数</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"fatherFn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"btn"</span>&gt;</span>.stop 阻止事件冒泡<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">"btn"</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>.prevent 阻止默认行为<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">"btn"</span>&gt;</span>.once 程序运行期间，只触发一次事件处理函数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>给键盘事件, 添加修饰符, 增强能力：</p>
<p>语法: </p>
<ol>
<li>@keyup.enter - 监测回车按键</li>
<li>@keyup.esc - 监测返回按键</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>"<span class="attr">text</span>" @<span class="attr">keydown.enter</span>=<span class="string">"enterFn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>"<span class="attr">text</span>" @<span class="attr">keydown.esc</span>=<span class="string">"escFn"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（翻转内容）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 变量准备-静态页面铺设 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. 绑定点击事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>逆转世界<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">"Hello, World"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// // 3. 截取字符串返回数组</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// let arr = this.msg.split("")</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// // 4. 翻转</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// arr.reverse()</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// // 5. 数组拼接起来</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// this.msg = arr.join("")</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="comment">// 简化</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.msg = <span class="keyword">this</span>.msg.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-model</li>
</ul>
<p>value属性和Vue数据变量, 双向绑定到一起</p>
<p>语法: v-model=”Vue数据变量”</p>
<p>双向数据绑定:</p>
<ol>
<li>变量变化 -&gt; 视图自动同步</li>
<li>视图变化 -&gt; 变量自动同步</li>
</ol>
<p>例：（注册表）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 1. v-model</span></span><br><span class="line"><span class="comment">         双向数据绑定</span></span><br><span class="line"><span class="comment">         value属性 - vue变量</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"pass"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      username: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      pass: <span class="string">""</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>v-model修饰符:</p>
<p>语法: v-model.修饰符=”Vue数据变量”</p>
<ol>
<li>.number 以parseFloat转成数字类型</li>
<li>.trim 去除首尾空白字符</li>
<li>.lazy 在change时触发而非inupt时（等表单失去焦点, 才把值赋予给Vue数据变量）</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>年龄:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.number</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>人生格言: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"motto"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>自我介绍: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">"intro"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-text和v-html</li>
</ul>
<p>更新DOM对象的innerText/innerHTML：</p>
<p>语法:</p>
<ol>
<li>v-text=”Vue数据变量”</li>
<li>v-html=”Vue数据变量</li>
</ol>
<p>注意: 会覆盖插值表达式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">"str"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">"str"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-show和v-if</li>
</ul>
<p>控制标签的隐藏或出现：</p>
<p>语法:</p>
<ol>
<li>v-show=”Vue变量”</li>
<li>v-if=”Vue变量”</li>
</ol>
<p>原理</p>
<ol>
<li>v-show 用的display:none隐藏 (频繁切换使用)</li>
<li>v-if 直接从DOM树上移除</li>
</ol>
<p>高级</p>
<ol>
<li>v-else的使用</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"true"</span>&gt;</span>v-show盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"true"</span>&gt;</span>v-if盒子<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"age &gt; 18"</span>&gt;</span>我成年了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>还得再等等<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（折叠面板）</p>
<p>点击展开或收起时，把内容区域显示或者隐藏</p>
<img src="/img/web/vue/2.png">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>案例：折叠面板<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1.绑定点击事件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 4. 根据isShow的值显示不同文字 --&gt;</span></span><br><span class="line">          &#123;&#123; isShow ? '收起' : '展开'&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 2. v-show配合变量来控制标签隐藏出现 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 3. 点击时, 把值改成false</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line">      align-items: center;</span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.title</span> <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line">      line-height: 2;</span><br><span class="line">      margin: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">      padding: 0 1em;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="comment">/* 鼠标改成手的形状 */</span></span></span><br><span class="line">      cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-for</li>
</ul>
<p>列表渲染, 所在标签结构, 按照数据数量, 循环生成：</p>
<p>语法:</p>
<ol>
<li>v-for=”(值变量, 索引变量) in 目标结构”</li>
<li>v-for=”值变量 in 目标结构”</li>
</ol>
<p>目标结构:</p>
<p>可以遍历数组 / 对象 / 数字 / 字符串 (可遍历结构)</p>
<p>注意:</p>
<p>v-for的临时变量名不能用到v-for范围外</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法1:</span></span><br><span class="line"><span class="comment">      v-for="(值变量名, 索引变量名) in 目标结构"</span></span><br><span class="line"><span class="comment">      口诀: 想要谁循环就放到谁身上</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        &#123;&#123; item &#125;&#125; ---- &#123;&#123; index &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 语法2:</span></span><br><span class="line"><span class="comment">      v-for="值变量名 in 目标结构"</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"obj in stuArr"</span> <span class="attr">:key</span>=<span class="string">"obj.id"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; obj.sex &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; obj.hobby &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法3:(了解)</span></span><br><span class="line"><span class="comment">      v-for="(value, key) in 对象"</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in tObj"</span> <span class="attr">:key</span>=<span class="string">"value"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        =======</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; key &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 语法4: (了解)</span></span><br><span class="line"><span class="comment">      v-for="变量名 in 固定数字"</span></span><br><span class="line"><span class="comment">      从1开始遍历</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in count"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      arr: [<span class="string">"小明"</span>, <span class="string">"小欢欢"</span>, <span class="string">"大黄"</span>],</span></span><br><span class="line">      stuArr: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1001,</span><br><span class="line"><span class="actionscript">          name: <span class="string">"孙悟空"</span>,</span></span><br><span class="line"><span class="actionscript">          sex: <span class="string">"男"</span>,</span></span><br><span class="line"><span class="actionscript">          hobby: <span class="string">"吃桃子"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1002,</span><br><span class="line"><span class="actionscript">          name: <span class="string">"猪八戒"</span>,</span></span><br><span class="line"><span class="actionscript">          sex: <span class="string">"男"</span>,</span></span><br><span class="line"><span class="actionscript">          hobby: <span class="string">"背媳妇"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      tObj: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">"小黑"</span>,</span></span><br><span class="line">        age: 18,</span><br><span class="line"><span class="actionscript">        <span class="class"><span class="keyword">class</span>: "1期",</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      count: 10,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="更新监测和key"><a href="#更新监测和key" class="headerlink" title="更新监测和key"></a>更新监测和key</h2><ul>
<li>v-for更新监测</li>
</ul>
<p>目标结构变化, 触发v-for的更新：</p>
<p>情况：</p>
<ol>
<li>数组翻转</li>
<li>数组截取</li>
<li>更新值</li>
</ol>
<p>对原数组产生变更就会导致v-for更新, 页面更新，反之返回了新的数组不会导致v-for更新，可以利用this.$set()对数据进行更新或者覆盖数组</p>
<ul>
<li>当数组改变后如何更新</li>
</ul>
<img src="/img/web/vue/3.png">

<p>循环出新的虚拟DOM结构, 和旧的虚拟DOM结构对比, 尝试复用标签就地更新内容</p>
<ul>
<li>真实DOM</li>
</ul>
<p>在document对象上, 渲染到浏览器上显示的标签</p>
<img src="/img/web/vue/4.png">

<ul>
<li>虚拟DOM</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"my_p"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">const</span> dom = &#123;</span></span><br><span class="line"><span class="actionscript">    type: <span class="string">'div'</span>,</span></span><br><span class="line"><span class="actionscript">    attributes: [&#123;id: <span class="string">'box'</span>&#125;],</span></span><br><span class="line">    children: &#123;</span><br><span class="line"><span class="actionscript">      type: <span class="string">'p'</span>,</span></span><br><span class="line"><span class="actionscript">      attributes: [&#123;<span class="class"><span class="keyword">class</span>: '<span class="title">my_p</span>'&#125;],</span></span></span><br><span class="line"><span class="actionscript">      text: <span class="string">'123'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src='/img/web/vue/5.png'>

<p>在内存中比较变化部分, 然后给真实DOM打补丁(更新)</p>
<ul>
<li>具体如何比较新旧虚拟DOM,如何更新：</li>
</ul>
<p>diff算法</p>
<ol>
<li>同级比较-根元素变化-整个dom树删除重建</li>
</ol>
<img src='/img/web/vue/6.png'>

<p>此时将整个DOM删除，重新创建</p>
<ol start="2">
<li>同级比较-根元素不变-属性改变更新属性</li>
</ol>
<img src='/img/web/vue/7.png'>

<p>此时仅改变同级元素额属性</p>
<ul>
<li>如果标签内子标签/内容改变, diff算法是如何对比的</li>
</ul>
<ol>
<li>无key</li>
</ol>
<p>从第二个往后更新内容 – 性能不高</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myUL"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"str in arr"</span>&gt;</span></span><br><span class="line">      &#123;&#123; str &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addFn"</span>&gt;</span>下标为1的位置新增一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src='/img/web/vue/8.png'>

<p>最大限度尝试就地修改/复用相同类型元素</p>
<img src='/img/web/vue/9.png'>

<p>四项更新</p>
<ol start="2">
<li>有key, 值为索引</li>
</ol>
<p>有key属性, 基于key的来比较新旧虚拟DOM, 移除key不存在元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myUL"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(str, index) in arr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      &#123;&#123; str &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addFn"</span>&gt;</span>下标为1的位置新增一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先产生新旧虚拟DOM, 根据key比较, 还是就地更新</p>
<img src='/img/web/vue/10.png'>

<p>四项更新</p>
<ol start="3">
<li>有key, 值唯一不重复的字符串或数字</li>
</ol>
<p>有key属性, 基于key的来比较新旧虚拟DOM, 移除key不存在元素</p>
<p>给每个数据换成对象, 准备id, 把id的值作为key</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myUL"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"obj in arr"</span> <span class="attr">:key</span>=<span class="string">"obj.id"</span>&gt;</span></span><br><span class="line">      &#123;&#123; obj.name &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addFn"</span>&gt;</span>下标为1的位置新增一个<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>先产生新旧虚拟DOM, 根据key比较</p>
<img src='/img/web/vue/11.png'>

<p>更新两项</p>
<hr>
<p>因此diff使用优先次序，key值为id -&gt; key值为index -&gt; 无key就地更新</p>
<hr>
<h2 id="动态class"><a href="#动态class" class="headerlink" title="动态class"></a>动态class</h2><ul>
<li>用v-bind给标签class设置动态的值</li>
</ul>
<p>语法 :class=”{类名: 布尔值}”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:class</span>=<span class="string">"&#123;red_str: bool&#125;"</span>&gt;</span>动态class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      bool: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.red_str</span>&#123;</span></span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>给标签动态设置style的值</li>
</ul>
<p>语法 :style=”{css属性名: 值}”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:style</span>=<span class="string">"&#123;backgroundColor: colorStr&#125;"</span>&gt;</span>动态style<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      colorStr: <span class="string">'red'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>例：（管理页）</p>
<p>用v-for配合默认数据, 把数据默认铺设到表格上显示</p>
<p>直接在标签上, 大于100价格, 动态设置red类名</p>
<p>布局用bootstrap</p>
<img src="/img/web/vue/12.png">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 顶部框模块 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>品牌管理<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 数据表格 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-bordered table-hover mt-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>资产名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>价格<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>创建时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"obj in list"</span> <span class="attr">:key</span>=<span class="string">"obj.id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 如果价格超过100，就有red这个类 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">:class</span>=<span class="string">"&#123;red: obj.price &gt; 100&#125;"</span>&gt;</span>&#123;&#123; obj.price &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.time &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> @<span class="attr">click</span>=<span class="string">"delFn(obj.id)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tfoot</span> <span class="attr">v-show</span>=<span class="string">"list.length === 0"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"5"</span> <span class="attr">style</span>=<span class="string">"text-align: center"</span>&gt;</span>暂无数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 添加资产 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">"资产名称"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">placeholder</span>=<span class="string">"价格"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-model.number</span>=<span class="string">"price"</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> @<span class="attr">click.prevent</span>=<span class="string">"addFn"</span>&gt;</span>添加资产<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">""</span>, <span class="comment">// 名称</span></span></span><br><span class="line"><span class="actionscript">      price: <span class="number">0</span>, <span class="comment">// 价格</span></span></span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">"外套"</span>, <span class="attr">price</span>: <span class="number">199</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2010-08-12'</span>)&#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">"裤子"</span>, <span class="attr">price</span>: <span class="number">34</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2013-09-01'</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">"鞋"</span>, <span class="attr">price</span>: <span class="number">25.4</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-11-22'</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">"头发"</span>, <span class="attr">price</span>: <span class="number">19900</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-12-12'</span>) &#125;</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addFn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.name.trim().length === <span class="number">0</span> || <span class="keyword">this</span>.price === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">"不能为空"</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span></span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> id = <span class="keyword">this</span>.list.length &gt; <span class="number">0</span> ? <span class="keyword">this</span>.list[<span class="keyword">this</span>.list.length - <span class="number">1</span>].id + <span class="number">1</span> : <span class="number">100</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.list.push(&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 当前数组最后一个对象的id+1作为新对象id值</span></span></span><br><span class="line">        id: id,</span><br><span class="line"><span class="actionscript">        name: <span class="keyword">this</span>.name,</span></span><br><span class="line"><span class="actionscript">        price: <span class="keyword">this</span>.price,</span></span><br><span class="line"><span class="javascript">        time: <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    delFn(id)&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 通过id找到这条数据在数组中下标</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> index = <span class="keyword">this</span>.list.findIndex(<span class="function"><span class="params">obj</span> =&gt;</span> obj.id === id)</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.list.splice(index, <span class="number">1</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> &gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.red</span>&#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul>
<li>过滤器定义使用</li>
</ul>
<p>转换格式, 过滤器就是一个函数, 传入值返回处理后的值</p>
<p>过滤器只能用在, 插值表达式和v-bind动态属性里</p>
<p>Vue中的过滤器场景</p>
<ol>
<li>字符串翻转, “输入hello, world”, 输出”dlrow ,olleh”</li>
<li>字母转大写, 输入”hello”, 输出”HELLO”</li>
</ol>
<p>语法:</p>
<ol>
<li>Vue.filter(“过滤器名”, (值) =&gt; {return “返回处理后的值”}) —&gt; 用于main.js中</li>
<li>filters: {过滤器名字: (值) =&gt; {return “返回处理后的值”} —&gt; 用于任意.vue文件中</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原来的样子: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用翻转过滤器: &#123;&#123; msg | reverse &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- reverse定义在main.js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"msg | toUp"</span>&gt;</span>鼠标长停<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">'Hello, Vue'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    toUp (val) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> val.toUpperCase()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>传参和多过滤器</li>
</ul>
<p>可同时使用多个过滤器, 或者给过滤器传参</p>
<p>语法:</p>
<ol>
<li>过滤器传参: vue变量 | 过滤器(实参)</li>
<li>多个过滤器: vue变量 | 过滤器1 | 过滤器2</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>原来的样子: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用翻转过滤器: &#123;&#123; msg | reverse('|') &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">:title</span>=<span class="string">"msg | toUp | reverse('|')"</span>&gt;</span>鼠标长停<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">'Hello, Vue'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  filters: &#123;</span><br><span class="line">    toUp (val) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> val.toUpperCase()</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（时间格式化）</p>
<p>时间用过滤器+moment模块, 格式化成YYYY-MM-DD 格式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.time | formatDate &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  <span class="comment">// 1. 下载moment模块</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 定义过滤器, 编写内部代码</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  filters: &#123; </span><br><span class="line">    formatDate (val)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> moment(val).format(<span class="string">'YYYY-MM-DD'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><ul>
<li>computed</li>
</ul>
<p>一个变量的值, 依赖另外一些数据计算而来的结果</p>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="string">"计算属性名"</span> ()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"值"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      a: 10,</span><br><span class="line">      b: 20</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript"> <span class="comment">// 注意: 计算属性和data属性都是变量-不能重名</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 注意2: 函数内变量变化, 会自动重新计算结果返回</span></span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    num()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缓存</li>
</ul>
<p>计算属性, 基于依赖项的值进行缓存，依赖的变量不变, 都直接从缓存取结果</p>
<img src="/img/web/vue/13.png">

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; reverseMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; reverseMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; reverseMessage &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; getMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; getMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; getMessage() &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg: <span class="string">"Hello, Vue"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    reverseMessage()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"计算属性执行了"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getMessage()&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"函数执行了"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.msg.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（总价和均价）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"background-color: #eee"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>统计:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>总价钱为: &#123;&#123; allPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>平均价: &#123;&#123; avgPrice &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 目标: 总价和均价显示</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 末尾补tr - 显示总价和均价</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">""</span>, <span class="comment">// 名称</span></span></span><br><span class="line"><span class="actionscript">      price: <span class="number">0</span>, <span class="comment">// 价格</span></span></span><br><span class="line">      list: [</span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">"外套"</span>, <span class="attr">price</span>: <span class="number">199</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2010-08-12'</span>)&#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">"裤子"</span>, <span class="attr">price</span>: <span class="number">34</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2013-09-01'</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">"鞋"</span>, <span class="attr">price</span>: <span class="number">25.4</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018-11-22'</span>) &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">"头发"</span>, <span class="attr">price</span>: <span class="number">19900</span>, <span class="attr">time</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-12-12'</span>) &#125;</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">      allPrice()&#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 3. 求总价</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.list.reduce(<span class="function">(<span class="params">sum, obj</span>) =&gt;</span> sum += obj.price, <span class="number">0</span>)</span></span><br><span class="line">      &#125;,</span><br><span class="line">      avgPrice()&#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 4. 求均价 - 保留2位小数</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> (<span class="keyword">this</span>.allPrice / <span class="keyword">this</span>.list.length).toFixed(<span class="number">2</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>完整写法</li>
</ul>
<p>计算属性也是变量</p>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="string">"属性名"</span>:&#123;</span><br><span class="line">    <span class="keyword">set</span>(值&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">get</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"值"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"full"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">        full: &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 给full赋值触发set方法</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">set</span>(val)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(val)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用full的值触发get方法</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">get</span>()&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="string">"无名氏"</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（小选影响全选）</p>
<p>小选框都选中(手选), 全选自动选中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>全选:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"isAll"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>反选<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(obj, index) in arr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"obj.c"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      arr: [</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"猪八戒"</span>,</span></span><br><span class="line"><span class="actionscript">          c: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"孙悟空"</span>,</span></span><br><span class="line"><span class="actionscript">          c: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"唐僧"</span>,</span></span><br><span class="line"><span class="actionscript">          c: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">"白龙马"</span>,</span></span><br><span class="line"><span class="actionscript">          c: <span class="literal">false</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">// 5. 计算属性-isAll</span></span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    isAll: &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">set</span>(val)&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 7. 全选框 - 选中状态(true/false)</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> obj.c = val)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="keyword">get</span>()&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 6. 统计小选框状态 -&gt;  全选状态</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// every口诀: 查找数组里"不符合"条件, 直接原地返回false</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.arr.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj.c === <span class="literal">true</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    btn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="comment">// 8. 让数组里对象的c属性取反再赋予回去</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.arr.forEach(<span class="function"><span class="params">obj</span> =&gt;</span> obj.c = !obj.c)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><ul>
<li>watch</li>
</ul>
<p>可以侦听data/computed属性值的改变</p>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">"被侦听的属性名"</span> (newVal, oldVal)&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">""</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// newVal: 当前最新值</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// oldVal: 上一刻值</span></span></span><br><span class="line">    name(newVal, oldVal)&#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(newVal, oldVal);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>深度侦听和立即执行</li>
</ul>
<p>侦听复杂类型, 或者立即执行侦听函数</p>
<p>语法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">      变量名: &#123;</span><br><span class="line">        handler(newVal, oldVal)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        deep: <span class="literal">true</span>, <span class="comment">// 深度侦听(对象里面层的值改变)</span></span><br><span class="line">        immediate: <span class="literal">true</span> <span class="comment">// 立即侦听(网页打开handler执行一次)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"user.name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"user.age"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      user: &#123;</span><br><span class="line"><span class="actionscript">        name: <span class="string">""</span>,</span></span><br><span class="line">        age: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      handler(newVal, oldVal)&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// user里的对象</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(newVal, oldVal);</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      immediate: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（数据缓存）</p>
<p>监听list变化, 同步到浏览器本地</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 目标: 侦听list改变 - 同步到本地localStorage里</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 侦听器-list</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">"moment"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">""</span>, <span class="comment">// 名称</span></span></span><br><span class="line"><span class="actionscript">      price: <span class="number">0</span>, <span class="comment">// 价格</span></span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 3. 本地取出缓存list</span></span></span><br><span class="line"><span class="javascript">      list: <span class="built_in">JSON</span>.parse(localStorage.getItem(<span class="string">'pList'</span>)) || [],</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    list: &#123;</span><br><span class="line">      handler()&#123;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 2. 存入本地</span></span></span><br><span class="line"><span class="javascript">        localStorage.setItem(<span class="string">'pList'</span>, <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.list))</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="actionscript">      deep: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><hr>
<h2 id="组件概念"><a href="#组件概念" class="headerlink" title="组件概念"></a>组件概念</h2><ol>
<li>组件是可复用的 Vue 实例, 封装标签, 样式和JS代码</li>
<li>组件化 ：封装的思想，把页面上 <code>可重用的部分</code> 封装为 <code>组件</code>，从而方便项目的 开发 和 维护</li>
<li>一个页面， 可以拆分成一个个组件，一个组件就是一个整体, 每个组件可以有自己独立的 结构 样式 和 行为(html, css和js)</li>
</ol>
<hr>
<h2 id="组件基础使用"><a href="#组件基础使用" class="headerlink" title="组件基础使用"></a>组件基础使用</h2><p>每个组件都是一个独立的个体, 代码里体现为一个独立的.vue文件</p>
<p>创建组件, 封装要复用的标签, 样式, JS代码</p>
<p>注册组件</p>
<ol>
<li>全局注册 – main.js中 </li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">"组件名"</span>, 组件对象)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>局部注册 – 某.vue文件内</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">'vue文件路径'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">"组件名"</span>: 组件对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用组件</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">组件名</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">组件名</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">组件名</span>&gt;</span><span class="tag">&lt;/<span class="name">组件名</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="scoped作用"><a href="#scoped作用" class="headerlink" title="scoped作用"></a>scoped作用</h2><p>准备: 当前组件内标签都被添加 data-v-hash值 的属性</p>
<p>获取: css选择器都被添加 [data-v-hash值] 的属性选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-0a305208</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span> <span class="attr">data-v-0a305208</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">data-v-0a305208</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">div</span><span class="selector-attr">[data-v-0a305208]</span> &#123;</span></span><br><span class="line">    background-color: red !important;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Vue组件创建和使用例子"><a href="#Vue组件创建和使用例子" class="headerlink" title="Vue组件创建和使用例子"></a>Vue组件创建和使用例子</h2><p>折叠面板-实现多个</p>
<p>于components文件夹创建Pannel.vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"isShow = !isShow"</span>&gt;</span></span><br><span class="line">        &#123;&#123; isShow ? "收起" : "展开" &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.title</span> &#123;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  align-items: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  padding: 0 1em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.title</span> <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line">  line-height: 2;</span><br><span class="line">  margin: 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">  padding: 0 1em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 鼠标改成手的形状 */</span></span></span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>于主vue文件使用创建的Pannel组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>案例：折叠面板<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span><span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span><span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span><span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 引入组件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Pannel <span class="keyword">from</span> <span class="string">'./components/Pannel'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Pannel: Pannel</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line">body &#123;</span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#app</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    margin: 20px auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    border: 4px solid blueviolet;</span><br><span class="line">    border-radius: 1em;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-shadow</span>: 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">    padding: 1em 2em 2em;</span><br><span class="line">    h3 &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<img src='/img/web/vue/14.png'>

<hr>
<h2 id="组件通信-父传子props"><a href="#组件通信-父传子props" class="headerlink" title="组件通信_父传子props"></a>组件通信_父传子props</h2><p>父组件 -&gt; 子组件 传值</p>
<p>首先明确父和子是谁, 在父引入子 (被引入的是子)</p>
<ol>
<li>父: App.vue</li>
<li>子: MyProduct.vue</li>
</ol>
<p>创建MyProduct.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题: &#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>价格: &#123;&#123; price &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; intro &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 子组件内, 定义变量, 准备接收, 然后使用变量</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'title'</span>, <span class="string">'price'</span>, <span class="string">'intro'</span>]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.my-product</span> &#123;</span></span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<p>引入组件, 注册组件, 使用组件, 传值进去</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">title</span>=<span class="string">"好吃的口水鸡"</span> <span class="attr">price</span>=<span class="string">"50"</span> <span class="attr">intro</span>=<span class="string">"开业大酬宾, 全场8折"</span>&gt;</span><span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">title</span>=<span class="string">"好可爱的可爱多"</span> <span class="attr">price</span>=<span class="string">"20"</span> <span class="attr">intro</span>=<span class="string">"老板不在家, 全场1折"</span>&gt;</span><span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">title</span>=<span class="string">"好贵的北京烤鸭"</span> <span class="attr">price</span>=<span class="string">"290"</span> <span class="attr">:intro</span>=<span class="string">"str"</span>&gt;</span><span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">'./components/MyProduct'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      str: <span class="string">"好贵啊, 快来啊, 好吃"</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// Product: Product // key和value变量名同名 - 简写</span></span></span><br><span class="line">    Product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件通信-父向子-配合循环"><a href="#组件通信-父向子-配合循环" class="headerlink" title="组件通信_父向子-配合循环"></a>组件通信_父向子-配合循环</h2><p>父组件 -&gt; 子组件 循环使用-传值</p>
<p>每次循环obj和组件都是独立的, 新的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyProduct</span> <span class="attr">v-for</span>=<span class="string">"obj in list"</span> <span class="attr">:key</span>=<span class="string">"obj.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">"obj.proname"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:price</span>=<span class="string">"obj.proprice"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:intro</span>=<span class="string">"obj.info"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">MyProduct</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyProduct <span class="keyword">from</span> <span class="string">'./components/MyProduct'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的棒棒糖"</span>,</span></span><br><span class="line">          proprice: 18.8,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"开业大酬宾, 全场8折"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的大鸡腿"</span>,</span></span><br><span class="line">          proprice: 34.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"好吃不腻, 快来买啊"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级无敌的冰激凌"</span>,</span></span><br><span class="line">          proprice: 14.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"炎热的夏天, 来个冰激凌了"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    <span class="comment">// MyProduct: MyProduct</span></span></span><br><span class="line">    MyProduct</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="单向数据流"><a href="#单向数据流" class="headerlink" title="单向数据流"></a>单向数据流</h2><p>从父到子的数据流向, 叫单向数据流</p>
<p>原因: 子组件修改, 不通知父级, 造成数据不一致性</p>
<p>Vue规定props里的变量, 本身是只读的</p>
<hr>
<h2 id="组件通信-子向父-自定义事件"><a href="#组件通信-子向父-自定义事件" class="headerlink" title="组件通信_子向父_自定义事件"></a>组件通信_子向父_自定义事件</h2><p>子组件触发父自定义事件方法</p>
<p>父 -&gt; 索引 -&gt; 子组件 (用于区分哪个子组件)</p>
<p>父组件内, 绑定自定义事件和事件处理函数</p>
<p>语法: @自定义事件名=”父methods里函数名”</p>
<p>子组件内, 恰当的时机, 触发父给我绑的自定义事件, 导致父methods里事件处理函数执行</p>
<p>MyProduct_sub.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题: &#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>价格: &#123;&#123; price &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; intro &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"subFn"</span>&gt;</span>宝刀-砍1元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 父文件在EventBus文件夹内</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">'../EventBus'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'index'</span>, <span class="string">'title'</span>, <span class="string">'price'</span>, <span class="string">'intro'</span>],</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'subprice'</span>, <span class="keyword">this</span>.index, <span class="number">1</span>) <span class="comment">// 子向父</span></span></span><br><span class="line"><span class="actionscript">      eventBus.$emit(<span class="string">"send"</span>, <span class="keyword">this</span>.index, <span class="number">1</span>) <span class="comment">// 跨组件</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.my-product</span> &#123;</span></span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MyProduct</span> <span class="attr">v-for</span>=<span class="string">"(obj, ind) in list"</span> <span class="attr">:key</span>=<span class="string">"obj.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:title</span>=<span class="string">"obj.proname"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:price</span>=<span class="string">"obj.proprice"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:intro</span>=<span class="string">"obj.info"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:index</span>=<span class="string">"ind"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">subprice</span>=<span class="string">"fn"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">MyProduct</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyProduct <span class="keyword">from</span> <span class="string">'./components/MyProduct_sub'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的棒棒糖"</span>,</span></span><br><span class="line">          proprice: 18.8,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"开业大酬宾, 全场8折"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的大鸡腿"</span>,</span></span><br><span class="line">          proprice: 34.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"好吃不腻, 快来买啊"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级无敌的冰激凌"</span>,</span></span><br><span class="line">          proprice: 14.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"炎热的夏天, 来个冰激凌了"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyProduct</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn(inde, price)&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.list[index].proprice &gt; <span class="number">1</span> &amp;&amp; (<span class="keyword">this</span>.list[index].proprice = (<span class="keyword">this</span>.list[index].proprice - price).toFixed(<span class="number">2</span>))</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件通信-EventBus"><a href="#组件通信-EventBus" class="headerlink" title="组件通信-EventBus"></a>组件通信-EventBus</h2><p>App.vue里引入MyProduct.vue和List.vue</p>
<img src='/img/web/vue/15.png'>

<p>常用于跨组件通信时使用</p>
<img src='/img/web/vue/16.png'>

<p>语法</p>
<ol>
<li>src/EventBus/index.js – 创建空白Vue对象并导出</li>
<li>在要接收值的组件(List.vue) eventBus.$on(‘事件名’, 函数体)</li>
<li>在要传递值的组件(MyProduct.vue) eventBus.$emit(‘事件名’, 值)</li>
</ol>
<p>App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow: hidden;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">MyProduct</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">"(obj, ind) in list"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">"obj.id"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">"obj.proname"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:price</span>=<span class="string">"obj.proprice"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:intro</span>=<span class="string">"obj.info"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:index</span>=<span class="string">"ind"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">subprice</span>=<span class="string">"fn"</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">MyProduct</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"float: left;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">List</span> <span class="attr">:arr</span>=<span class="string">"list"</span>&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> MyProduct <span class="keyword">from</span> <span class="string">"./components/MyProduct_sub"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">"./components/List"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: [</span><br><span class="line">        &#123;</span><br><span class="line">          id: 1,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的棒棒糖"</span>,</span></span><br><span class="line">          proprice: 18.8,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"开业大酬宾, 全场8折"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 2,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级好吃的大鸡腿"</span>,</span></span><br><span class="line">          proprice: 34.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"好吃不腻, 快来买啊"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          id: 3,</span><br><span class="line"><span class="actionscript">          proname: <span class="string">"超级无敌的冰激凌"</span>,</span></span><br><span class="line">          proprice: 14.2,</span><br><span class="line"><span class="actionscript">          info: <span class="string">"炎热的夏天, 来个冰激凌了"</span>,</span></span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyProduct,</span><br><span class="line">    List,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fn(index, price) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.list[index].proprice &gt; <span class="number">1</span> &amp;&amp;</span></span><br><span class="line"><span class="actionscript">        (<span class="keyword">this</span>.list[index].proprice = (<span class="keyword">this</span>.list[index].proprice - price).toFixed(<span class="number">2</span>));</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>MyProduct_sub.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题: &#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>价格: &#123;&#123; price &#125;&#125;元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; intro &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"subFn"</span>&gt;</span>宝刀-砍1元<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">'../EventBus'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">'index'</span>, <span class="string">'title'</span>, <span class="string">'price'</span>, <span class="string">'intro'</span>],</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    subFn()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'subprice'</span>, <span class="keyword">this</span>.index, <span class="number">1</span>) <span class="comment">// 子向父</span></span></span><br><span class="line"><span class="actionscript">      eventBus.$emit(<span class="string">"send"</span>, <span class="keyword">this</span>.index, <span class="number">1</span>) <span class="comment">// 跨组件</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.my-product</span> &#123;</span></span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>List.vue`</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"my-product"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in arr"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.proname &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.proprice &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 引入空白vue对象(EventBus)</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 接收方 - $on监听事件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">"../EventBus"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"arr"</span>],</span></span><br><span class="line"><span class="actionscript">  <span class="comment">// 3. 组件创建完毕, 监听send事件</span></span></span><br><span class="line">  created() &#123;</span><br><span class="line"><span class="actionscript">    eventBus.$on(<span class="string">"send"</span>, (index, price) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.arr[index].proprice &gt; <span class="number">1</span> &amp;&amp;</span></span><br><span class="line"><span class="actionscript">        (<span class="keyword">this</span>.arr[index].proprice = (<span class="keyword">this</span>.arr[index].proprice - price).toFixed(<span class="number">2</span>));</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.my-product</span> &#123;</span></span><br><span class="line">  width: 400px;</span><br><span class="line">  padding: 20px;</span><br><span class="line"><span class="css">  <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  margin: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>从 创建 到 销毁 的整个过程就是 – Vue实例的 - 生命周期</p>
<ul>
<li>钩子函数</li>
</ul>
<p>Vue 框架内置函数，随着组件的生命周期阶段，自动执行</p>
<p>作用: 特定的时间点，执行特定的操作</p>
<p>场景: 组件创建完毕后，可以在 created 生命周期函数中发起 Ajax 请求，从而初始化 data 数据</p>
<p>分类: 4大阶段8个方法</p>
<table>
<thead>
<tr>
<th>阶段</th>
<th>方法名</th>
<th>方法名</th>
</tr>
</thead>
<tbody><tr>
<td>初始化</td>
<td>beforeCreate</td>
<td>created</td>
</tr>
<tr>
<td>挂载</td>
<td>beforeMount</td>
<td>mounted</td>
</tr>
<tr>
<td>更新</td>
<td>beforeUpdate</td>
<td>uodated</td>
</tr>
<tr>
<td>销毁</td>
<td>beforeDestroy</td>
<td>destroyed</td>
</tr>
</tbody></table>
<ul>
<li>初始化</li>
</ul>
<ol>
<li>new Vue() – Vue实例化(组件也是一个小的Vue实例)</li>
<li>Init Events &amp; Lifecycle – 初始化事件和生命周期函数</li>
<li>beforeCreate – 生命周期钩子函数被执行</li>
<li>Init injections&amp;reactivity – Vue内部添加data和methods等</li>
<li>created – 生命周期钩子函数被执行, 实例创建</li>
<li>接下来是编译模板阶段 –开始分析</li>
<li>Has el option? – 是否有el选项 – 检查要挂到哪里（没有. 调用$mount()方法 - 有, 继续检查template选项）</li>
</ol>
<ul>
<li>挂载</li>
</ul>
<ol>
<li>template选项检查</li>
</ol>
<p>有 - 编译template返回render渲染函数</p>
<p>无 – 编译el选项对应标签作为template(要渲染的模板)</p>
<ol start="2">
<li>虚拟DOM挂载成真实DOM之前</li>
<li>beforeMount – 生命周期钩子函数被执行</li>
<li>Create … – 把虚拟DOM和渲染的数据一并挂到真实DOM上</li>
<li>真实DOM挂载完毕</li>
<li>mounted – 生命周期钩子函数被执行</li>
</ol>
<ul>
<li>更新</li>
</ul>
<ol>
<li>当data里数据改变, 更新DOM之前</li>
<li>beforeUpdate – 生命周期钩子函数被执行</li>
<li>Virtual DOM…… – 虚拟DOM重新渲染, 打补丁到真实DOM</li>
<li>updated – 生命周期钩子函数被执行</li>
<li>当有data数据改变 – 重复这个循环</li>
</ol>
<ul>
<li>销毁</li>
</ul>
<ol>
<li>当$destroy()被调用 – 比如组件DOM被移除(例v-if)</li>
<li>beforeDestroy – 生命周期钩子函数被执行</li>
<li>拆卸数据监视器、子组件和事件侦听器</li>
<li>实例销毁后, 最后触发一个钩子函数</li>
<li>destroyed – 生命周期钩子函数被执行</li>
</ol>
<hr>
<h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><p>axios 是一个专门用于发送ajax请求的库</p>
<p>特点</p>
<ol>
<li>支持客户端发送Ajax请求</li>
<li>支持服务端Node.js发送请求</li>
<li>支持Promise相关用法</li>
<li>支持请求和响应的拦截器功能</li>
<li>自动转换JSON数据</li>
</ol>
<p>axios 底层还是原生js实现, 内部通过Promise封装的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios (&#123;</span><br><span class="line">    method: <span class="string">'请求方式'</span>, <span class="comment">// get post</span></span><br><span class="line">    url: <span class="string">'请求地址'</span>,</span><br><span class="line">    data: &#123; <span class="comment">// 拼接到请求的参数，post请求的参数</span></span><br><span class="line">      xxx: xxx,</span><br><span class="line">    &#125;,</span><br><span class="line">    params: &#123; <span class="comment">// 拼接到请求的参数，get请求的参数</span></span><br><span class="line">      xxx: xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.data) <span class="comment">// 后台返回的结果</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err)  <span class="comment">// 后台报错返回</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>ajax：一种前端异步请求后端的技术</p>
<p>ajax原理：浏览器window接口的XMLHttpRequest</p>
<p>axios是什么：基于原生ajax+Promise技术封装通用于前后端的请求库</p>
<ul>
<li>获取数据</li>
</ul>
<p>获取所有图书信息</p>
<p>功能: 点击调用后台接口, 拿到所有数据 – 打印到控制台</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>1. 获取所有图书信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"getAllFn"</span>&gt;</span>点击-查看控制台<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">axios.defaults.baseURL = <span class="string">"http://123.57.109.30:3006"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      bName: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      bookObj: &#123; <span class="comment">// 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span></span></span><br><span class="line"><span class="actionscript">          bookname: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          author: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          publisher: <span class="string">""</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getAllFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line"><span class="actionscript">        url: <span class="string">"/api/getbooks"</span>,</span></span><br><span class="line"><span class="actionscript">        method: <span class="string">"GET"</span>, <span class="comment">// 默认就是GET方式请求, 可以省略不写</span></span></span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(res);</span></span><br><span class="line">      &#125;);</span><br><span class="line"><span class="actionscript">      <span class="comment">// axios()-原地得到Promise对象</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src='/img/web/vue/17.png'>

<ul>
<li>传参</li>
</ul>
<p>查询图书信息</p>
<p>功能: 点击调用后台接口, 查询用户想要的书籍信息 – 打印到控制台</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>2. 查询某本书籍信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入要查询 的书名"</span> <span class="attr">v-model</span>=<span class="string">"bName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"findFn"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  axios.defaults.baseURL = <span class="string">"http://123.57.109.30:3006"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      bName: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      bookObj: &#123; <span class="comment">// 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span></span></span><br><span class="line"><span class="actionscript">          bookname: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          author: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          publisher: <span class="string">""</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    findFn() &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line"><span class="actionscript">        url: <span class="string">"/api/getbooks"</span>,</span></span><br><span class="line"><span class="actionscript">        method: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="actionscript">        params: &#123; <span class="comment">// 都会axios最终拼接到url?后面</span></span></span><br><span class="line"><span class="actionscript">            bookname: <span class="keyword">this</span>.bName</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res);</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src='/img/web/vue/17.png'>

<ul>
<li>发布书籍</li>
</ul>
<p>新增图书信息</p>
<p>功能: 点击新增按钮, 把用户输入的书籍信息, 传递给后台 – 把结果打印在控制台</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>3. 新增图书信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"书名"</span> <span class="attr">v-model</span>=<span class="string">"bookObj.bookname"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"作者"</span> <span class="attr">v-model</span>=<span class="string">"bookObj.author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"出版社"</span> <span class="attr">v-model</span>=<span class="string">"bookObj.publisher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sendFn"</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">  axios.defaults.baseURL = <span class="string">"http://123.57.109.30:3006"</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      bName: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">      bookObj: &#123; <span class="comment">// 参数名提前和后台的参数名对上-发送请求就不用再次对接了</span></span></span><br><span class="line"><span class="actionscript">          bookname: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          author: <span class="string">""</span>,</span></span><br><span class="line"><span class="actionscript">          publisher: <span class="string">""</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendFn()&#123;</span><br><span class="line">       axios(&#123;</span><br><span class="line"><span class="actionscript">           url: <span class="string">"/api/addbook"</span>,</span></span><br><span class="line"><span class="actionscript">           method: <span class="string">"POST"</span>,</span></span><br><span class="line">           data: &#123;</span><br><span class="line"><span class="actionscript">               appkey: <span class="string">"7250d3eb-18e1-41bc-8bb2-11483665535a"</span>,</span></span><br><span class="line">               ...this.bookObj</span><br><span class="line"><span class="actionscript">               <span class="comment">//等同于下面</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    bookname: this.bookObj.bookname,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    author: this.bookObj.author,</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    publisher: this.bookObj.publisher</span></span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>axios全局配置</li>
</ul>
<p>配置基础地址, 统一管理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">"http://123.57.109.30:3006"</span></span><br></pre></td></tr></table></figure>

<p>修改请求url / 以后的请求都不用带前缀基地址了 – 运行时, axios的baseURL会自动拼在前</p>
<hr>
<h2 id="refs和-nextTick使用"><a href="#refs和-nextTick使用" class="headerlink" title="$refs和$nextTick使用"></a>$refs和$nextTick使用</h2><ul>
<li>获取DOM</li>
</ul>
<p>通过id或ref属性获取原生DOM</p>
<p>在mounted生命周期 – 2种方式获取原生DOM标签</p>
<ol>
<li>目标标签 – 添加id / ref</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">ref</span>=<span class="string">"myH1"</span> <span class="attr">id</span>=<span class="string">"h"</span>&gt;</span>1.ref/id获取原生DOM<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>恰当时机, 通过id / 通过ref属性 获取目标标签</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementById(<span class="string">"h"</span>));</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.$ref,myH1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>获取组件对象</li>
</ul>
<p>通过ref属性获取组件对象</p>
<ol>
<li>创建Demo组件, 写一个方法</li>
<li>App.vue使用Demo组件, 给ref属性-名字随意</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Demo</span> <span class="attr">ref</span>=<span class="string">"de"</span>&gt;</span><span class="tag">&lt;/<span class="name">Demo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>恰当时机, 通过ref属性 获取组件对象, 可调用组件对象里方法等</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  <span class="keyword">this</span>.$ref.de.fn()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>异步更新DOM</li>
</ul>
<p>点击改data, 获取原生DOM内容</p>
<ol>
<li>创建标签显示数据</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">"a"</span>&gt;</span>数字：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>点击+1，观察<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>点击+1, 马上获取原生DOM内容</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  btn()&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.a.innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>$nextTick使用</li>
</ul>
<p>等DOM更新后, 触发此方法里函数体执行</p>
<p>语法: this.$nextTick(函数体)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  btn()&#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"DOM更新后触发$nextTick函数"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.a.innerHTML);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：（输入框聚焦）</p>
<p>点击按钮自身隐藏, 出现输入框并马上处于激活状态</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"myInp"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"这是一个输入框"</span> <span class="attr">v-if</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> @<span class="attr">click</span>=<span class="string">"btn"</span>&gt;</span>点击我进行搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 1. 获取到输入框</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">// 2. 输入框调用事件方法focus()达到聚焦行为</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            isShow: <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">async</span> btn()&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">this</span>.isShow = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">this</span>.$refs.myInp.focus()</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="comment">// 扩展: await取代回调函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// $nextTick()原地返回Promise对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// await this.$nextTick()</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// this.$refs.myInp.focus()</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>组件name属性使用</li>
</ul>
<p>组件name可用作注册组件名字</p>
<ol>
<li>组件定义name属性和值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">"ComNameHaHa"</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>注册组件可用上面name的值</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ComNameHaHa</span>&gt;</span><span class="tag">&lt;/<span class="name">ComNameHaHa</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> ComName <span class="keyword">from</span> <span class="string">'./components/ComName'</span>;</span></span><br><span class="line"></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="actionscript">    [ComName.name]: ComName <span class="comment">// key是变量，要用 [] 括起来</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>多个组件使用同一个挂载点，并动态切换</p>
<ol>
<li>准备被切换的 - UserName.vue / UserInfo.vue 2个组件</li>
<li>引入到UseDynamic.vue注册</li>
<li>准备变量来承载要显示的”组件名”</li>
<li>设置挂载点&lt;component&gt;, 使用is属性来设置要显示哪个组件</li>
<li>点击按钮 – 修改comName变量里的”组件名”</li>
</ol>
<p>Userinfo.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>人生格言:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>个人简介:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserName.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>UserDynamic.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"comName = 'UserName'"</span>&gt;</span>账号密码填写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"comName = 'UserInfo'"</span>&gt;</span>个人信息填写<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>下面显示注册组件-动态切换:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid red;"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> UserName <span class="keyword">from</span> <span class="string">'../components/01/UserName'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">'../components/01/UserInfo'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            comName: <span class="string">"UserName"</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        UserName,</span><br><span class="line">        UserInfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件缓存"><a href="#组件缓存" class="headerlink" title="组件缓存"></a>组件缓存</h2><p>Vue内置的keep-alive组件 包起来要频繁切换的组件</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"comName"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件激活和非激活"><a href="#组件激活和非激活" class="headerlink" title="组件激活和非激活"></a>组件激活和非激活</h2><p>扩展2个新的生命周期方法</p>
<p>方法名：</p>
<ol>
<li>activated – 激活时触发</li>
<li>deactivated – 失去激活状态触发</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">activated() &#123;</span><br><span class="line">  console.log("UserName - activated");</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">deactivated() &#123;</span><br><span class="line">  console.log("UserName - deactivated");</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h2><p>通过 slot 标签, 让组件内可以接收不同的标签结构显示</p>
<p>给组件插入什么标签, 组件就显示什么标签</p>
<p>语法：</p>
<ol>
<li>组件内用&lt;slot&gt;&lt;/slot&gt;占位</li>
<li>使用组件时&lt;Pannel&gt;&lt;/Pannel&gt;夹着的地方, 传入标签替换slot</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>默认显示的内容<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/mm.gif"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span><span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Pannel <span class="keyword">from</span> <span class="string">"../components/03/Pannel"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Pannel,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>即主Vue文件内组件标签内部内容会替换组件Vue文件内整个slot标签包括其内容</p>
<p>当主Vue文件内组件未被展示，则默认显示组件Vue文件内slot的内容</p>
<hr>
<h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><p>一个组件内有2处以上需要外部传入标签的地方</p>
<p>语法：</p>
<ol>
<li>slot使用name属性区分名字</li>
<li>template配合v-slot:名字来分发对应标签</li>
</ol>
<p>v-slot:可以简化成#</p>
<p>主Vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>案例：折叠面板<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h4</span>&gt;</span>芙蓉楼送辛渐<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:content</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/mm.gif"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Pannel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">title</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>寒雨连江夜入吴,<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>平明送客楚山孤。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>洛阳亲友如相问，<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>一片冰心在玉壶。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> Pannel <span class="keyword">from</span> <span class="string">"../components/04/Pannel"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    Pannel,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>组件Vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 按钮标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"btn"</span> @<span class="attr">click</span>=<span class="string">"isShow = !isShow"</span>&gt;</span></span><br><span class="line">        &#123;&#123; isShow ? "收起" : "展开" &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 下拉内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><p>需求: 在使用此组件时, 不改主Vue文件源码, 是否使用defaultTwo值替换默认内容</p>
<p>使用插槽时, 想使用子组件内变量</p>
<ol>
<li>子组件, 在slot上绑定属性和子组件内的值</li>
<li>使用组件, 传入自定义标签, 用template和v-slot=”自定义变量名”</li>
<li>scope变量名自动绑定slot上所有属性和值 —— scope = {row: defaultObj}</li>
</ol>
<p>主Vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Pannel</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; scope.row.defaultTwo &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Pannel</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>组件Vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">v-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:row</span>=<span class="string">"defaultObj"</span>&gt;</span>&#123;&#123; defaultObj.defaultOne &#125;&#125;<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      isShow: <span class="literal">false</span>,</span></span><br><span class="line">      defaultObj: &#123;</span><br><span class="line"><span class="actionscript">        defaultOne: <span class="string">"无名氏"</span>,</span></span><br><span class="line"><span class="actionscript">        defaultTwo: <span class="string">"小传同学"</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>获取标签, 扩展额外的功能</p>
<p>全局注册语法：</p>
<figure class="highlight v"><table><tr><td class="code"><pre><span class="line">Vue<span class="variable">.directive</span>(<span class="string">"指令名"</span>. &#123;</span><br><span class="line">  <span class="string">"inserted"</span> (el) &#123;</span><br><span class="line">    <span class="comment">// 对el标签额外拓展功能</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>局部注册语法：</p>
<figure class="highlight v"><table><tr><td class="code"><pre><span class="line">directives: &#123;</span><br><span class="line">  <span class="string">"指令名"</span>: &#123;</span><br><span class="line">    inserted(el)&#123;</span><br><span class="line">      <span class="comment">// 对el进行操作</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="传值"><a href="#传值" class="headerlink" title="传值"></a>传值</h2><p>定义color指令-传入一个颜色, 给标签设置文字颜色</p>
<p>在标签上使用 v-color=”‘red’”</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-focus</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">"colorStr"</span>&gt;</span>修改文字颜色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            colorStr: <span class="string">'red'</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">        focus: &#123;</span><br><span class="line">            inserted(el)&#123;</span><br><span class="line">                el.focus()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="Vue路由简介和基础使用"><a href="#Vue路由简介和基础使用" class="headerlink" title="Vue路由简介和基础使用"></a>Vue路由简介和基础使用</h2><ol>
<li>设备使用：设备与ip之间的映射关系</li>
<li>nodejs使用：接口和服务之间的映射关系</li>
<li>前端路由使用：路径和组件的映射关系</li>
</ol>
<p>路由是一种映射关系</p>
<p>单页面应用(SPA): 所有功能在一个html页面上实现</p>
<p>前端路由作用: 实现业务场景切换</p>
<p>优点：</p>
<ol>
<li>整体不刷新页面，用户体验更好</li>
<li>数据传递容易, 开发效率高</li>
</ol>
<p>缺点：</p>
<ol>
<li>开发成本高(需要学习专门知识)</li>
<li>首次加载会比较慢一点。不利于seo</li>
</ol>
<hr>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>vue-router本质是一个第三方包</p>
<p>组件分：</p>
<ol>
<li>页面组件</li>
<li>复用组件</li>
</ol>
<p>src/views文件夹</p>
<ul>
<li>页面组件 - 页面展示 - 配合路由用</li>
</ul>
<p>src/components文件夹</p>
<ul>
<li>复用组件 - 展示数据 - 常用于复用</li>
</ul>
<p>操作于main.js：</p>
<p>引入：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br></pre></td></tr></table></figure>

<p>注册全局组件：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure>

<p>规则数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/"</span>, <span class="comment">// 默认hash值路径</span></span><br><span class="line">    redirect: <span class="string">"/find"</span> <span class="comment">// 重定向到/find</span></span><br><span class="line">    <span class="comment">// 浏览器url中#后的路径被改变成/find-重新匹配规则</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/find"</span>,</span><br><span class="line">    name: <span class="string">"Find"</span>,</span><br><span class="line">    component: Find,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"recommend"</span>,</span><br><span class="line">        component: Recommend</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"ranking"</span>,</span><br><span class="line">        component: Ranking</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">"songlist"</span>,</span><br><span class="line">        component: SongList</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/my"</span>,</span><br><span class="line">    name: <span class="string">"My"</span>,</span><br><span class="line">    component: My</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/part"</span>,</span><br><span class="line">    name: <span class="string">"Part"</span>,</span><br><span class="line">    component: Part</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"/part/:username"</span>, <span class="comment">// 有:的路径代表要接收具体的值</span></span><br><span class="line">    component: Part</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404在最后(规则是从前往后逐个比较path)</span></span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">"*"</span>,</span><br><span class="line">    component: NotFound</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>生成路由对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,<span class="comment">// routes是固定key(传入规则数组)</span></span><br><span class="line">  <span class="comment">// mode: "history" // 默认不写是"hash"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="声明式导航"><a href="#声明式导航" class="headerlink" title="声明式导航"></a>声明式导航</h2><p>可用组件router-link来替代a标签</p>
<ol>
<li>vue-router提供了一个全局组件 router-link</li>
<li>router-link实质上最终会渲染成a链接 to属性等价于提供 href属性(to无需#)</li>
<li>router-link提供了声明式导航高亮的功能(自带类名)</li>
</ol>
<ul>
<li>跳转传参</li>
</ul>
<p>在跳转路由时, 可以给路由对应的组件内传值</p>
<p>在router-link上的to属性传值, 语法格式如下</p>
<ol>
<li>/path?参数名=值</li>
<li>/path/值 – 需要路由对象提前配置 path: “/path/参数名”</li>
</ol>
<p>对应页面组件接收传递过来的值</p>
<ol>
<li>$route.query.参数名</li>
<li>$route.params.参数名</li>
</ol>
<p>主vue文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/part?name=小传"</span>&gt;</span>朋友-小传<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/part/小智"</span>&gt;</span>朋友-小智<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">"/part/:username"</span>, <span class="comment">// 有:的路径代表要接收具体的值</span></span><br><span class="line">    component: Part</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="重定向和模式"><a href="#重定向和模式" class="headerlink" title="重定向和模式"></a>重定向和模式</h2><ul>
<li>重定向</li>
</ul>
<p>匹配path后, 强制跳转path路径</p>
<ol>
<li>网页打开url默认hash值是/路径</li>
<li>redirect是设置要重定向到哪个路由路径</li>
</ol>
<p>默认路由：</p>
<p>规则里定义path: ‘/‘</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">"/"</span>, <span class="comment">// 默认hash值路径</span></span><br><span class="line">  redirect: <span class="string">"/find"</span> <span class="comment">// 重定向到/find</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>404</li>
</ul>
<p>找不到路径给出提示页面</p>
<p>路由最后, path匹配*(任意路径) – 前面不匹配就命中最后这个</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">"*"</span>,</span><br><span class="line">  component: NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>模式设置</li>
</ul>
<p>修改路由在地址栏的模式</p>
<ol>
<li>hash路由例如: <a href="http://localhost:8080/#/home" target="_blank" rel="noopener">http://localhost:8080/#/home</a></li>
<li>history路由例如: <a href="http://localhost:8080/home" target="_blank" rel="noopener">http://localhost:8080/home</a></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,<span class="comment">// routes是固定key(传入规则数组)</span></span><br><span class="line">  mode: <span class="string">"history"</span> <span class="comment">// 默认不写是"hash"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（单链表定义与查找）</title>
    <url>/2020/05/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A1%EF%BC%89/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="链式存储结构定义"><a href="#链式存储结构定义" class="headerlink" title="链式存储结构定义"></a>链式存储结构定义</h2><hr>
<ul>
<li>特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以存在内存中未被占用的任意位置（随意位置插入）；</li>
<li>链式存储结构需要存储数据元素信息以外，还要存储后继元素存储地址（指针）；</li>
<li>存储数据元素信息的域称为数据域，存储直接后继位置的域称为指针域。这两部分信息组成数据元素称为存储映像，称为结点（Node）；</li>
<li>每个结点只包含一个指针域，因此叫单链表；<img src="/img/数据结构（简述②）/图1.png">

</li>
</ul>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><hr>
<ul>
<li>链表第一个结点存储位置叫头指针，最后一个结点指针为空（NULL）<h3 id="头指针"><a href="#头指针" class="headerlink" title="头指针"></a>头指针</h3></li>
<li>头指针是指链表指向第一个结点的指针；</li>
<li>头指针具有标识作用，所以常用头指针冠以链表名；</li>
<li>无论链表是否为空，头指针都不为空；</li>
<li>头指针是链表的必须要素。</li>
</ul>
<h3 id="头结点"><a href="#头结点" class="headerlink" title="头结点"></a>头结点</h3><ul>
<li>头结点是为了操作的统一和方便而设立的，放在第一个元素的结点之前，其数据域一般无意义（可用来存放链表长度）；</li>
<li>有了头结点，对在第一个元素结点前插入结点和删除第一结点起操作与其他结点的统一；</li>
<li>头结点不一定是链表的必须要素。</li>
</ul>
<p><b>单链表图例：</b><br><img src="/img/数据结构（简述②）/图2.png"><br><b>空链表图例：</b><br><img src="/img/数据结构（简述②）/图3.png"></p>
<p><b>代码示例：</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct Node</span><br><span class="line">&#123;</span><br><span class="line">	ElemType data;		&#x2F;&#x2F;数据域</span><br><span class="line">	struct Node* next;		&#x2F;&#x2F;指针域</span><br><span class="line">&#125;Node;</span><br><span class="line">typedef struct Node* LinkList;</span><br></pre></td></tr></table></figure>
<ul>
<li>举例p为指向线性表第i个元素的指针，则该结点ai的数据域我们可用p-&gt;data的的值表示一个数据元素，结点ai的指针域可用p-&gt;next来表示，其值为一个指针。</li>
<li>p-&gt;next指向第i+1个元素，即指向ai+1的指针</li>
<li>若p-&gt;data = ai，则p-&gt;next-&gt;data = ai+1</li>
</ul>
<h3 id="获取链表第i个数据的算法思路："><a href="#获取链表第i个数据的算法思路：" class="headerlink" title="获取链表第i个数据的算法思路："></a>获取链表第i个数据的算法思路：</h3><ul>
<li>声明一个结点p指向链表的第一个结点，初始化j从1开始；</li>
<li>当j&lt;i时，就遍历链表，让p的指针向后移动，不断指向下下一结点，j++；</li>
<li>若到链表末尾p为空，则第i个元素不存在；</li>
<li>否则查找成功，返回结点p的数据。</li>
</ul>
<p><b>获取第i个数据的算法代码片段：</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ERROR 0</span><br><span class="line">#define OK 1</span><br><span class="line"></span><br><span class="line">Status GetElem(LinkList L, int i, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">	int j;</span><br><span class="line">	LinkList p;		&#x2F;&#x2F;通过上方的代码示例可知此处的p是一个指针，LinkList是Node*的别名</span><br><span class="line"></span><br><span class="line">	p &#x3D; L-&gt;next;	&#x2F;&#x2F;p指针指向链表L的第一个结点</span><br><span class="line">	j &#x3D; 1;		&#x2F;&#x2F;“当前位置计数器”j初始化为1</span><br><span class="line"></span><br><span class="line">	while(p &amp;&amp; j&lt;i)		&#x2F;&#x2F;循环条件p不为空且j小于获取位置i</span><br><span class="line">	&#123;</span><br><span class="line">		p &#x3D; p-&gt;next;	&#x2F;&#x2F;p指向下一个结点，即遍历</span><br><span class="line">		++j;	&#x2F;&#x2F;位置计数器+1</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	if(!p || j&gt;i)</span><br><span class="line">	&#x2F;*上方循环结束后，有可能是因为直接不满足循环条</span><br><span class="line">    件而非找到需获取元素，因此当p为空或者j大于i的时</span><br><span class="line">    候返回错误*&#x2F;</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	*e &#x3D; p-&gt;data;	&#x2F;&#x2F;获取到元素e的值给p的数据域</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>单链表的获取难，增删简单；</li>
<li>顺序表的获取简单，增删难。</li>
</ul>
<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构线性表5</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>栈的链式存储</title>
    <url>/2020/06/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B014%EF%BC%89/</url>
    <content><![CDATA[<img src="/img/数据结构（简述14）/图1.png">
栈链，即把单链表的头指针与栈顶指针相结合，效果如图。   

<p>创建栈链的代码片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct StackNode</span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;      &#x2F;&#x2F;存放栈的数据</span><br><span class="line">    struct StackNode *next;</span><br><span class="line">&#125;StackNode, *LinkStackPtr;</span><br><span class="line">typedef struct LinkStack</span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr top;   &#x2F;&#x2F;top指针</span><br><span class="line">    int count;      &#x2F;&#x2F;栈元素计数器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="进栈操作"><a href="#进栈操作" class="headerlink" title="进栈操作"></a>进栈操作</h2><hr>
<p>设元素值为e的新结点p。<br>Push操作代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Status Push(LinkStack *s, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr p &#x3D;(LinkStackPtr)malloc(sizeof(StackNode));</span><br><span class="line">    p-&gt;data &#x3D; e;</span><br><span class="line">    p-&gt;next &#x3D; s-&gt;top;</span><br><span class="line">    s-&gt;top &#x3D; p;</span><br><span class="line">    &#x2F;*简单说就是新结点的next指向旧的结点，然后再让top指向新结点*&#x2F;</span><br><span class="line">    s-&gt;count++;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="出栈操作"><a href="#出栈操作" class="headerlink" title="出栈操作"></a>出栈操作</h2><hr>
<p>设变量p存储要删除的栈顶结点，将栈顶指针下移一位，再释放p。<br>Pop操作代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Status Pop(LinkStack *s, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">    LinkStackPtr p;</span><br><span class="line">    if(StackEmpty(*s))  &#x2F;&#x2F;判断栈是否为空栈。</span><br><span class="line">        return ERROR;</span><br><span class="line">    *e &#x3D; s-&gt;top-&gt;data;  &#x2F;&#x2F;获取要删除的元素数据</span><br><span class="line">    p &#x3D; s-&gt;top;     &#x2F;&#x2F;存放要删除的元素</span><br><span class="line">    s-&gt;top &#x3D; s-&gt;top-&gt;next;  &#x2F;&#x2F;令栈顶指针指向后一个结点</span><br><span class="line">    free(p);    &#x2F;&#x2F;释放要删除的元素</span><br><span class="line">    s-&gt;count--;</span><br><span class="line">    return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看出了，在链栈中next并非指向最新的指针而是指向较旧的指针。</p>
<h1 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h1><hr>
<p>针对(1-2)*(4+5)这个表达式，用逆波兰表示法则为：1 2 - 4 5 + *</p>
<p>其原理为：数字1和2进栈，遇到减号运算则弹出两个元素进行运算再把结果入栈。<br>如图：<br><img src="/img/数据结构（简述14）/图2.png"></p>
<p>4和5再入栈，再入加号运算符，4和5弹出进行相加，结果入栈。<br>如图：<br><img src="/img/数据结构（简述14）/图3.png"></p>
<p>最后遇到乘法运算符，弹出9和-1，进行运算，得到结果，无数据不压栈。<br>如图：<br><img src="/img/数据结构（简述14）/图4.png"></p>
<p>逆波兰计算器源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">#define STACK_INIT_SIZE 20</span><br><span class="line">#define STACKINCREMENT 10</span><br><span class="line">#define MAXBUFFER 10</span><br><span class="line"></span><br><span class="line">typedef double ElemType;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;建栈</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">	ElemType* base;</span><br><span class="line">	ElemType* top;</span><br><span class="line">	int stackSize;</span><br><span class="line">&#125;sqStack;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化栈</span><br><span class="line">void InitStack(sqStack* s)</span><br><span class="line">&#123;</span><br><span class="line">	s-&gt;base &#x3D; (ElemType*)malloc(STACK_INIT_SIZE * sizeof(ElemType));</span><br><span class="line">	if (!s-&gt;base)</span><br><span class="line">		exit(0);</span><br><span class="line"></span><br><span class="line">	s-&gt;top &#x3D; s-&gt;base;</span><br><span class="line">	s-&gt;stackSize &#x3D; STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">void Push(sqStack* s, ElemType e)</span><br><span class="line">&#123;</span><br><span class="line">	if (s-&gt;top - s-&gt;base &gt;&#x3D; s-&gt;stackSize)</span><br><span class="line">	&#123;</span><br><span class="line">		s-&gt;base &#x3D; (ElemType*)realloc(s-&gt;base, (s-&gt;stackSize + STACKINCREMENT) * sizeof(ElemType));</span><br><span class="line">		if (!s-&gt;base)</span><br><span class="line">			exit(0);</span><br><span class="line"></span><br><span class="line">		s-&gt;top &#x3D; s-&gt;base + s-&gt;stackSize;</span><br><span class="line">		s-&gt;stackSize &#x3D; s-&gt;stackSize + STACKINCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*(s-&gt;top) &#x3D; e;		&#x2F;&#x2F;存放数据</span><br><span class="line">	s-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出栈</span><br><span class="line">void Pop(sqStack* s, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">	if (s-&gt;top &#x3D;&#x3D; s-&gt;base)</span><br><span class="line">		return;</span><br><span class="line">	*e &#x3D; *--(s-&gt;top);	&#x2F;&#x2F;将栈顶指针弹出并修改</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;计算栈长</span><br><span class="line">int StackLen(sqStack* s)</span><br><span class="line">&#123;</span><br><span class="line">	return (s-&gt;top - s-&gt;base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	sqStack s;</span><br><span class="line">	char c;</span><br><span class="line">	double d, e;</span><br><span class="line">	int i &#x3D; 0;</span><br><span class="line">	char str[MAXBUFFER];	&#x2F;&#x2F;最大缓冲区</span><br><span class="line"></span><br><span class="line">	InitStack(&amp;s);</span><br><span class="line"></span><br><span class="line">	printf(&quot;请以逆波兰表达式的方式输入待计算数据，以#表示输入结束：\n&quot;);</span><br><span class="line">	scanf_s(&quot;%c&quot;, &amp;c);</span><br><span class="line"></span><br><span class="line">	while (c !&#x3D; &#39;#&#39;)</span><br><span class="line">	&#123;</span><br><span class="line">		while (isdigit(c) || c &#x3D;&#x3D; &#39;.&#39;)		&#x2F;&#x2F;isdigit函数判断c是否为数字</span><br><span class="line">		&#123;</span><br><span class="line">			str[i++] &#x3D; c;</span><br><span class="line">			str[i] &#x3D; &#39;\0&#39;;</span><br><span class="line">			if(i&gt;10)</span><br><span class="line">			&#123;</span><br><span class="line">				printf(&quot;单次输入过大！\n&quot;);</span><br><span class="line">				return -1;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			scanf_s(&quot;%c&quot;, &amp;c);</span><br><span class="line">			if (c &#x3D;&#x3D; &#39; &#39;)</span><br><span class="line">			&#123;</span><br><span class="line">				d &#x3D; atof(str);      &#x2F;&#x2F;字符转化浮点</span><br><span class="line">				Push(&amp;s, d);</span><br><span class="line">				i &#x3D; 0;</span><br><span class="line">				break;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		switch (c)</span><br><span class="line">		&#123;</span><br><span class="line">		case &#39;+&#39;:</span><br><span class="line">			Pop(&amp;s, &amp;e);</span><br><span class="line">			Pop(&amp;s, &amp;d);</span><br><span class="line">			Push(&amp;s, d + e);</span><br><span class="line">			break;</span><br><span class="line">		case &#39;-&#39;:</span><br><span class="line">			Pop(&amp;s, &amp;e);</span><br><span class="line">			Pop(&amp;s, &amp;d);</span><br><span class="line">			Push(&amp;s, d - e);</span><br><span class="line">			break;</span><br><span class="line">		case &#39;*&#39;:</span><br><span class="line">			Pop(&amp;s, &amp;e);</span><br><span class="line">			Pop(&amp;s, &amp;d);</span><br><span class="line">			Push(&amp;s, d * e);</span><br><span class="line">			break;</span><br><span class="line">		case &#39;&#x2F;&#39;:</span><br><span class="line">			Pop(&amp;s, &amp;e);</span><br><span class="line">			Pop(&amp;s, &amp;d);</span><br><span class="line">			if (e !&#x3D; 0)</span><br><span class="line">				Push(&amp;s, d &#x2F; e);</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				printf(&quot;除数为0，错误！\n&quot;);</span><br><span class="line">				return -1;</span><br><span class="line">			&#125;</span><br><span class="line">			break;</span><br><span class="line"></span><br><span class="line">		default:</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		scanf_s(&quot;%c&quot;, &amp;c);</span><br><span class="line">	&#125;</span><br><span class="line">	Pop(&amp;s, &amp;d);</span><br><span class="line">	printf(&quot;\n最终结果为：%f\n&quot;, d);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>约瑟夫问题</title>
    <url>/2020/06/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A7%EF%BC%89/</url>
    <content><![CDATA[<p>约瑟夫问题又称为丢手绢问题。<br>有一典故为著名犹太历史学家Josephus在罗马人占领乔塔帕特后，他和他的朋友与39个犹太人躲入洞中，他们决定宁死不屈，因此决定41人围成一个圆，从头开始报数，没报到第三个人就必须自杀，然后下一个人重新报数。<br>其中有个漏洞为最后会剩下两个人，无法数到三，因此这两个人不会自杀。于是Josephus把自己和他的朋友安排在16和31的位置，逃过了这场死亡游戏。<br><img src="/img/数据结构（简述⑧）/图1.png"><br>约瑟夫问题模拟代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdilb.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">	int data;</span><br><span class="line">	struct node *next;</span><br><span class="line">&#125;node;		&#x2F;&#x2F;结点结构体</span><br><span class="line"></span><br><span class="line">node *create(int n)		&#x2F;&#x2F;n为该表内元素数量</span><br><span class="line">&#123;</span><br><span class="line">	node *p &#x3D; NULL, *head;		&#x2F;&#x2F;初始化p为空和头结点</span><br><span class="line">	head &#x3D; (node*)malloc(sizeof(node));		&#x2F;&#x2F;给头结点分配空间</span><br><span class="line">	p &#x3D; head;	&#x2F;&#x2F;先令p为头结点</span><br><span class="line">	node *s;	&#x2F;&#x2F;工具指针</span><br><span class="line">	int i &#x3D; 1;</span><br><span class="line"></span><br><span class="line">	if(0 !&#x3D; n)		&#x2F;&#x2F;如果n不为0，即非空</span><br><span class="line">	&#123;</span><br><span class="line">		while(i &lt;&#x3D; n)</span><br><span class="line">		&#123;</span><br><span class="line">			s &#x3D; (node *)malloc(sizeof(node));</span><br><span class="line">			s-&gt;data &#x3D; i++;	&#x2F;&#x2F;先把值给s然后i自增</span><br><span class="line">			p-&gt;next &#x3D; s;</span><br><span class="line">			p &#x3D; s;</span><br><span class="line">		&#125;</span><br><span class="line">		s-&gt;next &#x3D; head-&gt;next;</span><br><span class="line">	&#125;	&#x2F;&#x2F;整体是给约瑟夫环元素赋值</span><br><span class="line"></span><br><span class="line">	free(head);		&#x2F;&#x2F;释放头结点，实现链表循环</span><br><span class="line"></span><br><span class="line">	return s-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int n &#x3D; 41;</span><br><span class="line">	int m &#x3D; 3;</span><br><span class="line">	node *p&#x3D;create(n);</span><br><span class="line">	node *temp;</span><br><span class="line"></span><br><span class="line">	m %&#x3D; n;		&#x2F;&#x2F;得到最后剩下几个元素</span><br><span class="line"></span><br><span class="line">	while(p !&#x3D; p-&gt;next)		&#x2F;&#x2F;判断非空</span><br><span class="line">	&#123;</span><br><span class="line">		for(i &#x3D; 1;i &lt; m-1; i++)		</span><br><span class="line">		&#123;</span><br><span class="line">			p &#x3D; p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout&lt;&lt;p-&gt;next-&gt;data&lt;&lt;&quot;-&gt;&quot;;		&#x2F;&#x2F;每m个元素点名一次</span><br><span class="line">		temp &#x3D; p-&gt;next;</span><br><span class="line">		p-&gt;next &#x3D; temp-&gt;next;		&#x2F;&#x2F;p指向被点名元素下一个元素</span><br><span class="line"></span><br><span class="line">		free(temp);		&#x2F;&#x2F;释放被点名元素</span><br><span class="line"></span><br><span class="line">		p &#x3D; p-&gt;next;	&#x2F;&#x2F;p为下一个元素</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;p-&gt;data&lt;&lt;endl;	&#x2F;&#x2F;输出最后剩余</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>循环链表</title>
    <url>/2020/05/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A6%EF%BC%89/</url>
    <content><![CDATA[<h2 id="该章节内容讲解主要在代码内以注释形式存在"><a href="#该章节内容讲解主要在代码内以注释形式存在" class="headerlink" title="该章节内容讲解主要在代码内以注释形式存在"></a><font size="6"><font color="red"><b>该章节内容讲解主要在代码内以注释形式存在</b></font></font></h2><h1 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h1><hr>
<p>简单来说循环链表就是单链表的尾指针不指向NULL，而是指向第一个结点。<br><img src="/img/数据结构（简述⑦）/图1.png"><br>循环链表不一定有头结点；<br>循环链表和单链表差异主要在判断为空的条件：<br>单链表判断为空是判断head-&gt;next = NULL;<br>循环链表判断为空是判断head-&gt;next = head;  </p>
<p>循环链表开始结点定义不以head来定义而是尾指针rear组成rear-&gt;next-&gt;next来定义</p>
<p><b>链表存储结构定义代码:</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct CLinkList</span><br><span class="line">&#123;</span><br><span class="line">	int data;</span><br><span class="line">	struct CLinkList *next;</span><br><span class="line">&#125;node;</span><br></pre></td></tr></table></figure>

<p><b>循环链表插入代码:</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*参数：链表的第一个结点，插入的位置*&#x2F;</span><br><span class="line">void ds_insert(node **pNode, int i)</span><br><span class="line">&#123;</span><br><span class="line">	node *temp;</span><br><span class="line">	node *target;</span><br><span class="line">	node *p;	&#x2F;&#x2F;中介</span><br><span class="line">	int item;</span><br><span class="line">	int j &#x3D; 1;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;&quot;请输入要插入的结点的值：&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;&amp;item;</span><br><span class="line"></span><br><span class="line">	if(i &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;	&#x2F;&#x2F;新插入的结点作为第一个结点</span><br><span class="line">		temp &#x3D; (node *)malloc(sizeof(struct CLinkList));</span><br><span class="line"></span><br><span class="line">		if(!temp)	&#x2F;&#x2F;错误输入，错误退出</span><br><span class="line">			exit(0);</span><br><span class="line"></span><br><span class="line">		temp-&gt;data &#x3D; item;</span><br><span class="line"></span><br><span class="line">		&#x2F;*寻找到最后一个结点*&#x2F;</span><br><span class="line">		for(target &#x3D; (*pNode); target-&gt;next !&#x3D; (*pNode); target &#x3D; target-&gt;next)</span><br><span class="line">			;</span><br><span class="line"></span><br><span class="line">		&#x2F;*temp指向第一个结点组成循环结构；</span><br><span class="line">		target指向temp是表明最后一个结点；</span><br><span class="line">		*pNode指向temp是表明第一个结点</span><br><span class="line">		以下操作都是相当于给temp上头衔*&#x2F;</span><br><span class="line"></span><br><span class="line">		temp-&gt;next &#x3D; (*pNode);	</span><br><span class="line">		target-&gt;next &#x3D; temp;</span><br><span class="line">		*pNode &#x3D; temp;</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		target &#x3D; *pNode;	&#x2F;&#x2F;先让target为第一个结点</span><br><span class="line"></span><br><span class="line">		for( ; j &lt; (i-1); ++j)		&#x2F;&#x2F;要插入第几个位置，target就指向第几个结点</span><br><span class="line">		&#123;</span><br><span class="line">			target &#x3D; target-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		temp &#x3D; (node *)malloc(sizeof(struct CLinkList));</span><br><span class="line"></span><br><span class="line">		if(!temp)</span><br><span class="line">			exit(0);</span><br><span class="line">	</span><br><span class="line">		&#x2F;*将要插入的值给temp的数据域；</span><br><span class="line">		中介p先为被插入的结点位置；</span><br><span class="line">		之前target指向被插入位置的结点这里就是让temp替代其位置；</span><br><span class="line">		temp指向p，在刚才p已经存储了旧的被插入结点，这里temp</span><br><span class="line">		再指向p就是将原本位置的结点后移*&#x2F;</span><br><span class="line"></span><br><span class="line">		temp-&gt;data &#x3D; item;</span><br><span class="line">		p &#x3D; target-&gt;next;</span><br><span class="line">		target-&gt;next &#x3D; temp;</span><br><span class="line">		temp-&gt;next &#x3D; p;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b>初始化循环链表代码:</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void ds_init(node **pNode)	&#x2F;&#x2F;**pNode用于表示链表上的一个元素，*pNode假设为第一个结点</span><br><span class="line">&#123;</span><br><span class="line">	int item;</span><br><span class="line">	node *temp;</span><br><span class="line">	node *target;</span><br><span class="line"></span><br><span class="line">	cout&lt;&lt;&quot;输入节点的值，最后输入0完成初始化：&quot;&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	while(1)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;&amp;item;</span><br><span class="line">		fflush(stdin);	&#x2F;&#x2F;清除缓冲区</span><br><span class="line"></span><br><span class="line">		if(item &#x3D;&#x3D; 0)</span><br><span class="line">			return;</span><br><span class="line"></span><br><span class="line">		if((*pNode) &#x3D;&#x3D; NULL)	&#x2F;&#x2F;判断条件可以看为head指向NULL</span><br><span class="line">		&#123;&#x2F;*循环链表中只有一个结点*&#x2F;</span><br><span class="line">			*pNode &#x3D; (node*)malloc(sizeof(struct CLinkList));</span><br><span class="line"></span><br><span class="line">			if(!(*pNode))	&#x2F;&#x2F;若分配空间失败，错误退出</span><br><span class="line">				exit(0);</span><br><span class="line"></span><br><span class="line">			(*pNode)-&gt;data &#x3D; item;</span><br><span class="line">			(*pNode)-&gt;next &#x3D; *pNode;	&#x2F;&#x2F;第一个结点指向第一个结点，组成循环结构</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;*找到next指向第一个结点的结点*&#x2F;</span><br><span class="line">			for(target &#x3D; (*pNode); target-&gt;next !&#x3D; (*pNode); target &#x3D; target-&gt;next)</span><br><span class="line">				;</span><br><span class="line"></span><br><span class="line">			&#x2F;*生成一个新结点*&#x2F;</span><br><span class="line">			temp &#x3D; (node *)malloc(sizeof(struct CLinkList));</span><br><span class="line"></span><br><span class="line">			if(!temp)</span><br><span class="line">				exit(0);</span><br><span class="line"></span><br><span class="line">			temp-&gt;data &#x3D; item;</span><br><span class="line">			temp-&gt;next &#x3D; *pNode;</span><br><span class="line">			target-&gt;next &#x3D; temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b>循环链表删除节点代码:</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void ds_delete(node **pNode, int i)</span><br><span class="line">&#123;</span><br><span class="line">	node *target;</span><br><span class="line">	node *temp;</span><br><span class="line">	int j &#x3D; 1;</span><br><span class="line"></span><br><span class="line">	if(i &#x3D;&#x3D; 1)</span><br><span class="line">	&#123;&#x2F;*被删除的是第一个结点*&#x2F;</span><br><span class="line">		for(target &#x3D; *pNode; target-&gt;next !&#x3D; *pNode; target &#x3D; target-&gt;next)</span><br><span class="line">			;	&#x2F;&#x2F;找到最后一个结点</span><br><span class="line"></span><br><span class="line">		temp &#x3D; *pNode;		&#x2F;&#x2F;被删除结点为第一个结点</span><br><span class="line">		*pNode &#x3D; (*pNode)-&gt;next;	&#x2F;&#x2F;原本第一个结点为下一个结点</span><br><span class="line">		target-&gt;next &#x3D; *pNode;	&#x2F;&#x2F;最后一个结点重新指向新的第一个结点</span><br><span class="line">		free(temp);		&#x2F;&#x2F;释放旧的第一个结点	</span><br><span class="line">	&#125;</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		target &#x3D; *pNode;	&#x2F;&#x2F;工具结点先为第一个结点</span><br><span class="line"></span><br><span class="line">		for( ; j &lt;i-1; ++j)</span><br><span class="line">		&#123;</span><br><span class="line">			target &#x3D; target-&gt;next;		&#x2F;&#x2F;工具结点指向被删除位置的结点</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		temp &#x3D; target-&gt;next;	&#x2F;&#x2F;temp为工具结点所指结点，即为被删除结点</span><br><span class="line">		target-&gt;next &#x3D; temp-&gt;next;	&#x2F;&#x2F;工具结点重新指向被删除结点的下一个结点完成连接</span><br><span class="line">		free(temp);		&#x2F;&#x2F;释放旧位置结点</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b>循环链表返回结点所在位置的代码(根据元素数值找位置):</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int ds_search(node *pNode, int elem)</span><br><span class="line">&#123;</span><br><span class="line">	node *target;</span><br><span class="line">	int i &#x3D; 1;</span><br><span class="line"></span><br><span class="line">	&#x2F;*该循环体在条件内先让target为第一个结点，然后判断其数据</span><br><span class="line">	和下一个结点是否为第一个结点，其中一个为假则要么是找到了</span><br><span class="line">	该元素，要么是都已经到最后了还是没找到*&#x2F;</span><br><span class="line"></span><br><span class="line">	for(target &#x3D; pNode;target-&gt;data !&#x3D; elem &amp;&amp; tagret-&gt;next !&#x3D; pNode; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		target &#x3D; target-&gt;next;</span><br><span class="line">	&#125;	&#x2F;&#x2F;寻找结点位置，令target指向被寻找结点</span><br><span class="line"></span><br><span class="line">	if(target-&gt;next &#x3D;&#x3D; pNode)	&#x2F;&#x2F;表中不存在该元素</span><br><span class="line">		return 0;</span><br><span class="line">	else</span><br><span class="line">		return i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（单链表整表操作）</title>
    <url>/2020/05/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A3%EF%BC%89/</url>
    <content><![CDATA[<h1 id="单链表整表创建"><a href="#单链表整表创建" class="headerlink" title="单链表整表创建"></a>单链表整表创建</h1><hr>
<p><b>要注意，单链表的创建过程是一个动态生成链表的过程。</b></p>
<p>整表创建流程：</p>
<ul>
<li>声明结点p和计数变量i；</li>
<li>初始化空链表L；</li>
<li>令L的头结点的指针指向NULL，即建立一个带头结点的单链表；</li>
<li>循环实现后继结点的插入和赋值。</li>
</ul>
<h2 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h2><hr>
<p>头插法从一空表开始，生成新结点，读取数据存放在新结点的数据域中，然后将新结点插入到当前链表的表头，直至结束。</p>
<p><b>即把新加入元素放在表头后的第一个位置</b></p>
<ul>
<li>让新节点的next指向头结点之后；</li>
<li>然后让表头的next指向新结点。</li>
</ul>
<p><b>即将表头视为售货员，每个新结点都是素质真的差的哈批直接插队到第一个。</b><br><b>头插法一个特点为无头结点。</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void CreateListHead(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">	LinkList p;		&#x2F;&#x2F;工具结点</span><br><span class="line">	int i;		</span><br><span class="line"></span><br><span class="line">	srand(time(0));		&#x2F;&#x2F;初始化随机数种子</span><br><span class="line"></span><br><span class="line">	*L &#x3D; (LinkList)malloc(sizeof(Node));	&#x2F;&#x2F;动态创建链表空间</span><br><span class="line">	(*L)-&gt;next &#x3D; NULL;		&#x2F;&#x2F;头结点指针指向NULL</span><br><span class="line"></span><br><span class="line">	for(i &#x3D; 0; i &lt; n; i++)		&#x2F;&#x2F;循环进行元素的插入和赋值</span><br><span class="line">	&#123;</span><br><span class="line">		p &#x3D; (LinkList)malloc(sizeof(Node));		&#x2F;&#x2F;为工具结点p动态分配空间</span><br><span class="line">		p-&gt;data &#x3D; rand()%100+1;		&#x2F;&#x2F;将随机数赋值给p的数据域,得到1-100的随机数</span><br><span class="line">		p-&gt;next &#x3D; (*L)-&gt;next;		&#x2F;&#x2F;p指针指向L头结点指针之后</span><br><span class="line">		(*L)-&gt;next &#x3D; p;		&#x2F;&#x2F;L头指针指向p，完成插入和赋值</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h2><hr>
<p>与头插法相反，一般情况推荐使用尾插法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void CreatListTail(LinkList *L, int n)</span><br><span class="line">&#123;</span><br><span class="line">	LinkList p, r;		&#x2F;&#x2F;新增一个工具结点r</span><br><span class="line">	int i;</span><br><span class="line"></span><br><span class="line">	srand(time(0));</span><br><span class="line">	*L &#x3D; (LinkList)malloc(sizeof(Node));</span><br><span class="line">	r &#x3D; *L;		&#x2F;&#x2F;因为一开始为空表，先令r指向l</span><br><span class="line"></span><br><span class="line">	for(i &#x3D; 0; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p &#x3D; (Node *)malloc(sizeof(Node));</span><br><span class="line">		p-&gt;data &#x3D; rand()%100+1;</span><br><span class="line">		r-&gt;next &#x3D; p;	&#x2F;&#x2F;令r的指针指向p</span><br><span class="line">		r &#x3D; p;		&#x2F;&#x2F;再把p的一切都给r，循环下去令r始终等同</span><br><span class="line">				于尾部的外挂指针，用于给新插入元素引路</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	r-&gt;next &#x3D; NULL;		&#x2F;&#x2F;引路完成</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="单链表整表删除"><a href="#单链表整表删除" class="headerlink" title="单链表整表删除"></a>单链表整表删除</h1><hr>
<p>为了节省运行空间，当单链表不再被需要时就要将其删除，释放空间。</p>
<p>单链表整表删除思路： </p>
<ul>
<li>声明结点p和q；</li>
<li>将第一个结点赋值给p，下一个结点赋值给q；</li>
<li>循环执行释放p和将q赋值给p的操作。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OK 1</span><br><span class="line"></span><br><span class="line">Status ClearList(LinkList *L)</span><br><span class="line">&#123;</span><br><span class="line">	LinkList p, q;</span><br><span class="line">	p &#x3D; (*L)-&gt;next;		&#x2F;&#x2F;L的第一个结点赋值给p，第一个结点并非头结点</span><br><span class="line">	while(p)</span><br><span class="line">	&#123;</span><br><span class="line">		q &#x3D; p-&gt;next;</span><br><span class="line">		free(p);	&#x2F;&#x2F;释放p</span><br><span class="line">		p &#x3D; q;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	(*L)-&gt;next &#x3D; NULL;		&#x2F;&#x2F;释放结束后，链表内无元素，L头指针指向NULL</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="单链表结构与顺序存储结构优缺点"><a href="#单链表结构与顺序存储结构优缺点" class="headerlink" title="单链表结构与顺序存储结构优缺点"></a>单链表结构与顺序存储结构优缺点</h1><hr>
<p><b>存储分配方式</b></p>
<ul>
<li>顺序存储结构用一段连续的存储单元一次存储数据元素；</li>
<li>单链表采用链式存储结构，用一组任意的存储单元存储数据元素。</li>
</ul>
<p><b>时间性能</b></p>
<ul>
<li>查找<ul>
<li>顺序存储结构O(1);    【优】</li>
<li>单链表O(n);</li>
</ul>
</li>
<li>插入和删除<ul>
<li>顺序存储结构用时O(n);</li>
<li>单链表用时O(1);    【优】</li>
</ul>
</li>
</ul>
<p><b>空间性能</b></p>
<ul>
<li>顺序存储结构易浪费，易溢出</li>
<li>单链表不受空间分配上的限制</li>
</ul>
<b>
因此顺序存储结构适用于固定存储后进行查找的条件操作  

<p>进行频繁插入和删除则用单链表<br></b></p>
<p>游戏开发的用户个人信息注册用顺序存储结构，而玩家的武器和装备列表是不断进行改变的，因此可用单链表。</p>
<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表职场面试题</title>
    <url>/2020/05/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A5%EF%BC%89/</url>
    <content><![CDATA[<p>曾于某鹅厂面试题：</p>
<h3 id="快速找到未至长度链表的中间结点"><a href="#快速找到未至长度链表的中间结点" class="headerlink" title="快速找到未至长度链表的中间结点"></a>快速找到未至长度链表的中间结点</h3><p>路人思路：<br>遍历链表确定链表长度，然后从头结点开始循环L/2次找到中间结点。<br>算法复杂度：O(L+L/2)=O(3L/2)。<br><b>优化点：快慢指针</b><br>原理：设置两个指针*search、*mid都指向单链表的头结点。其中*search的移动速度是*mid的二倍。当*search指向末尾结点的时候，*mid刚好在中间。即标尺思想。</p>
<p>优化后代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OK 1</span><br><span class="line"></span><br><span class="line">Status GetMidNode(LinkList L, ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">	LinkList search, mid;		&#x2F;&#x2F;该定义本身就在定义指针，因此不要再加*，变成指针的指针</span><br><span class="line">	mid &#x3D; search &#x3D; L;	&#x2F;&#x2F;都指向头结点</span><br><span class="line"></span><br><span class="line">	while(search-&gt;next !&#x3D; NULL)		&#x2F;&#x2F;当快指针未到末尾</span><br><span class="line">	&#123;</span><br><span class="line">		if(search-&gt;next-&gt;next !&#x3D; NULL)		&#x2F;&#x2F;判断快指针是否到了倒数第二个结点</span><br><span class="line">		&#123;</span><br><span class="line">			search &#x3D; search-&gt;next-&gt;next;	&#x2F;&#x2F;快指针通过每次指向下下一个结点实现二倍速</span><br><span class="line">			mid &#x3D; mid-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		else	&#x2F;&#x2F;如果是倒数第二个结点，则指向末尾，别二倍速了，都超车了</span><br><span class="line">		&#123;</span><br><span class="line">			search &#x3D; search-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	*e &#x3D; mid-&gt;data;		&#x2F;&#x2F;中间结点数据给e用于返回</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
        <category>面试题</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（静态链表操作）</title>
    <url>/2020/05/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A4%EF%BC%89/</url>
    <content><![CDATA[<h1 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h1><p>线性表的静态链表存储结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define MAXSIZE 1000</span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">	ElemType data;	&#x2F;&#x2F;数据</span><br><span class="line">	int cur;		&#x2F;&#x2F;游标（Cursor）</span><br><span class="line">&#125;Component, StaticLinkList[MAXSIZE];</span><br></pre></td></tr></table></figure>

<img src="/img/数据结构（简述⑤）/图1.png">
在该图中可见从下标1开始游标开始连续：2，3，4，0……最后一个存有数据的元素的游标为0，图里出现错误，下标为4的元素其游标应为0。    

<p>游标怎么定义填入，最后一个游标，即下标999处游标为整个静态链表最后一个元素，必定为空，其游标为整个静态链表的第一个存有数据的元素的下标，在该例子中第一个存有数据的元素下标为1，因此最后一个游标为1。<br>整个静态链表第一个游标，即下标为0的第一个元素必定为空，其游标指向第一个没有存放数据的下标，即游标6处，下标为5，则第一个游标为5。</p>
<p>对静态链表初始化相当于初始化数组：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OK 1</span><br><span class="line">#define MAXSIZE 1000</span><br><span class="line"></span><br><span class="line">Status InitList(StaticLinkList space)</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for(i &#x3D; 0; i &lt; MAXSIZE-1; i++)</span><br><span class="line">		space[i].cur &#x3D; i + 1;	&#x2F;&#x2F;因为是初始化阶段，每个游标默认连续</span><br><span class="line">	</span><br><span class="line">	space[MAXSIZE-1].cur &#x3D; 0;	&#x2F;&#x2F;最后一个游标指向第一个存有数据的下标，默认0</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b>注意：</b></p>
<ul>
<li>我们对数组的第一个和最后一个元素做特殊处理，他们的data不存放数据；</li>
<li>我们通常把未使用的数组元素成为备用链表；</li>
<li>数组的第一个元素，即下标为0的元素的cur就存放备用链表的第一个结点的下标；</li>
<li>数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于单链表中的头结点作用。</li>
</ul>
<h3 id="静态链表无常用性，因此不必深究"><a href="#静态链表无常用性，因此不必深究" class="headerlink" title="静态链表无常用性，因此不必深究"></a>静态链表无常用性，因此不必深究</h3><div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>循环链表特点</title>
    <url>/2020/06/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A8%EF%BC%89/</url>
    <content><![CDATA[<h1 id="尾指针做索引"><a href="#尾指针做索引" class="headerlink" title="尾指针做索引"></a>尾指针做索引</h1><hr>
<p>在循环链表中，原本查找到最后一个元素需要时间为O(n)，但是若让尾指针指向第一个元素的话，那么查找第一个和最后一个元素的时间都是O(1)，大大缩短了时间。<br>这时再判断是否为空，则判断尾指针rear是否等于rear-&gt;next。</p>
<p>例题：将两个线性表(a1,a2,a3,……,an)和(b1,b2,b3,……,bm)连接成一个线性表(a1,……,an,b1,……,bm)的运算</p>
<p>要点：</p>
<ul>
<li>在单链表或者头指针表示的单循环表上做这种操作，都需要遍历第一个链表，找到an，然后b1接an，执行时间O(n)。</li>
<li>若尾指针表示的单循环表，则只需修改指针，无需遍历，用时O(1)。</li>
</ul>
<img src="/img/数据结构（简述⑨）/图1.png">

<p>在图上看，令A的rear尾指针不再指向a1而是指向b1，B的头指针释放，B的尾指针指向a1。</p>
<p>代码片段:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LinkList Connect(LinkList A,LinkList B)		&#x2F;&#x2F;A和B为两个链表尾指针</span><br><span class="line">&#123;</span><br><span class="line">	LinkList p &#x3D; A-&gt;next;	&#x2F;&#x2F;现将A的头结点存给p</span><br><span class="line"></span><br><span class="line">	A-&gt;next &#x3D; B-&gt;next-&gt;next;	&#x2F;&#x2F;令A得尾链接B的开始结点</span><br><span class="line"></span><br><span class="line">	free(B-&gt;next);		&#x2F;&#x2F;释放B的头结点</span><br><span class="line"></span><br><span class="line">	B-&gt;next &#x3D; p;	&#x2F;&#x2F;B尾指针指向A头结点</span><br><span class="line"></span><br><span class="line">	return B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="判断单链表是否有环"><a href="#判断单链表是否有环" class="headerlink" title="判断单链表是否有环"></a>判断单链表是否有环</h1><hr>
<img src="/img/数据结构（简述⑨）/图2.png">

<p>有环：尾结点指向链表内的某结点。</p>
<p>方法一：用p、q两个指针，p一直向前，q每次从头重新开始向前，对每个节点，看p走的步数是否和q一样。<br>在图中，p从6走到3用了6步，而q从head触发用两步，则矛盾，存在环。</p>
<p>方法二：使用p、q两个指针，p每次向前一步，q向前两步，若某时p == q，则有环。</p>
<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>魔术师发牌问题</title>
    <url>/2020/06/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A9%EF%BC%89/</url>
    <content><![CDATA[<h1 id="魔术师发牌问题"><a href="#魔术师发牌问题" class="headerlink" title="魔术师发牌问题"></a>魔术师发牌问题</h1><hr>
<p>问题描述：魔术师把一副13张黑桃牌，将它们预先排好后放在一起，牌面朝下。魔术师将最上面的牌数为1，把它反过来为黑桃A，把黑桃A放在桌子上，第二次数1,2。把第一张牌放在牌堆下面，第二张牌翻过来是黑桃2，放在桌子上，这样将13张牌翻出。  </p>
<p>问这些牌要如何排放。</p>
<p>代码片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define CardNumber 13</span><br><span class="line"></span><br><span class="line">typedef struct node</span><br><span class="line">&#123;</span><br><span class="line">	int data;</span><br><span class="line">	struct node* next;</span><br><span class="line">&#125;sqlist, * linklist;</span><br><span class="line"></span><br><span class="line">linklist CreateLinkList()		&#x2F;&#x2F;链表初始化</span><br><span class="line">&#123;</span><br><span class="line">	linklist head &#x3D; NULL;</span><br><span class="line">	linklist s, r;</span><br><span class="line">	int i;</span><br><span class="line"></span><br><span class="line">	r &#x3D; head;</span><br><span class="line"></span><br><span class="line">	for (i &#x3D; 1; i &lt;&#x3D; CardNumber; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s &#x3D; (linklist)malloc(sizeof(sqlist));</span><br><span class="line">		s-&gt;data &#x3D; 0;</span><br><span class="line"></span><br><span class="line">		if (head &#x3D;&#x3D; NULL)</span><br><span class="line">			head &#x3D; s;</span><br><span class="line">		else</span><br><span class="line">			r-&gt;next &#x3D; s;</span><br><span class="line"></span><br><span class="line">		r &#x3D; s;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	r-&gt;next &#x3D; head;</span><br><span class="line"></span><br><span class="line">	return head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;发牌顺序</span><br><span class="line">void Magician(linklist head)</span><br><span class="line">&#123;</span><br><span class="line">	linklist p;</span><br><span class="line">	int j;</span><br><span class="line">	int Countnumber &#x3D; 2;	&#x2F;&#x2F;第二次取牌隔2个，同时取2</span><br><span class="line"></span><br><span class="line">	p &#x3D; head;</span><br><span class="line">	p-&gt;data &#x3D; 1;	&#x2F;&#x2F;第一张牌放A</span><br><span class="line"></span><br><span class="line">	while (1)</span><br><span class="line">	&#123;</span><br><span class="line">		for (j &#x3D; 0; j &lt; Countnumber; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			&#x2F;*往后推移，假如往后数取第4个牌，但中间有个位置有牌，</span><br><span class="line">			则p直接跳过该牌到下一个*&#x2F;</span><br><span class="line">			p &#x3D; p-&gt;next;</span><br><span class="line">			if (p-&gt;data !&#x3D; 0)</span><br><span class="line">			&#123;</span><br><span class="line">				j--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if (p-&gt;data &#x3D;&#x3D; 0)	&#x2F;&#x2F;如果该位置没被取过，则取该牌</span><br><span class="line">		&#123;</span><br><span class="line">			p-&gt;data &#x3D; Countnumber;</span><br><span class="line">			Countnumber++;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		if (Countnumber &#x3D;&#x3D; 14)	&#x2F;&#x2F;13张牌取完了，跳出循环</span><br><span class="line">			break;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;销毁工作</span><br><span class="line">void DestroyList(linklist* list)</span><br><span class="line">&#123;</span><br><span class="line">	linklist ptr &#x3D; *list;</span><br><span class="line">	linklist buff[CardNumber];</span><br><span class="line">	int i &#x3D; 0;</span><br><span class="line">	while (i &lt; CardNumber)</span><br><span class="line">	&#123;</span><br><span class="line">		buff[i++] &#x3D; ptr;</span><br><span class="line">		ptr &#x3D; ptr-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	for(i &#x3D; 0; i &lt; CardNumber; ++i)</span><br><span class="line">	&#123;</span><br><span class="line">		free(buff[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	*list &#x3D; 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	linklist p;</span><br><span class="line">	int i;</span><br><span class="line"></span><br><span class="line">	p &#x3D; CreateLinkList();</span><br><span class="line">	Magician(p);</span><br><span class="line"></span><br><span class="line">	printf(&quot;按以下顺序排列&quot;);</span><br><span class="line">	for (i &#x3D; 0; i &lt; CardNumber; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;黑桃 %d&quot;, p-&gt;data);</span><br><span class="line">		p &#x3D; p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	DestroyList(&amp;p);</span><br><span class="line"></span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
        <category>链表</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>【私用】计算机网络笔记①</title>
    <url>/2020/03/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0%E2%91%A0/</url>
    <content><![CDATA[<h2 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h2><p>因特网有三大阶段：</p>
<ul>
<li>第一阶段：从单个网络 ARPANET 向互联网发展的过程。1983 年 TCP/IP 协议成为 ARPANET 上的标准协议。</li>
<li>第二阶段：建成三级结构的因特网：主干网、地区网和校园网（或企业网）。</li>
<li>第三阶段：形成多层次的ISP（Internet Service Provider 因特网服务提供者）结构的因特网。</li>
</ul>
<hr>
<p>internet 和 Internet 的区别：</p>
<ul>
<li><strong><em>internet:</em></strong> 通用名词，它泛指由多个计算机网络互连而成的网络。</li>
<li><strong><em>Internet:</em></strong> 专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP/IP 协议族作为通信的规则，且其前身是美国的 ARPANET。</li>
</ul>
<hr>
<h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><ul>
<li><strong><em>边缘部分：</em></strong> 有所有连接在因特网上的主机组成。这部分由用户直接使用，用来进行通信和资源共享。</li>
<li><strong><em>核心部分：</em></strong> 由大量的网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</li>
</ul>
<p>处于边缘部分的用户通信方式</p>
<ul>
<li>客户服务器方式（C/S方式）：即Client/Server方式。（客户是服务的请求方，服务器是服务的提供方）</li>
<li>对等方式（P2P方式）：即Peer-to-Peer方式。（对等连接中的每一个主机既是客户又同时是服务器）</li>
</ul>
<p>核心部分的交换技术</p>
<ul>
<li><strong><em>电路交换</em></strong>的三个阶段：建立连接——通话——释放连接<br>在通话时，两用户之间占用端到端的资源，而由于绝大部分时间线路都是空闲的，所以线路的传输速率往往很低。</li>
<li><strong><em>分组交换</em></strong>的组成：报文、首部、分组。采用存储转发技术，即收到分组——存储分组——查询路由（路由选择协议）——转发分组。优点：高效、灵活、迅速、可靠。缺点：时延、开销。关键构件：路由器。</li>
<li><strong><em>报文交换</em></strong>整个报文传送到相邻结点，全部存储下来之后查询转发表，转发到下一个结点。<img src="/img/JW1.jpg">
</li>
</ul>
<hr>
<h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><ul>
<li>按通信距离分：广域网、局域网、城域网</li>
<li>按信息交换方式分：电路交换网、分组交换网、总和交换网</li>
<li>按网络拓扑结构分：星型网、树型网、环型网、总线网</li>
<li>按通信介质分：双绞线网、同轴电缆网、光纤网、卫星网</li>
<li>按传输带宽分：基带网、宽带网</li>
<li>按使用范围分：公用网、专用网</li>
<li>按速率分：高速网、中速网、低速网</li>
<li>按通信传播方式分：广播式、点到点式</li>
</ul>
<hr>
<p>性能指标：速率、带宽、时延</p>
<ul>
<li><strong><em>速率：</em></strong>指连接在计算机网络上的主机在数字信道上传送数据的速率。b/s（bps） 如100M以太网，实际是指100Mb/s。往往是指额定速率或标称速率。</li>
<li><strong><em>带宽：</em></strong>数字信道所能传送的最高速率。b/s（bps）</li>
<li><strong><em>吞吐量：</em></strong>单位时间内通过某个网络（或信道、接口）的实际数据量。其绝对上限值等于带宽。</li>
<li><strong><em>时延：</em></strong>数据（一个报文或分组、甚至比特）从网络（或链路）的一段传送到另一端的时间，也称延迟。<br>① 发送时延：主机或路由器发送数据帧所需的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。也成传输时延。<br>发送时延 = 数据帧长度（b） / 信道带宽（b/s）<br>② 传播时延：电磁波在信道中传输一定距离所需划分的时间。<br>传播时间 = 信道长度（m） / 传输速率（m/s）<br>③ 处理时延：主机或路由器处理收到的分组所花费的时间。<br>④ 排队时延：分组在输入队列中等待处理的时间加上其在输出队列中等待转发的时间。<br>综上：总时延 = 发送时延 + 传播时延 + 处理时延 + 排队时延。<br>注：对于高速网络链路，提高的是发送速率而不是传播速率。</li>
<li>时延带宽积：传播时延 * 带宽。表示链路的容量。</li>
<li>往返时间RTT：从发送方发送数据开始，到发送发收到接收方的确认为止，所花费的时间。</li>
<li>利用率：某信道有百分之几是被利用的（有数据通过）。而信道或网络利用率过高会产生非常大的时延。<br>当前时延=空闲时时延/（1-利用率）</li>
</ul>
<hr>
<h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><p><strong><em>网络协议：</em></strong>简称协议，是为了进行网络中的数据交换而建立的规则、标准或约定。<br>网络协议三要素：</p>
<ul>
<li>语法：数据与控制信息的结构或格式</li>
<li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li>
<li>同步：事件实现顺序的详细说明</li>
</ul>
<p><strong><em>体系结构(architecture)</em></strong>是计算机网络的各层及其协议的集合<br>五层协议的体系结构：</p>
<ul>
<li><strong><em>物理层：</em></strong>物理层的任务就是透明地传送比特流。（注意：传递信息的物理媒体，如双绞线、同轴电缆、光缆等，是在物理层的下面，当做第0 层。）物理层还要确定连接电缆插头的定义及连接法。</li>
<li><strong><em>数据链路层：</em></strong>将网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上”透明“的传送以帧为单位的数据。每一帧包括数据和必要的控制信息。在收到数据时，控制信息使收到端直到哪个帧从哪个比特开始和结束。</li>
<li><strong><em>网络层：</em></strong>选择合适的路由，使发送站的运输层所传下来的分组能够正确无误地按照地址找到目的站，并交付给目的站的运输层。网络层将运输层产生的报文或用户数据报封装成分组（IP数据报）或包进行传送。</li>
<li><strong><em>运输层：</em></strong>向上一层的进行通信的两个进程之间提供一个可靠的端对端服务，使它们看不见运输层以下的数据通信的细节。（TCP、UDP）</li>
<li><strong><em>应用层：</em></strong>直接为用户的应用进程提供服务（HTTP、FTP等）</li>
</ul>
<p>OSI体系结构：物理层、数据链路层、网络层、运输层、会话层、表示层、应用层</p>
<p>TCP/IP体系结构：网络接口层、网际层IP、运输层、应用层</p>
<img src="/img/JW2.jpg">

<p>私用</p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构（线性表与查增删）</title>
    <url>/2020/05/14/%E7%BA%BF%E6%80%A7%E8%A1%A8%EF%BC%88%E7%AE%80%E8%BF%B0%E2%91%A0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><p><b>线性表：</b>由零个或多个数据元素组成的优先序列。</p>
<p><b>注意：</b>  </p>
<ol>
<li>第一个元素无前驱，最后一个元素无后继，其余元素有且只有一个前驱和后继。  </li>
<li>表中元素按一定顺序进行排列，有其先来后到。  </li>
<li>线性表只能处理<b>有限</b>的元素</li>
</ol>
<h3 id="基本操作相关"><a href="#基本操作相关" class="headerlink" title="基本操作相关"></a>基本操作相关</h3><hr>
<p><font size=2><b>强烈建议命名进行规范，加强代码可读性。 </b></font></p>
<p><b>InitList(*L)</b>：初始化操作，建立空表L。<br><b>ListEmpty(L)</b>：判断表是否为空，若空返回true,反之返回false。<br><b>ClearList(*L)</b>：将线性表清空。<br><b>GetElem(L,i,*e)</b>：将表L中的第i个位置元素值返回给e。<br><b>LocateElem(L,e)</b>：在表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号，失败则返回0。<br><b>ListInsert(*L,i,e)：</b>在表L中第i个位置插入新元素e。<br><b>ListDelete(*L,i,*e)：</b>删除表L中第i个位置元素，并用e返回其值。<br><b>ListLength(L)：</b>返回表L的长度（元素个数）。<br><b>ListInsert(*L,i,e)：</b>在表L的i位置插入新元素e。<br><b>ListDelete(SqList *L, int i, ElemType *e)：</b>删除表L的i位置元素，并把元素的值e取出。<br><b>endADT</b></p>
<p>以以上命名为基础，进行集合并集的数据结构代码  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void ListL(Lista *La,Listb Lb)	</span><br><span class="line">&#123;</span><br><span class="line">	int La_len,Lb_len,i;	</span><br><span class="line">	&#x2F;*定义三个元素用于存放La的元素个数，Lb的元素个数和元素位置*&#x2F;</span><br><span class="line">	ElemType e;		&#x2F;&#x2F;万能元素，用于返回需求的值</span><br><span class="line">	La_len &#x3D; ListLength(*La);	&#x2F;&#x2F;将La的元素个数返回给La_len</span><br><span class="line">	Lb_len &#x3D; ListLength(Lb);	&#x2F;&#x2F;道理同上</span><br><span class="line">	for(i&#x3D;1; i &lt;&#x3D; Lb_len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		GetElem(Lb, i, &amp;e);		&#x2F;&#x2F;Lb中第i个元素给e</span><br><span class="line">		if(!LocateElem(*La, e))		&#x2F;&#x2F;判断e中的值是否在La中已有</span><br><span class="line">		&#123;</span><br><span class="line">			ListInsert(La, ++La_len, e);	</span><br><span class="line">	&#x2F;*若没有重复，则将e中的值插入到La中成为一个新的元素，并</span><br><span class="line">	另La元素个数+1*&#x2F;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下来再看一下顺序存储结构的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define MAXSIZE 50	&#x2F;&#x2F;令MAXSIZE代表50</span><br><span class="line">typedef int ElemType	&#x2F;&#x2F;令ElemType在这里代表int数据类型</span><br><span class="line">typedef struct		&#x2F;&#x2F;结构体</span><br><span class="line">&#123;</span><br><span class="line">	ElemType data[MAXSIZE];		&#x2F;&#x2F;等同于int data[50];</span><br><span class="line">	int length;		&#x2F;&#x2F;线性表当前长度</span><br><span class="line">&#125;SqList;	&#x2F;&#x2F;表名</span><br></pre></td></tr></table></figure>

<p><b>存储地址计算：<font color="blue">LOC(ai) = LOC(a1) + (i-1)*l</font></b><br><font size=1>l为一个元素所占内存空间</font></p>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define OK 1</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define TRUE 1</span><br><span class="line">#define FALSE 0</span><br><span class="line"></span><br><span class="line">typedef int Status;</span><br><span class="line"></span><br><span class="line">Status GetElem(SqList L, int i, ElemType *e)	&#x2F;&#x2F;获取表L的位置i的元素并把值给e</span><br><span class="line">&#123;</span><br><span class="line">	if(L.length&#x3D;&#x3D;0 || i&lt;1 || i&gt;L.length)	&#x2F;&#x2F;表L为空或者位置小于1或者位置大于表L元素个数都返回错误</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	*e &#x3D; L.data[i-1];	</span><br><span class="line">	&#x2F;*因为要获取第2个元素的话实际上是获取表中1地址元素（道理同</span><br><span class="line">	数组排序），因此要获取第i元素值便是获取L表中data[i-1]的值*&#x2F;</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="存储中插入操作的流程"><a href="#存储中插入操作的流程" class="headerlink" title="存储中插入操作的流程"></a>存储中插入操作的流程</h2><hr>
<ul>
<li>如果插入位置不合理要抛出异常；</li>
<li>如果表长大于数组长度，抛出异常，或者动态增加数组容量；</li>
<li>从最后一个元素开始向前遍历到第i个位置，分别将他们都向后移动一个位置；</li>
<li>将要插入的元素填入位置i处；</li>
<li>线性表长+1；</li>
</ul>
<p><b>实现代码：</b></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define MAXSIZE 50</span><br><span class="line">#define ERROR 0</span><br><span class="line">#define OK 1</span><br><span class="line"></span><br><span class="line">Status ListInsert(SqList *L, int i, ElemType e)</span><br><span class="line">&#x2F;&#x2F;将值e插入到表L的位置i处</span><br><span class="line">&#123;</span><br><span class="line">	int k;</span><br><span class="line"></span><br><span class="line">	if(L-&gt;length &#x3D;&#x3D; MAXSIZE)	&#x2F;&#x2F;表满了返回错误</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	if(i&lt;1 || i&gt;L-&gt;length+1)	&#x2F;&#x2F;插入位置非法返回错误</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	if(i &lt;&#x3D; L-&gt;Length)</span><br><span class="line">	&#123;</span><br><span class="line">	&#x2F;&#x2F;将被插入元素位置往后的元素地址后后移一位</span><br><span class="line">		for(k &#x3D; L-&gt;length-1; k &gt;&#x3D; i-1; k--)		&#x2F;&#x2F;数组特性第i位实际就是位置i-1</span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;data[k+1] &#x3D; L-&gt;data[k];	&#x2F;&#x2F;实现了k位置往后移1位</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	L-&gt;data[i-1] &#x3D; e;	&#x2F;&#x2F;位置i插入元素值e</span><br><span class="line">	L-&gt;length++;	&#x2F;&#x2F;表L长度+1</span><br><span class="line"></span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="删除操作流程"><a href="#删除操作流程" class="headerlink" title="删除操作流程"></a>删除操作流程</h2><hr>
<ul>
<li>删除位置不合理，抛出异常；</li>
<li>取出删除元素；</li>
<li>删除元素开始位置往后遍历到最后一个元素，分别将其向前移动一个位置；</li>
<li>表长-1；</li>
</ul>
<p>操作代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define ERROR 0;</span><br><span class="line">#define OK 1;</span><br><span class="line"></span><br><span class="line">Status ListDelete(SqList *L,int i,ElemType *e)</span><br><span class="line">&#123;</span><br><span class="line">	int k;</span><br><span class="line"></span><br><span class="line">	if(L-&gt;length &#x3D;&#x3D; 0)</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	if(i &lt; 1 || i &gt; L-&gt;length)</span><br><span class="line">	&#123;</span><br><span class="line">		return ERROR;</span><br><span class="line">	&#125;	&#x2F;&#x2F;都是非法地址删除操作</span><br><span class="line"></span><br><span class="line">	*e &#x3D; L-&gt;data[i-1];	&#x2F;&#x2F;用e获取被删除位置i元素的值</span><br><span class="line"></span><br><span class="line">	if(i &lt; L-&gt;length)</span><br><span class="line">	&#123;</span><br><span class="line">		for(k &#x3D; i; k &lt; L-&gt;length; k++)</span><br><span class="line">	&#x2F;*重复解释，因为要移动被删除位置i后面的所有元素，因</span><br><span class="line">	此在数组中其实被删除的是i-1位置元素，往后起始元素便是i*&#x2F;</span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;data[k-1] &#x3D; L-&gt;data[k];	&#x2F;&#x2F;位置后移操作</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	L-&gt;length--;	&#x2F;&#x2F;表长减1</span><br><span class="line">	return OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线性表顺序存储优缺点"><a href="#线性表顺序存储优缺点" class="headerlink" title="线性表顺序存储优缺点"></a>线性表顺序存储优缺点</h3><p><b>优点：</b></p>
<ul>
<li>无序为表示表中元素之间的逻辑关系而增加存储空间；</li>
<li>可以快速存取表中任意位置元素；  </li>
</ul>
<p><b>缺点：</b></p>
<ul>
<li>插入和删除操作需要移动大量元素；</li>
<li>线性表长度变化较大时，难以确定存储空间容量；</li>
<li>容易造成存储空间的“碎片”。</li>
</ul>
<p><font size="12"><font color="red">记住，未对结构体进行修改的传值时不传指针，即传值时SqList L即可，需要对结构进行修改的传值SqList *L</font></p>
<div align=center><font size="1"><font color="grey">本文参考小甲鱼数据结构</font></font></div>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程小点</title>
    <url>/2021/06/28/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B0%8F%E7%82%B9/</url>
    <content><![CDATA[<h1 id="软件工程基础"><a href="#软件工程基础" class="headerlink" title="软件工程基础"></a>软件工程基础</h1><p>软件危机特征主要体现在7个方面</p>
<ul>
<li>在软件系统运行过程中，经常出现功能、性能等严重问题；</li>
<li>软件产品的质量、可靠性和安全等方面，时常不能达到标准要求；</li>
<li>软件开发管理差，对成本和进度难以估计；</li>
<li>系统时常出现无法维护、升级或更新的问题；</li>
<li>开发效率低，无法满足应用快速发展与更新升级的实际需要；</li>
<li>研发成本难以控制，在总成本中所占的比例不断大幅上升；</li>
<li>软件开发没有标准、完整、统一规范的文档资料。</li>
</ul>
<hr>
<p>软件危机产生的主要原因在6个方面</p>
<ul>
<li>软件开发的规模、复杂度和需求量都在不断增加；</li>
<li>软件需求分析与设计不完善、有欠缺，致使软件开发、维护和管理或文档出现问题；</li>
<li>没有按照工程化方式运作，开发过程无统一标准、准则和规范方法；</li>
<li>研发人员之间或同用户相互交流沟通不够或文档资料不完备；</li>
<li>软件测试调试不规范、不细致，提交的软件质量不达标；</li>
<li>在软件运行过程中，忽视了正常有效的维护和管理；</li>
</ul>
<hr>
<p>解决软件危机的主要措施</p>
<ul>
<li>技术方法；</li>
<li>开发工具；</li>
<li>组织管理；</li>
</ul>
<hr>
<p>软件 = 程序 + 数据 + 文档 + 服务</p>
<p>软件工程的定义是：<b>应用计算机科学、数学及管理科学等原理，开发软件的过程。软件工程借鉴传统工程的原则、方法以提高质量、降低成本。</b></p>
<hr>
<p>软件生存周期是从开始研发软件到软件停止使用的整个过程。是指软件产品从用户提出开发需求开始，经过开发、使用和维护，直到最后淘汰的整个周期。</p>
<p>常用软件开发模型有：</p>
<ul>
<li>瀑布模型</li>
<li>增量模型</li>
<li>快速原型模型</li>
<li>螺旋模型</li>
<li>喷泉模型</li>
</ul>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>国家标准GB/T 11457-1995《软件工程术语》对软件工程的定义是软件开发、运行、维护和隐退的<b>系统方法</b>。</p>
<p>软件工程的目标是<b>实现软件的优质高产</b>。</p>
<p>软件危机的主要原因是（<b>软件本身特点及开发方法</b>）</p>
<p>下面（<b>软件工程材料</b>）不属于软件工程学科所要研究的内容。</p>
<p>下面（<b>20世纪60年代提出了软件工程的概念</b>）是正确的说法。</p>
<hr>
<h1 id="可行性分析及研发策划"><a href="#可行性分析及研发策划" class="headerlink" title="可行性分析及研发策划"></a>可行性分析及研发策划</h1><p>可行性分析可包括5个方面：</p>
<ul>
<li>技术可行性分析</li>
<li>经济可行性分析</li>
<li>社会可行性分析</li>
<li>开发方案可行性分析</li>
<li>运行可行性分析</li>
</ul>
<hr>
<h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><p><b>软件可行性分析</b>的目的就是用最小的代价在尽可能短的时间内确定该软件项目是否能够开发，是否值得开发。</p>
<p>效益分析分为有形效益和无形效益两种。有形效益可以用<b>货币的时间价值</b>、<b>投资回收期</b>、<b>纯收入</b>等指标进行度量，无形效益主要从性质上、心理上进行衡量，很难直接进行量的比较。</p>
<p>研究开发资源的有效性是进行（<b>技术</b>）可行性分析的一方面。</p>
<p>研究软硬件资源的有效性是进行（<b>技术可行性</b>）研究的一方面。</p>
<p>系统流程图用于可行性分析中的（<b>当前运行系统</b>）的描述。</p>
<p>系统流程图是描述（<b>物理系统</b>）的工具。</p>
<hr>
<h1 id="软件需求分析"><a href="#软件需求分析" class="headerlink" title="软件需求分析"></a>软件需求分析</h1><p> 需求分析是软件开发过程中的一个非常重要的阶段，是整个软件开发的重要依据和基础，关系软件系统开发的成败，是决定产品质量的关键。</p>
<p> 软件需求分：</p>
<ul>
<li><p>业务需求</p>
</li>
<li><p>用户需求</p>
</li>
<li><p>功能需求</p>
</li>
<li><p>非功能需求</p>
<p>软件需求分析的主要目的是获取用户及项目的具体需求，通过对实际需求的获取、分析、文档化和验证等需求分析过程，为软件的进一步设计和实现提供依据。</p>
<p>数据字典有四类条目：<b>数据流、数据项、文件及基本加工。</b></p>
</li>
</ul>
<hr>
<h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><p> 用于描述基本加工说明的3种描述工具是<b>结构化语言</b>、<b>判定表</b>、<b>判定树</b>。</p>
<p> 在需求分析阶段，需要确定问题的综合需求，这些需求包括<b>功能需求</b>、<b>性能需求</b>、<b>环境需求</b>、<b>用户界面需求</b>。另外还有可靠性、安全性、保密性、可移植性、可维护性等方面的功能。</p>
<p> 在绘制分层的DFD时，父图与子图的输入输出数据流要<b>平衡</b>。</p>
<p> DFD是常用的进行软件需求分析的图形工具，其基本符号是（<b>加工、数据流、数据存储和外部实体</b>）</p>
<p> 判定表和判定树是DFD中用以描述加工的工具，它通常描述的对象是（<b>组合组件</b>）</p>
<p> 需求规格说明书的作用不应该包括（<b>软件可行性研究的依据</b>）</p>
<p> 进行需求分析可使用多种工具，但不包括以下（<b>PAD图</b>）选项。</p>
<hr>
<h1 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h1><p> 软件设计也称为系统设计，是利用软件研发技术、工具和方法，确定新软件系统的具体物理实现方式、方法和方案的过程。</p>
<p> 软件设计的总体目标是：将软件需求分析阶段确定的各种功能对应的逻辑模型，转换为具体的物理模型。</p>
<p> 软件设计分为两大阶段：总体设计和详细设计。</p>
<img src='/img/软件工程/1.png'>

<img src='/img/软件工程/2.png'>

<p>总体设计的总原则和过程是：由宏观到微观、逐步求精的原则，定性与定量分析相结合、分解与协调相结合和模块化方法，并兼顾软件的通用性、关联性、整体性和层次性。</p>
<p>模块的内聚和耦合：</p>
<p><b>内聚</b>表示一个模块内部各个组成元素之间相互结合得紧密程度。</p>
<p><b>耦合</b>是指在软件模块之间互相依赖的方式和程度。</p>
<p>详细设计主要完成对软件模块的内部过程的具体设计和描述。</p>
<p>详细设计的工具：<b>图形工具</b>、<b>表格工具</b>、<b>语言工具</b></p>
<hr>
<h2 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h2><p>系统详细设计阶段最后产生的文档是<b>详细设计说明书</b>。</p>
<p>软件详细设计工具可分为<b>图形工具</b>、设计语言和表格工具。</p>
<p>为了提高模块的独立性，模块之间最好是（<b>数据耦合</b>）</p>
<p>详细设计的任务是确定每个模块的（<b>算法和数据结构</b>）</p>
<hr>
<h1 id="面向对象开发方法"><a href="#面向对象开发方法" class="headerlink" title="面向对象开发方法"></a>面向对象开发方法</h1><p><b>对象</b>是系统中的基本运行的实体，是代码和数据的集合。</p>
<p>对象具有三要素：<b>对象标识</b>、<b>属性</b>、<b>服务</b>。</p>
<p>类是对具有相同属性和服务的一组对象的抽象定义。</p>
<p>继承是父类与子类之间共享数据结构和方法的一种机制。</p>
<hr>
<h2 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h2><p>面向对象的程序设计语言应具备面向对象方法所要求的4个成分，它们是<b>类</b>、<b>对象</b>、<b>继承</b>和<b>消息通信</b>。</p>
<p>只有类的共有界面的成员才能成为使用类的操作，这是软件设计的（<b>信息隐蔽</b>）原则。</p>
<p>当且仅当一个操作对类的实例的用户有用时，它才是类公共界面的一个成员，这是软件设计的（<b>最小界面</b>）原则</p>
<hr>
<h1 id="软件编程实现"><a href="#软件编程实现" class="headerlink" title="软件编程实现"></a>软件编程实现</h1><p>软件实现是通过软件编程或利用复用与生成技术集成、测试和调试，具体完成软件产品的过程。</p>
<p>软件实现的主要目标是按照软件需求分析和详细设计的具体指标要求，选择合适的技术路线、工具、方法和编程语言。</p>
<p>软件实现的主要任务是将软件详细设计的结果转换为目标软件。</p>
<p>软件编程框架是可以复用的软件设计架构。</p>
<p>软件版本包括：</p>
<ul>
<li>中间版本</li>
<li>α版本</li>
<li>β版本</li>
<li>发布版本</li>
<li>维护版本</li>
</ul>
<p>选取编程语言的标准：</p>
<p>理想化标准：</p>
<ul>
<li>有利于实现的优质高效</li>
<li>有利于实现功能性能及可靠性</li>
<li>有利于降低软件开发及维护成本</li>
</ul>
<p>实用性标准：</p>
<ul>
<li>程序语言自身特性</li>
<li>软件的应用领域</li>
<li>软件开发环境</li>
<li>软件开发方法</li>
<li>编程人员的熟悉情况</li>
<li>算法和数据结构的复杂性</li>
<li>软件可移植性要求</li>
</ul>
<hr>
<h2 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h2><p>编程语言是人与<b>计算机</b>交流的<b>工具</b>。</p>
<p>编程风格是指一个人编制程序时所表现出来的<b>特点</b>、习惯和<b>逻辑思路</b>。</p>
<p>下面不属于一般程序设计方法的是（<b>体系化编程方法</b>）。</p>
<hr>
<h1 id="软件测试与维护"><a href="#软件测试与维护" class="headerlink" title="软件测试与维护"></a>软件测试与维护</h1><p>软件测试的目的是：尽可能多地找到软件中的错误，而不是证明软件的正确性。</p>
<p>软件调试的方法：</p>
<ul>
<li>强行排错</li>
<li>回溯法排错</li>
<li>归纳法排错</li>
<li>演绎法排错</li>
</ul>
<hr>
<h2 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h2><p>软件测试的目的是<b>发现软件的错误</b>。</p>
<p>单元测试一般以<b>白盒测试</b>为主，测试的依据是<b>系统的模块功能规格说明</b></p>
<p>黑盒测试法是通过分析程序的功能来设计测试用例的方法。</p>
<p>成功的测试是指运行测试用例后（<b>发现了程序的错误</b>）。</p>
<p>软件的集成测试工作最好由（<b>不属于该软件开发组的软件设计人员</b>）</p>
<p>什么是白盒测试法？什么是黑盒测试法？</p>
<p><b>黑盒测试也称为功能测试或黑箱测试，其中的“黑盒”指测试人员只知道被测软件的界面和接口外部情况，不必考虑程序内部的逻辑结构和特性，只根据程序的需求分析规格说明，检查其功能是否符合。</b></p>
<p><b>白盒测试主要对程序内部结构执行路径的测试，也称为透明盒测试。测试人员将测试对象看作一个打开的盒子，搞清软件内部逻辑结构和执行路径后，利用其结构及有关信息设计测试用例，对程序的所有逻辑路径进行测试，以检测不同检查程序的实际状态与预期状态一致性。</b></p>
<p>软件调试一般经过哪些步骤，采取哪些方法？</p>
<p><b>步骤：重现问题、定位根源、确定解决方案、验证方案</b>。</p>
<p><b>方法：强行排错、回溯法排错、归纳法排错、演绎法排错</b>。</p>
<hr>
<h1 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h1><p>软件项目的风险管理是指对软件项目可能出现的风险，进行识别、评估、预防、监控的过程。</p>
<p>风险估算也称为风险预测，主要从风险发生的可能性和风险发生所产生的后果两个方面评估风险。</p>
<hr>
<h2 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h2><p>软件项目启动过程的主要任务是确定项目的目标、<b>约束</b>和<b>自由度</b>，并进行<b>投资/效益</b>分析和可行性研究，如果符合企业的<b>商业目标</b>，则确定立项。</p>
<p>软件项目估算的内容主要有软件<b>规模</b>估算、<b>工作量</b>估算、<b>成本</b>估算和<b>进度</b>估算。</p>
<p>软件项目开发团队都有哪些角色？怎样组织？</p>
<p><b>角色：项目经理、分析人员、架构师、开发人员、测试人员、部署人员</b></p>
<p>项目验收的条件是什么？项目验收要经历哪些过程？</p>
<p><b>过程：评审项目验收计划、项目团队验收自查、项目最终评审、项目验收、项目总结和资料归档。</b></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>预备知识（数据结构）</title>
    <url>/2020/05/11/%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%EF%BC%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/</url>
    <content><![CDATA[<p><font size=2>本文依照数据结构、算法与应用（C++语言）（第二版）所进行学习</font></p>
<p><b>1.函数部分</b><br><b>1.1 传值参数</b></p>
<figure class="highlight plain"><figcaption><span>abc(int a,int b,int c)</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  return a*b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数abc中让int类型的a、b、c作为<strong>形参</strong>，在函数内用return返回由a、b、c所构成的表达式。之后可以进行<b>实参</b>传递：</p>
<pre><code>z=abc(3,4,5);</code></pre><p>即z得到abc的实参3、4、5所参与的表达式进行运算后的结果（3×4+5=17）<br>要注意函数运行结束后，形参类型的<b>析构函数</b>负责释放形式参数。</p>
<p><font size=2>即形参的值在函数运行结束后不会复制到对应的形参上，不会修改实参的值。</font></p>
<p>形参与实参的数据类型不匹配即形参int a对应了实参float x=3.8，那么在参数传值的过程中只会传递数值3而不是3.8或4。<br><b>1.2 模板函数</b><br>函数与函数之间直接实现数据类型的相互套用。</p>
<figure class="highlight plain"><figcaption><span>abc(float a,float b,float c)</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  return a+b+c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上为一般代码</p>
<p>而在此基础上进行模板函数套用。</p>
<pre><code>template&lt;class T&gt;
T abc(T a,T b,T c)
{
return a+b+c;
}</code></pre><p>则任何数据类型可以通过替代T来实现形参数据类型的统一。在主函数中调用时，任何一个操作规定了T的数据类型，则该模板函数中的T会自然统一。</p>
<pre><code>int x=3;
int y=4;
z=abc&lt;int&gt;(x,y,5);</code></pre><p>则模板函数中的所有T都将被统一为int数据类型。<br><b>1.3 引用参数</b><br>在正常的参数传值过程中实际上是实参的值复制给了形参然后再运算后复制给实参，在此过程中的操作是十分繁多的，如果在1.1中abc传递的是一个1000数值的矩阵，那么过程中将进行3000次运算（复制给形参1000次，运算1000次，复制给实参1000次）。</p>
<p>若利用引用参数的方法则对于1000数值的矩阵只需进行1000次运算，大大减少了工作负荷。</p>
<pre><code>template&lt;class T&gt;
T abc(T&amp; a,T&amp; b,T&amp; c)
{
  return a+b+c;
}</code></pre><p>这个过程实际上是直接引用了实参，让实参替代了形参，而非将实参的值复制给形参，运算后得到结果直接赋给了实参不需要从形参再复制给实参。</p>
<p><b>1.4 常量引用参数</b><br>常量引用的过程中被引用的实参无法被函数所修改。</p>
<pre><code>template&lt;class T&gt;
T abc(const T&amp; a,const T&amp; b,const T&amp; c)
{
  a++;b++;c++;
  return a+b+c;
}</code></pre><p>在该引用过程中若被引用的实参数值分别为3，4，5。那么得到的返回值将会是3+4+5=12而非4+5+6=15。</p>
<p>更加规范正规的版本</p>
<pre><code>template&lt;class Ta,class Tb,class Tc&gt;
Ta abc(const Ta&amp; a,const Tb&amp; b,const Tc&amp; c)
{
  return a+b+c;
}</code></pre><p><b>1.5 返回值</b><br>    return z;<br>在该返回方式中，返回值z会被放到返回值内存空间内，将随着函数结束后内存空间的释放而消失，在未释放前会一直占用内存空间。</p>
<pre><code>T&amp; abc(int i,T&amp; z)</code></pre><p>这是<b>引用返回</b>，返回值将会直接被引用回主函数内，不会将返回值存入内存空间。</p>
<pre><code>const T&amp; abc(int i,T&amp; z)</code></pre><p>这是常量引用返回，返回值中途无法被修改。</p>
<p><b>练习</b><br>1.解释为何下列程序交换函数没有把形参x和y所对应的实参的值交换，如何修改代码可以实现交换？</p>
<pre><code>void swap(int x,int y)
{
  int temp=x;
  x=y;
  y=temp;
}</code></pre><p>答：在该代码片段中设计知识可回看<strong>1.1</strong>部分，由于析构函数会释放函数运行后的内存空间，形参的值不会直接复制给实参，且无返回值和主函数内返回值的接受对象，因此无法实现实参值得转换。可进行修改。</p>
<pre><code>void swap(int&amp; x,int&amp; y)
{
  int temp=x;
  x=y;
  y=temp;
}</code></pre><p>利用<b>引用参数</b>直接引用入实参进行交换，则是一种对实参值的直接交换。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级</title>
    <url>/2021/02/02/Java%E9%AB%98%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="多线程基本概念"><a href="#多线程基本概念" class="headerlink" title="多线程基本概念"></a>多线程基本概念</h2><p>优点：</p>
<ol>
<li>提高应用程序的响应，对图形化界面更有意义，提升用户体验。</li>
<li>提高计算机系统的CPU利用率。</li>
<li>改善程序结构，将复杂的进程分为多个线程，独立运行，利于理解和修改。</li>
</ol>
<p>何时需要多线程：</p>
<ol>
<li>程序需要同时执行两个或两个以上任务。</li>
<li>程序需要实现一些需要等待的任务时，如用户输入、文件读写、网络操作、搜索等。</li>
<li>需要一些后台运行的程序时。</li>
</ol>
<hr>
<h2 id="线程的创建和使用"><a href="#线程的创建和使用" class="headerlink" title="线程的创建和使用"></a>线程的创建和使用</h2><p>创建方式一：继承 Thread 类</p>
<ol>
<li>创建一个继承 Thread 类的子类。</li>
<li>重写 Thread 类的 run()。 –&gt; 将此线程需要进行的操作声明在重写的 run() 中</li>
<li>创建 Thread 类的子类对象。</li>
<li>通过此对象调用 start()。</li>
</ol>
<p>例如需要输出 100 以内的偶数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在主线程加入循环输出“<strong><strong>****</strong></strong>”以此来凸显线程交换</p>
<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">***********</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">18</span><br><span class="line">20</span><br><span class="line">22</span><br><span class="line">24</span><br><span class="line">26</span><br><span class="line">28</span><br><span class="line">30</span><br><span class="line">32</span><br><span class="line">34</span><br><span class="line">36</span><br><span class="line">38</span><br><span class="line">40</span><br><span class="line">42</span><br><span class="line">&#x2F;&#x2F;........</span><br></pre></td></tr></table></figure>

<p>Thread.currentThread() 可以获取到当前操作的线程。</p>
<p>通过输出 Thread.currentThread().getName 可以更直观感受到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>;j++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"：***********"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"："</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">Thread-0：0</span><br><span class="line">Thread-0：2</span><br><span class="line">Thread-0：4</span><br><span class="line">Thread-0：6</span><br><span class="line">Thread-0：8</span><br><span class="line">Thread-0：10</span><br><span class="line">Thread-0：12</span><br><span class="line">Thread-0：14</span><br><span class="line">Thread-0：16</span><br><span class="line">Thread-0：18</span><br><span class="line">Thread-0：20</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">main：***********</span><br><span class="line">Thread-0：22</span><br><span class="line">Thread-0：24</span><br><span class="line">Thread-0：26</span><br><span class="line">Thread-0：28</span><br><span class="line">Thread-0：30</span><br><span class="line">Thread-0：32</span><br><span class="line">Thread-0：34</span><br><span class="line">Thread-0：36</span><br><span class="line">Thread-0：38</span><br><span class="line">Thread-0：40</span><br><span class="line">&#x2F;&#x2F;.......</span><br></pre></td></tr></table></figure>

<hr>
<p>创建方式二：实现 Runnable 接口</p>
<ol>
<li>创建一个实现 Runnable 接口的类。</li>
<li>实现类去实现 Runnable 中的抽象方法 run()。</li>
<li>创建实现类的对象。</li>
<li>将此对象作为参数传递到 Thread 类的构造器中，创建 Thread 类的对象。</li>
<li>通过 Thread 类的对象调用 start()。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MThread mth2 = <span class="keyword">new</span> MThread();</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mth2);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比较两种创建线程的方式：</p>
<p>开发中：优先选择：实现 Runnable 接口的方式。</p>
<p>原因：</p>
<ol>
<li>实现的方式没有类的单继承性的限制。</li>
<li>实现的方式更适合多个线程共享数据。</li>
</ol>
<p>相同：两种方式都需要重写 run() 方法，将线程的执行逻辑声明在 run() 中。</p>
<hr>
<h2 id="线程使用常用方法"><a href="#线程使用常用方法" class="headerlink" title="线程使用常用方法"></a>线程使用常用方法</h2><ul>
<li>void start()：启动线程，并执行对象的 run() 方法。</li>
<li>run()：线程在被调度时执行的操作。</li>
<li>String getName()：返回线程的名称。</li>
<li>void setName(String name)：设置该线程的名称。</li>
<li>static Thread currentThread()：返回当前线程。在 Thread 子类中就是 this，通常用于主线程和 Runnable 实现类。</li>
<li>static void yield()：线程让步<ul>
<li>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程。</li>
<li>若队列中没有同优先级的线程，忽略此方法。</li>
</ul>
</li>
<li>join()：当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止。</li>
<li>static void sleep(long millis)：（指定时间：毫秒）<ul>
<li>令当前活动线程在指定时间段内放弃对CPU的控制，使其他线程有机会被执行，时间到后重新排队。</li>
<li>抛出 InterruptedException 异常</li>
</ul>
</li>
<li>stop()：强制线程生命周期结束。</li>
<li>boolean isAlive()：返回 boolean，判断线程是否存活。</li>
</ul>
<p>以下方法只能使用于同步代码块或同步方法中：</p>
<ul>
<li>wait()：一旦执行此方法，当前线程进入堵塞状态，并释放同步监视器。</li>
<li>notify()：一旦执行此方法就会唤醒被 wait 的一个进程，如果有多个，则唤醒优先级最高的一个。</li>
<li>notifyAll()：一旦执行此方法，唤醒所有 wait 进程。</li>
</ul>
<hr>
<h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><p>调度策略</p>
<ul>
<li>时间片：依次先进先出。</li>
<li>抢占式：高优先级的线程抢占CPU。</li>
</ul>
<p>线程的优先级等级：</p>
<ul>
<li>MAX_PRIORITY：10</li>
<li>MIN_PRIORITY：1</li>
<li>NORM_PRIORITY：5</li>
</ul>
<p>涉及的方法：</p>
<ul>
<li>getPriority()：返回线程优先值。</li>
<li>setPriority()：改变线程的优先值。</li>
</ul>
<p>P.S.</p>
<ul>
<li>线程创建时，继承父线程的优先级。</li>
<li>低优先级只是获得调度的概率低，并非一定是在高优先级线程之后才被调用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.currentThread().setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 线程优先级："</span> + Thread.currentThread().getPriority() + <span class="string">"：***********"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">" 线程优先级："</span> + getPriority() + <span class="string">"："</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">Thread-0 线程优先级：10：0</span><br><span class="line">Thread-0 线程优先级：10：2</span><br><span class="line">Thread-0 线程优先级：10：4</span><br><span class="line">Thread-0 线程优先级：10：6</span><br><span class="line">Thread-0 线程优先级：10：8</span><br><span class="line">Thread-0 线程优先级：10：10</span><br><span class="line">Thread-0 线程优先级：10：12</span><br><span class="line">Thread-0 线程优先级：10：14</span><br><span class="line">Thread-0 线程优先级：10：16</span><br><span class="line">Thread-0 线程优先级：10：18</span><br><span class="line">Thread-0 线程优先级：10：20</span><br><span class="line">Thread-0 线程优先级：10：22</span><br><span class="line">Thread-0 线程优先级：10：24</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">Thread-0 线程优先级：10：26</span><br><span class="line">Thread-0 线程优先级：10：28</span><br><span class="line">Thread-0 线程优先级：10：30</span><br><span class="line">Thread-0 线程优先级：10：32</span><br><span class="line">Thread-0 线程优先级：10：34</span><br><span class="line">Thread-0 线程优先级：10：36</span><br><span class="line">Thread-0 线程优先级：10：38</span><br><span class="line">Thread-0 线程优先级：10：40</span><br><span class="line">Thread-0 线程优先级：10：42</span><br><span class="line">Thread-0 线程优先级：10：44</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">Thread-0 线程优先级：10：46</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">Thread-0 线程优先级：10：48</span><br><span class="line">main 线程优先级：1：***********</span><br><span class="line">Thread-0 线程优先级：10：50</span><br><span class="line">Thread-0 线程优先级：10：52</span><br><span class="line">&#x2F;&#x2F;......</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h2><p>JDK 中用 Thread.State 类定义了线程的几种状态。</p>
<ul>
<li>新建：当一个 Thread 类或其子类的对象被声明和创建时，新的线程对象处于新建状态。</li>
<li>就绪：处于新建状态的线程被 start() 后，将进入线程队列等待 CPU 时间片，此时它具备了运行的条件，只是没分配到 CPU 资源。</li>
<li>运行：当就绪的线程被调度并获得 CPU 资源时，便进入运行状态，run() 方法定义了线程的操作和功能。</li>
<li>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时终止自己的执行，进入阻塞状态。</li>
<li>死亡：线程完成了它的全部工作或线程被提前强制性的中止或出现异常导致结束。</li>
</ul>
<img src='/img/Java高级/1.png'>

<hr>
<h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><p>示例场景：</p>
<p>创建三个窗口卖票，总票数为 100 张，使用实现 Runnable 接口的方式。</p>
<ol>
<li>问题：卖票过程中，出现了重票、错票 –&gt; 出现了线程的安全问题</li>
<li>问题出现的原因：当某个线程操作车票的过程中，尚未操作完成，其他线程再次参与进来，也操作车票。</li>
<li>解决方式：<br>当一个线程 a 在操作 ticket 的时候，其他线程不能参与进来。直到线程 a 操作完 ticket 时，其余线程才可以操作 ticket。这种情况即使线程 a 处于阻塞状态，也不能被改变。</li>
<li>在 Java 中通过同步机制，来解决线程的安全问题。</li>
</ol>
<p>方式一：同步代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监听器)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>操作共享数据的代码，即为需要被同步的代码。</p>
<p>共享数据：多个线程共同操作的变量，比如：ticket</p>
<p>同步监视器：俗称，锁。任何一个类的对象都可以充当锁。</p>
<p>多个线程必须用通一把锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyThread bt = <span class="keyword">new</span> BuyThread();</span><br><span class="line">        Thread w1 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line">        Thread w2 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line">        Thread w3 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号："</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread-1卖票，票号：100</span><br><span class="line">Thread-1卖票，票号：99</span><br><span class="line">Thread-1卖票，票号：98</span><br><span class="line">Thread-1卖票，票号：97</span><br><span class="line">Thread-1卖票，票号：96</span><br><span class="line">Thread-1卖票，票号：95</span><br><span class="line">Thread-1卖票，票号：94</span><br><span class="line">Thread-1卖票，票号：93</span><br><span class="line">Thread-1卖票，票号：92</span><br><span class="line">Thread-1卖票，票号：91</span><br><span class="line">Thread-1卖票，票号：90</span><br><span class="line">Thread-1卖票，票号：89</span><br><span class="line">Thread-1卖票，票号：88</span><br><span class="line">Thread-1卖票，票号：87</span><br><span class="line">Thread-1卖票，票号：86</span><br><span class="line">Thread-1卖票，票号：85</span><br><span class="line">Thread-1卖票，票号：84</span><br><span class="line">Thread-1卖票，票号：83</span><br><span class="line">Thread-1卖票，票号：82</span><br><span class="line">Thread-1卖票，票号：81</span><br><span class="line">&#x2F;&#x2F;.......</span><br></pre></td></tr></table></figure>

<p>同步好处：解决了线程的安全问题。<br>同步局限性：只能有一个线程参与，其他线程等待。相当于一个单线程的过程，效率低。</p>
<hr>
<p>示例场景：</p>
<p>创建三个窗口卖票，总票数为 100 张，使用继承 Thread 类的方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       BuyThread w1 = <span class="keyword">new</span> BuyThread();</span><br><span class="line">       BuyThread w2 = <span class="keyword">new</span> BuyThread();</span><br><span class="line">       BuyThread w3 = <span class="keyword">new</span> BuyThread();</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号："</span>+ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>方法二：同步方法</p>
<p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明为同步的。</p>
<p>通过实现 Runnable 接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyThread bt = <span class="keyword">new</span> BuyThread();</span><br><span class="line">        Thread w1 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line">        Thread w2 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line">        Thread w3 = <span class="keyword">new</span> Thread(bt);</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号："</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized void xxx() 表示同步方法。</p>
<p>要保证同步方法中所有内容都是被共享的，不能是重复的。</p>
<hr>
<p>通过继承 Thread 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BuyThread w1 = <span class="keyword">new</span> BuyThread();</span><br><span class="line">        BuyThread w2 = <span class="keyword">new</span> BuyThread();</span><br><span class="line">        BuyThread w3 = <span class="keyword">new</span> BuyThread();</span><br><span class="line"></span><br><span class="line">        w1.start();</span><br><span class="line">        w2.start();</span><br><span class="line">        w3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号："</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非静态同步方法，默认同步监视器是：this</p>
<p>静态同步方法，默认同步监视器是：当前类本身</p>
<hr>
<h2 id="使用同步机制改写单例模式"><a href="#使用同步机制改写单例模式" class="headerlink" title="使用同步机制改写单例模式"></a>使用同步机制改写单例模式</h2><p>使用同步机制改写单例模式之懒汉式</p>
<p>方式一：效率较差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//┌──────────────────────────────────────┐</span></span><br><span class="line"><span class="comment">//│           抽象的线程等待区            │</span></span><br><span class="line"><span class="comment">//└──────────────────────────────────────┘</span></span><br><span class="line">        <span class="keyword">synchronized</span> (Bank<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Bank();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有在进入同步代码块前的线程，无论 instance 是否已经实例化都会进入其中进行判断。</p>
<p>方式二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bank</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//┌──────────────────────────────────────┐</span></span><br><span class="line"><span class="comment">//│           抽象的线程等待区            │</span></span><br><span class="line"><span class="comment">//└──────────────────────────────────────┘</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Bank<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="线程的死锁"><a href="#线程的死锁" class="headerlink" title="线程的死锁"></a>线程的死锁</h2><p>死锁：</p>
<ul>
<li>不同线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。</li>
<li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续。</li>
</ul>
<p>解决方法：</p>
<ul>
<li>专门的算法、原则。</li>
<li>尽量减少同步资源的定义。</li>
<li>尽量避免嵌套同步。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringBuffer s1 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        StringBuffer s2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                    s1.append(<span class="string">"a"</span>);</span><br><span class="line">                    s2.append(<span class="string">"1"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                        s1.append(<span class="string">"b"</span>);</span><br><span class="line">                        s2.append(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (s2) &#123;</span><br><span class="line">                    s1.append(<span class="string">"c"</span>);</span><br><span class="line">                    s2.append(<span class="string">"3"</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (s1) &#123;</span><br><span class="line">                        s1.append(<span class="string">"d"</span>);</span><br><span class="line">                        s2.append(<span class="string">"4"</span>);</span><br><span class="line"></span><br><span class="line">                        System.out.println(s1);</span><br><span class="line">                        System.out.println(s2);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码在运行过程中可能不会产生输出并持续保持运行状态，即进入了死锁状态。</p>
<hr>
<h2 id="Lock（锁）"><a href="#Lock（锁）" class="headerlink" title="Lock（锁）"></a>Lock（锁）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//1. 实例化ReentrantLock类的对象lock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//2. 将需要同步的代码用try包起来，并调用lock() 方法</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"卖票，票号："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3. 当运行完后进行解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>synchronized 与 Lock 的异同：</p>
<p>相同：二者都可以解决线程安全问题。</p>
<p>不同：</p>
<p>synchronized 机制在执行完相应的同步代码后，自动释放同步监视器。</p>
<p>Lock 需要手动的启动同步（lock()）和手动的结束同步（unlock()）。</p>
<hr>
<p>sleep() 和 wait() 的异同：</p>
<p>相同：一旦执行方法，都可使当前线程进入堵塞状态。</p>
<p>不同：</p>
<ol>
<li>两个方法声明位置不同：Thread 类中声明 sleep()，Object 类中声明 wait()。</li>
<li>调用的要求不同：sleep() 可以在任何需要的场景使用，wait() 只能在同步代码块或同步方法中使用。</li>
<li>关于是否释放同步监视器：如果两个方法都在同步代码块或同步方法中，sleep() 不会释放同步监视器，wait() 会释放同步监视器。</li>
</ol>
<hr>
<h2 id="实现-Callable-接口"><a href="#实现-Callable-接口" class="headerlink" title="实现 Callable 接口"></a>实现 Callable 接口</h2><p>Future 接口：</p>
<ul>
<li>可以对具体 Runnable。Callable 任务的执行结果进行取消、查询是否完成、获取结果等。</li>
<li>FutrueTask 同时实现了 Runnable、Callable 接口。它既作为 Runnable 线程被执行，又可以作为 Future 得到的 Callable 的返回值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Callable接口实现类的对象</span></span><br><span class="line">        CallThread ct = <span class="keyword">new</span> CallThread();</span><br><span class="line">        <span class="comment">//4. 将此Callable接口实现类的对象作为参数传递到FutureTask构造器中，创建FutureTask对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(ct);</span><br><span class="line">        <span class="comment">//5. 将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6. 获取Callable中的call()的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个Callable接口的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//2. 重写call()，将此线程需要进行的操作声明在call()中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">10</span><br><span class="line">12</span><br><span class="line">14</span><br><span class="line">16</span><br><span class="line">18</span><br><span class="line">20</span><br><span class="line">22</span><br><span class="line">.......</span><br><span class="line">96</span><br><span class="line">98</span><br><span class="line">2450</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h2><p>提前创好多个线程，放入线程池中，使用时直接获取，使用完放回池中。避免频繁创建销毁、实现重复利用。</p>
<p>好处：</p>
<ul>
<li>提高响应速度</li>
<li>降低资源消耗</li>
<li>便于线程管理</li>
</ul>
<p>ExecutorService：真正的线程池接口。常见子类ThreadPoolExecutor</p>
<ul>
<li>void execute(Runnable command)：执行任务/命令，没有返回值，一般用来执行 Runnable。</li>
<li><T>Future<T>submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable。</li>
<li>void shutdown()：关闭连接池。</li>
</ul>
<p>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池。</p>
<ul>
<li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池。</li>
<li>Executors.newFixedThreadPool()：创建一个可重用固定线程数的线程池。</li>
<li>Executors.newSingleThreadExecutor()：创建一个只有一个线程的线程池。</li>
<li>Executors.newScheduledThreadPool(n)：创建一个线程池，可以安排在给定延迟后运行命令或者定期执行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定数量线程的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//2. 执行指定的线程的操作</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread1());</span><br><span class="line">        service.execute(<span class="keyword">new</span> NumberThread2());</span><br><span class="line">        <span class="comment">//3. 关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"："</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumberThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"："</span>+i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pool-1-thread-2：1</span><br><span class="line">pool-1-thread-1：0</span><br><span class="line">pool-1-thread-2：3</span><br><span class="line">pool-1-thread-1：2</span><br><span class="line">pool-1-thread-1：4</span><br><span class="line">pool-1-thread-2：5</span><br><span class="line">pool-1-thread-1：6</span><br><span class="line">pool-1-thread-2：7</span><br><span class="line">pool-1-thread-2：9</span><br><span class="line">pool-1-thread-1：8</span><br><span class="line">pool-1-thread-2：11</span><br><span class="line">pool-1-thread-1：10</span><br><span class="line">pool-1-thread-1：12</span><br><span class="line">pool-1-thread-1：14</span><br><span class="line">pool-1-thread-2：13</span><br><span class="line">pool-1-thread-2：15</span><br><span class="line">&#x2F;&#x2F;.......</span><br></pre></td></tr></table></figure>

<p>到此为止，创建多线程有四种方法。</p>
<hr>
<h1 id="Java-常用类"><a href="#Java-常用类" class="headerlink" title="Java 常用类"></a>Java 常用类</h1><h2 id="字符串相关类"><a href="#字符串相关类" class="headerlink" title="字符串相关类"></a>字符串相关类</h2><p>String：</p>
<ul>
<li><p>String：字符串，使用一对” “引起来表示。</p>
</li>
<li><p>String 声明为 final 的，不可被继承。</p>
</li>
<li><p>String 实现了 serializable 接口，表示字符串是可以序列化的。</p>
<p>  实现了 Comparable 接口，表示 String 可以比较大小。</p>
</li>
<li><p>String 内部定义了 final char[] value（有些版本为final byte[] value） 用于存储字符串数据</p>
</li>
<li><p>String 代表不可变的字符序列。</p>
<p>  当字符串重新赋值时，需重写指定内存区域赋值，不能使用原有 value 赋值。字符串赋值的过程类似于调用数据而不是创造数据。</p>
<p>  当新赋值一个字符串，会在字符串常量池中，创建一个等待赋值的数据，并赋予其地址值，随后给要赋值的字符串指向该地址值，以此完成赋值操作。因此拥有相同值的字符串实际上是都指向了同一片内存空间，当其中一个要重新赋值时，并非修改原本指向的内存空间中的值，而是在字符串常量池中重新寻找待赋值的数据（如果没有就创建），然后在指向其内存地址。</p>
<p>  如图：</p>
  <img src='/img/Java高级/2.png'>

<p>  当调用 String 的 replace() 方法修改指定字符或字符串时，也需要重新指定内存区域。</p>
</li>
</ul>
<p>String 对象的创建如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = “Hello”;   <span class="comment">//声明一个字符串赋值"Hello"</span></span><br><span class="line"></span><br><span class="line">String str = <span class="keyword">new</span> String();      <span class="comment">//声明一个字符串，默认不赋值</span></span><br><span class="line"></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);       <span class="comment">//声明一个字符串，赋值"Hello"</span></span><br><span class="line"></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="keyword">char</span>[] a);       <span class="comment">//声明一个字符串，赋值数组a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个字符串，赋值从数组a下标为startindex的元素起始的count个元素        </span></span><br><span class="line">String str = <span class="keyword">new</span> STring(<span class="keyword">char</span>[] a,<span class="keyword">int</span> startindex,<span class="keyword">int</span> count);</span><br></pre></td></tr></table></figure>

<p>通过 new 进行赋值的 String 对象是在堆空间中开辟一片内存空间存储 value，而堆空间的 value 的值又是从字符串常量池中寻找调用，也就是 String 对象指向 堆空间中的地址值，而堆空间内又指向字符串常量池中的地址值，因此会有：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"123"</span>;</span><br><span class="line">String str2 = <span class="string">"123"</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">"123"</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">"123"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(str1 == str2);</span><br><span class="line">System.out.println(str1 == str3);</span><br><span class="line">System.out.println(str3 == str4);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>因此引出提问：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br></pre></td></tr></table></figure>

<p>以上方式在内存中创建了几个对象：两个（堆空间一个、常量池一个）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"Java"</span>;</span><br><span class="line">String s2 = <span class="string">"EE"</span>;</span><br><span class="line"></span><br><span class="line">String s3 = <span class="string">"JavaEE"</span>;</span><br><span class="line">String s4 = <span class="string">"Java"</span> + <span class="string">"EE"</span>;</span><br><span class="line">String s5 = s1 + <span class="string">"EE"</span>;</span><br><span class="line">String s6 = <span class="string">"Java"</span> + s2;</span><br><span class="line">String s7 = s1 + s2;</span><br><span class="line">String s8 = s5.intern();</span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s4);   <span class="comment">//true</span></span><br><span class="line">System.out.println(s3 == s5);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s6);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s7);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s6);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s5 == s7);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s6 == s7);   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(s3 == s8);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>常量与常量拼接的结果在常量池中，因此比对是常量池与常量池比对，相同肯定为 true，但有变量参与，中间是涉及堆空间，因此比对为 false。</p>
<p>而通过 intern() 赋值的变量是直接在常量池中寻找数据，因此比对是 true。</p>
<hr>
<p><b>String  与 char[] 之间的转换</b></p>
<p>String –&gt; char[]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc123"</span>;</span><br><span class="line"><span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;charArray.length;i++)&#123;</span><br><span class="line">    System.out.print(charArray[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a b c 1 2 3</span><br></pre></td></tr></table></figure>

<p>char[] –&gt; String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello</span><br></pre></td></tr></table></figure>

<hr>
<p><b>String 与 byte[] 之间的转换</b></p>
<p>编码：String –&gt; byte[]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc123北京"</span>;</span><br><span class="line"><span class="keyword">byte</span>[] byt = str1.getBytes();   <span class="comment">//默认字符集转换</span></span><br><span class="line">System.out.println(Arrays.toString(byt));</span><br><span class="line"><span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">"gbk"</span>);     <span class="comment">//GBK字符集转换</span></span><br><span class="line">System.out.println(Arrays.toString(gbks));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[97, 98, 99, 49, 50, 51, -27, -116, -105, -28, -70, -84]</span><br><span class="line">[97, 98, 99, 49, 50, 51, -79, -79, -66, -87]</span><br></pre></td></tr></table></figure>

<hr>
<p>解码：byte[] –&gt; String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str2 = <span class="keyword">new</span> String(byt);  <span class="comment">//转换默认字符集</span></span><br><span class="line">System.out.println(str2);</span><br><span class="line">str2 = <span class="keyword">new</span> String(gbks,<span class="string">"gbk"</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abc123北京</span><br><span class="line">abc123北京</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="String-常用方法"><a href="#String-常用方法" class="headerlink" title="String 常用方法"></a>String 常用方法</h2><ul>
<li>int length()：返回字符串长度  <code>return value.length</code></li>
<li>char charAt(int index)：返回某索引处的字符    <code>return value[index]</code></li>
<li>boolean isEmpty()：判断是否为空字符串     <code>return value.length == 0</code></li>
<li>String toLowerCase()：使用默认语言环境，将字符串中所有字符转换为小写</li>
<li>String toUpperCase()：使用默认语言环境，将字符串中所有字符转换为大写</li>
<li>String trim()：返回字符串的副本，忽略前导空白和尾部空白</li>
<li>boolean equals(Object obj)：比较字符串的内容是否相同</li>
<li>boolean equalsIgnoreCase(String anotherString)：与 equals 方法类似，忽略大小写</li>
<li>String concat(String str)：将指定字符串连接到该字符串的结尾</li>
<li>int compareTo(String anotherString)：比较两个字符串的大小</li>
<li>String substring(int beginIndex)：返回一个新字符串，它是此字符串从 beginIndex 开始截取到最后一个子字符串</li>
<li>String substring(int beginIndex, int endIndex)：返回一个新字符串，它是此字符串从 beginIndex 开始截取到 endIndex （不包含）的一个子字符串</li>
<li>boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</li>
<li>boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</li>
<li>boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</li>
<li>boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</li>
<li>int indexOf(String str)：返回指定子字符串在此字符串中第一次出现的索引位置</li>
<li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定索引开始</li>
<li>int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</li>
<li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定索引开始反向搜索 </li>
<li>String replace(char oldChar,char newChar)：返回一个新的字符串，它是通过 newChar 替换此字符串中出现的所有 oldChar 所得到的</li>
<li>String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换此字符串所有匹配字面值目标序列的子字符串</li>
<li>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串</li>
<li>String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定正则表达式第一个子字符串</li>
<li>boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式</li>
<li>String[] split(String regex)：根据给定的正则表达式的匹配分拆此字符串</li>
<li>String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过 limit 个，如果超过了，剩下的全部放在最后一个元素中</li>
</ul>
<hr>
<h2 id="StringBuffer-与-StringBuilder"><a href="#StringBuffer-与-StringBuilder" class="headerlink" title="StringBuffer 与 StringBuilder"></a>StringBuffer 与 StringBuilder</h2><p>String、StringBuffer 与 StringBuilder 异同：</p>
<p>不同：</p>
<ul>
<li>String：不可变的字符序列。</li>
<li>StringBuffer：可变的字符序列、线程安全、效率低</li>
<li>StringBuilder：可变的字符序列、线程不安全、效率高</li>
</ul>
<p>相同：</p>
<ul>
<li>三者底层都是利用 char[] 存储</li>
</ul>
<p>String 与 StringBuffer 底层分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(); <span class="comment">//char value = new char[0];</span></span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);    <span class="comment">//cahr value = new char[]&#123;'a','b','c'&#125;;</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb1 = <span class="keyword">new</span> StringBuffer();  <span class="comment">//char value = new char[16]; 底层创建了默认长度为16的数组</span></span><br><span class="line">sb1.append(<span class="string">'a'</span>);    <span class="comment">//value[0] = 'a';</span></span><br><span class="line">sb1.append(<span class="string">'b'</span>);    <span class="comment">//value[1] = 'b';</span></span><br><span class="line"></span><br><span class="line">StringBuffer sb2 = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>); <span class="comment">//char value = new char["abc".length() + 16]; 底层创建的默认数组会在16的基础上加上初始化value的数值长度</span></span><br><span class="line"><span class="comment">//sb2.append("abc");</span></span><br></pre></td></tr></table></figure>

<p>当 StringBuffer 初始16长度盛不下的时候，需要数组扩容，默认扩容长度为 原有长度的 2 倍 + 2，将原本数组中的元素复制到新的数组中。开发中尽量使用 StringBuffer 和 StringBuilder</p>
<p>StringBuffer 常用方法</p>
<ul>
<li>append(xxx)：提供了众多 append() 方法，用于字符串拼接。</li>
<li>delete(int start, int end)：删除指定位置的内容。</li>
<li>replace(int start, int end, String str)：将指定区域内容替换为 str。</li>
<li>insert(int offset, xxx)：在 offset 位置插入 xxx。</li>
<li>reverse()：将字符序列逆转。</li>
<li>char setCharAt(int n, char ch)：将位置为 n 的字符替换为 ch。</li>
</ul>
<hr>
<h2 id="旧的时间-API"><a href="#旧的时间-API" class="headerlink" title="旧的时间 API"></a>旧的时间 API</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//返回当前时间与1970年1月1日00:00:00之间以毫秒为单位的时间差（也称为时间戳）</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date1 = <span class="keyword">new</span> Date();    <span class="comment">//默认为当前时间</span></span><br><span class="line">System.out.println(date1.toString());   <span class="comment">//返回当前时间</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sun Seb 06 15:35:05 CST 2021</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(date1.getTime());    <span class="comment">//时间戳与currentTimeMillis()作业相同</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date2 = <span class="keyword">new</span> Date(<span class="number">1559107318619L</span>);  <span class="comment">//返回指定时间</span></span><br><span class="line">System.out.println(date2.toString());</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wed May 29 13:21:58 CST 2019</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回数据库日期格式</span></span><br><span class="line">java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">1559107318619L</span>);</span><br><span class="line">System.out.println(date3.toString());</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-05-29</span><br></pre></td></tr></table></figure>

<p>SimpleDateFormat：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date3 = <span class="keyword">new</span> Date(<span class="number">1559107318619L</span>);</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line">System.out.println(date3.toString());</span><br><span class="line"><span class="comment">//格式化：日期 ---&gt; 字符串</span></span><br><span class="line">String format = sdf.format(date3);</span><br><span class="line">System.out.println(format);</span><br><span class="line"><span class="comment">//解析：字符串 ---&gt; 日期</span></span><br><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"2021/1/29 下午5:21"</span>);    <span class="comment">//默认构造器情况下</span></span><br><span class="line">Date date4 = sdf.parse(str);</span><br><span class="line">System.out.println(date4.toString());</span><br><span class="line"><span class="comment">//非默认构造器格式化</span></span><br><span class="line">SimpleDateFormat sdf2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"h:mm a"</span>); <span class="comment">//h：小时，m：分钟，a：时间状态，y：年，d：天……</span></span><br><span class="line">format = sdf2.format(date3);</span><br><span class="line">System.out.println(format);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Wed May 29 13:21:58 CST 2019</span><br><span class="line">2019&#x2F;5&#x2F;29 下午1:21</span><br><span class="line">Fri Jan 29 17:21:00 CST 2021</span><br><span class="line">1:21 下午</span><br></pre></td></tr></table></figure>

<p>Calendar（一个抽象类）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar cal = Calendar.getInstance();</span><br><span class="line"><span class="comment">//get()</span></span><br><span class="line"><span class="keyword">int</span> days = cal.get(Calendar.DAY_OF_MONTH);<span class="comment">//这个月的第几天</span></span><br><span class="line">System.out.println(days);</span><br><span class="line">days = cal.get(Calendar.DAY_OF_WEEK);<span class="comment">//这个周的第几天</span></span><br><span class="line">System.out.println(days);</span><br><span class="line"><span class="comment">//set()</span></span><br><span class="line">cal.set(Calendar.DAY_OF_MONTH, <span class="number">22</span>);<span class="comment">//将原本这个月的第几天修改为指定数值</span></span><br><span class="line">days = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(days);</span><br><span class="line"><span class="comment">//add()</span></span><br><span class="line">cal.add(Calendar.DAY_OF_MONTH, <span class="number">3</span>);<span class="comment">//在当月第几天基础上加上指定天数</span></span><br><span class="line">days = cal.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">System.out.println(days);</span><br><span class="line"><span class="comment">//getTime()：日历类 ---&gt; Date</span></span><br><span class="line">Date date = cal.getTime();<span class="comment">//获取当前日期的时间</span></span><br><span class="line">System.out.println(date);</span><br><span class="line"><span class="comment">//setTime()：Date ---&gt; 日历类</span></span><br><span class="line">Date date1 = <span class="keyword">new</span> Date(<span class="number">1559107318619L</span>);</span><br><span class="line">cal.setTime(date1);</span><br><span class="line">days = cal.get(Calendar.DAY_OF_MONTH);<span class="comment">//获取被格式化后的当月天数</span></span><br><span class="line">System.out.println(days);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">1</span><br><span class="line">22</span><br><span class="line">25</span><br><span class="line">Fri Mar 25 16:44:29 CST 2022</span><br><span class="line">29</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>获取的月份：一月是 0，十二月是 11。</p>
<p>获取的周内日期：周日是 1，周六是 7。</p>
<hr>
<h2 id="新的时间-API"><a href="#新的时间-API" class="headerlink" title="新的时间 API"></a>新的时间 API</h2><img src='/img/Java高级/3.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//now()：获取当前的日期、时间</span></span><br><span class="line">LocalDate ld = LocalDate.now();</span><br><span class="line">LocalTime lt = LocalTime.now();</span><br><span class="line">LocalDateTime ldt = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">System.out.println(ld);</span><br><span class="line">System.out.println(lt);</span><br><span class="line">System.out.println(ldt);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-02-06</span><br><span class="line">17:07:45.838510</span><br><span class="line">2021-02-06T17:07:45.838510</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//of()：设置指定的年、月、日、时、分、秒</span></span><br><span class="line">LocalDateTime ldt = LocalDateTime.of(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">19</span>,<span class="number">24</span>,<span class="number">31</span>);</span><br><span class="line">System.out.println(ldt);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-01-01T19:24:31</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ldt.getDayOfMonth());<span class="comment">//获取当月第几天</span></span><br><span class="line">System.out.println(ldt.getDayOfWeek());<span class="comment">//获取当周第几天</span></span><br><span class="line">System.out.println(ldt.getMonthValue());<span class="comment">//获取几月</span></span><br><span class="line">System.out.println(ldt.getMinute());<span class="comment">//获取当前分钟</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">FRIDAY</span><br><span class="line">1</span><br><span class="line">24</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//体现不可变性，不再原数据上修改</span></span><br><span class="line"><span class="comment">//withXxx()：设置相关属性</span></span><br><span class="line">LocalDateTime ldt1 = ldt.withDayOfMonth(<span class="number">22</span>);<span class="comment">//修改当月的第几天</span></span><br><span class="line">System.out.println(ldt1);</span><br><span class="line">System.out.println(ldt);</span><br><span class="line">LocalDateTime ldt2 = ldt.withHour(<span class="number">5</span>);<span class="comment">//修改当前小时数</span></span><br><span class="line">System.out.println(ldt2);</span><br><span class="line">System.out.println(ldt);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-01-22T19:24:31</span><br><span class="line">2021-01-01T19:24:31</span><br><span class="line">2021-01-01T05:24:31</span><br><span class="line">2021-01-01T19:24:31</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//plusXxx()</span></span><br><span class="line">LocalDateTime ldt3 = ldt.plusMonths(<span class="number">5</span>);<span class="comment">//原有月数上加上多少月</span></span><br><span class="line">System.out.println(ldt);</span><br><span class="line">System.out.println(ldt3);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-01-01T19:24:31</span><br><span class="line">2021-06-01T19:24:31</span><br></pre></td></tr></table></figure>

<hr>
<p><b>instant</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant instant = Instant.now();</span><br><span class="line">System.out.println(instant);    <span class="comment">//默认为本初子午线时间</span></span><br><span class="line">OffsetDateTime newInstant = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));<span class="comment">//北京时间处于东八区</span></span><br><span class="line">System.out.println(newInstant);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-02-06T11:24:43.405087500Z</span><br><span class="line">2021-02-06T19:24:43.405087500+08:00</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> mil = instant.toEpochMilli();<span class="comment">//获取instant对应的毫秒数</span></span><br><span class="line">System.out.println(mil);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1559800168274L</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Instant instant1 = Instant.ofEpochMilli(<span class="number">1559800168274L</span>);<span class="comment">//获取指定时间戳对应的时间</span></span><br><span class="line">System.out.println(instant1);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-06-06T05:49:28.274Z</span><br></pre></td></tr></table></figure>

<hr>
<p><b>DateTimeFormatter</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DateTimeFormatter：格式化或解析时间、日期</span></span><br><span class="line">DateTimeFormatter dtf = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line"><span class="comment">//格式化：日期 --&gt; 字符串</span></span><br><span class="line">LocalDateTime ldt4 = LocalDateTime.now();</span><br><span class="line">String str = dtf.format(ldt4);</span><br><span class="line">System.out.println(ldt4);</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">//解析：字符串 --&gt; 日期</span></span><br><span class="line">TemporalAccessor parse = dtf.parse(<span class="string">"2021-02-06T19:37:30.2198616"</span>);</span><br><span class="line">System.out.println(parse);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-02-06T19:37:30.219861600</span><br><span class="line">2021-02-06T19:37:30.2198616</span><br><span class="line">&#123;&#125;,ISO resolved to 2021-02-06T19:37:07.422504200</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本地化相关格式 ofLocalizedDateTime()</span></span><br><span class="line">DateTimeFormatter dtf2 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">String str2 = dtf2.format(ldt);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021&#x2F;1&#x2F;1 下午7:24</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常用：自定义格式化 ofPattern()</span></span><br><span class="line">DateTimeFormatter dtf3 = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">String str3 = dtf3.format(ldt);</span><br><span class="line">System.out.println(str3);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2021-01-01 07:24:31</span><br></pre></td></tr></table></figure>

<p>补充：</p>
<img src='/img/Java高级/4.png'>

<hr>
<h2 id="Java-比较器"><a href="#Java-比较器" class="headerlink" title="Java 比较器"></a>Java 比较器</h2><p>Java 正常情况下只能进行 “==” 或 “!=” 的比较。</p>
<p>当需要进行大小比较时，需要使用接口 Comparable 或 Comparator</p>
<p><b>Comparable</b></p>
<p>像 String、包装类等实现了 Comparable 接口，重写了 compareTo(obj) 方法，给出了比较两个对象大小的方式。</p>
<p>重写 compareTo() 方法后，进行了从小到大的排序。</p>
<p>重写 compareTo() 的规则：</p>
<ul>
<li>如果当前对象 this 大于形参对象 obj，则返回正整数。</li>
<li>如果当前对象 this 小于形参对象 obj，则返回负整数。</li>
<li>如果当前对象 this 等于形参对象 obj，则返回 0。</li>
</ul>
<p>如果自定义类需要排序，则要实现 Comparable 接口。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Goods类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name,<span class="keyword">int</span> price)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Goods&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price="</span> + price +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">            Goods goods = (Goods) o;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.price&gt; goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price&lt;goods.price)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(goods.name);<span class="comment">//当价格一样时，按照名称从低到高排</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的数据非法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line">Goods[] goods = <span class="keyword">new</span> Goods[<span class="number">4</span>];</span><br><span class="line">goods[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"小米"</span>,<span class="number">3999</span>);</span><br><span class="line">goods[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"华为"</span>,<span class="number">2999</span>);</span><br><span class="line">goods[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"苹果"</span>,<span class="number">6999</span>);</span><br><span class="line">goods[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"vivo"</span>,<span class="number">2499</span>);</span><br><span class="line"></span><br><span class="line">Arrays.sort(goods);</span><br><span class="line">System.out.println(Arrays.toString(goods));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Goods&#123;name&#x3D;&#39;vivo&#39;, price&#x3D;2499&#125;, Goods&#123;name&#x3D;&#39;华为&#39;, price&#x3D;2999&#125;, Goods&#123;name&#x3D;&#39;小米&#39;, price&#x3D;3999&#125;, Goods&#123;name&#x3D;&#39;苹果&#39;, price&#x3D;6999&#125;]</span><br></pre></td></tr></table></figure>

<hr>
<p><b>Comparator 定制排序</b></p>
<p>当元素的类型没有实现 Comparable 接口而又不方便修改代码，或实现了 java.lang.Comarable 接口的排序规则不适合当前操作，则可以使用定制排序。</p>
<p>如需要字符串从大到小排列：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>,<span class="string">"CC"</span>,<span class="string">"BB"</span>,<span class="string">"KK"</span>,<span class="string">"FF"</span>,<span class="string">"EE"</span>&#125;;</span><br><span class="line">Arrays.sort(arr,<span class="keyword">new</span> Comparator()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String s1 = (String) o1;</span><br><span class="line">            String s2 = (String) o2;</span><br><span class="line">            <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据不合法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[KK, FF, EE, CC, BB, AA]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="System、Math、BigInteger、BigDecimal"><a href="#System、Math、BigInteger、BigDecimal" class="headerlink" title="System、Math、BigInteger、BigDecimal"></a>System、Math、BigInteger、BigDecimal</h2><p><b>System</b></p>
<ul>
<li>void gc()：请求系统进行垃圾回收</li>
<li>void exit(int status)：退出程序，当 status 为 0 时为正常退出，当 status 不为 0 时，为异常退出。</li>
<li>String getProperty(String key)：获取系统中属性名为 key 的属性的对应值。</li>
</ul>
<p><b>Math</b></p>
<img src='/img/Java高级/5.png'>

<p><b>BigInteger、BigDecimal</b></p>
<p>BigInteger 可以表示不可变的任意精度的整数。</p>
<p>BigInteger(String val)：根据字符串构建 BigInteger 对象。</p>
<img src='/img/Java高级/6.png'>

<p>而 BigDecimal 对应的是浮点型。</p>
<p>public BigDecimal(String val)<br>public BigDecimal(double val)</p>
<img src='/img/Java高级/7.png'>

<hr>
<h1 id="枚举类与注解"><a href="#枚举类与注解" class="headerlink" title="枚举类与注解"></a>枚举类与注解</h1><h2 id="枚举类的使用"><a href="#枚举类的使用" class="headerlink" title="枚举类的使用"></a>枚举类的使用</h2><p>当需要定义一组常量时，建议使用枚举类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Season&#123;</span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"三月"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"六月"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"九月"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"十二月"</span>);</span><br><span class="line"></span><br><span class="line">    Season(String 夏天, String 六月) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src='/img/Java高级/8.png'>

<p>如果枚举类要实现接口，则每个枚举对象都要重写其抽象方法。</p>
<hr>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>在程序运行后，针对所写注解，执行对应操作。</p>
<p>生成文档的相关注解：</p>
<img src='/img/Java高级/9.png'>

<p>编译时进行格式检查相关注解：</p>
<img src='/img/Java高级/10.png'>

<p>自定义注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义注解除了标识作用外，要配上注解的信息处理流程（使用反射）才有意义。</p>
<p>元注解：用于修饰其他注解定义。</p>
<ul>
<li><p>Retention</p>
  <img src='/img/Java高级/11.png'>

  <img src='/img/Java高级/12.png'></li>
<li><p>Target</p>
  <img src='/img/Java高级/13.png'></li>
<li><p>Documented</p>
</li>
<li><p>Inherited</p>
  <img src='/img/Java高级/14.png'>

</li>
</ul>
<p>可重复注解：</p>
<p>创建重复注解声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE,FIELD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>让某个注解可重复</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.FIELD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE,FIELD&#125;)</span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations)  <span class="comment">//可重复关键</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可重复注解使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span>(value = <span class="string">"hi"</span>)</span><br><span class="line"><span class="meta">@MyAnnotation</span>(value = <span class="string">"hei"</span>)</span><br></pre></td></tr></table></figure>

<p>类型注解：</p>
<img src='/img/Java高级/15.png'>

<hr>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="集合简述"><a href="#集合简述" class="headerlink" title="集合简述"></a>集合简述</h2><p>数组在定义多个数据方面的特点：</p>
<ul>
<li>一旦初始化以后，其长度就确定了。</li>
<li>数据一但定义好，其元素类型便确定了。</li>
</ul>
<p>数组在定义多个数据方面的缺点：</p>
<ul>
<li>一旦初始化以后，其长度不可修改。</li>
<li>数组提供的方法很有限、非常不便、效率不高。</li>
<li>获取数组中实际元素的个数的需求，没有现成的属性或方法。</li>
<li>数组存储：有序、可重复，对于无序、不可重复的需求不能满足。</li>
</ul>
<p>Java 集合有两大体系：Collection、Map</p>
<ul>
<li>Collection 接口：单列数据、定义了存取一组对象的方法的集合。<ul>
<li>List：元素有序、可重复的集合<ul>
<li>ArrayList、LinkedList、Vector</li>
</ul>
</li>
<li>Set：元素无序、不可重复的集合<ul>
<li>HashSet、LinkedHashSet、TreeSet</li>
</ul>
</li>
</ul>
</li>
<li>Map 接口：双列数据，保存具有映射关系“key-value对”的集合。<ul>
<li>HashMap、LinkedHashMap、TreeMap、Hashtable、Properties</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><p>相关的一些方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection col = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add()：将元素添加入集合中</span></span><br><span class="line">        col.add(<span class="string">"AA"</span>);</span><br><span class="line">        col.add(<span class="string">"BB"</span>);</span><br><span class="line">        col.add(<span class="number">123</span>);</span><br><span class="line">        col.add(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">"********** add() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//size()：获取元素的个数</span></span><br><span class="line">        System.out.println(col.size());</span><br><span class="line">        System.out.println(<span class="string">"********** size() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll)：将coll中的元素添加到当前集合</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="string">"CC"</span>);</span><br><span class="line">        coll.add(<span class="string">"DD"</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"EE"</span>));</span><br><span class="line">        col.addAll(coll);</span><br><span class="line"></span><br><span class="line">        System.out.println(col.size());</span><br><span class="line">        System.out.println(col);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"********** addAll() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//contains(Object obj)：判断当前集合中是否存在 obj</span></span><br><span class="line">        <span class="keyword">boolean</span> cont = col.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(cont);</span><br><span class="line">        System.out.println(col.contains(<span class="keyword">new</span> String(<span class="string">"EE"</span>))); <span class="comment">//由此了解到判断的是内容而不是相同地址</span></span><br><span class="line">        <span class="comment">//如果是判断自定义类是否存在，则需要在自定义类中重写equals()</span></span><br><span class="line">        System.out.println(<span class="string">"********** contains() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//containsAll(Collection coll)：判断coll中的元素是否在当前集合中都存在</span></span><br><span class="line">        System.out.println(col.contains(coll));</span><br><span class="line">        System.out.println(<span class="string">"********** containsAll() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object obj)：从当前集合中移除obj元素</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line">        col.remove(<span class="string">"AA"</span>);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">"********** remove() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//removeAll(Collection coll)：从当前集合中移除coll集合中存在的所有元素</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        col.removeAll(coll);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">"********** removeAll() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//retainAll(Collection coll)：获取当前集合和coll的交集，并返回给当前集合</span></span><br><span class="line">        col.addAll(coll);</span><br><span class="line">        coll.add(<span class="string">"PP"</span>);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        col.retainAll(coll);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(<span class="string">"********** retainAll() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//equals(Object obj)：判断当前集合与 obj 集合元素是否相同</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.addAll(col);</span><br><span class="line">        System.out.println(col);</span><br><span class="line">        System.out.println(coll1);</span><br><span class="line">        System.out.println(col.equals(coll1));</span><br><span class="line">        System.out.println(<span class="string">"********** equals() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//hashcode()：返回当前对象的hash值</span></span><br><span class="line">        System.out.println(col.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"********** hashCode() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//toArray(Object obj)：集合转化为数组</span></span><br><span class="line">        System.out.println(col);</span><br><span class="line">        Object[] arr = col.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        System.out.println(<span class="string">"********** toArray() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩展：数组转化为集合：asList()</span></span><br><span class="line">        List list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"********** asList() **********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()：情况集合中的元素</span></span><br><span class="line">        col.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty()：判断当前集合是否为空</span></span><br><span class="line">        System.out.println(col.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[AA, BB, 123, Mon Seb 07 09:55:36 CST 2021]</span><br><span class="line">********** add() **********</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">********** size() **********</span><br><span class="line"></span><br><span class="line">7</span><br><span class="line">[AA, BB, 123, Mon Seb 07 09:55:36 CST 2021, CC, DD, EE]</span><br><span class="line">********** addAll() **********</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">********** contains() **********</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line">********** containsAll() **********</span><br><span class="line"></span><br><span class="line">[AA, BB, 123, Mon Seb 07 09:55:36 CST 2021, CC, DD, EE]</span><br><span class="line">[BB, 123, Mon Seb 07 09:55:36 CST 2021, CC, DD, EE]</span><br><span class="line">********** remove() **********</span><br><span class="line"></span><br><span class="line">[CC, DD, EE]</span><br><span class="line">[BB, 123, Mon Seb 07 09:55:36 CST 2021]</span><br><span class="line">********** removeAll() **********</span><br><span class="line"></span><br><span class="line">[BB, 123, Mon Seb 07 09:55:36 CST 2021, CC, DD, EE]</span><br><span class="line">[CC, DD, EE, PP]</span><br><span class="line">[CC, DD, EE]</span><br><span class="line">********** retainAll() **********</span><br><span class="line"></span><br><span class="line">[CC, DD, EE]</span><br><span class="line">[CC, DD, EE]</span><br><span class="line">true</span><br><span class="line">********** equals() **********</span><br><span class="line"></span><br><span class="line">2159839</span><br><span class="line">********** hashCode() **********</span><br><span class="line"></span><br><span class="line">[CC, DD, EE]</span><br><span class="line">[CC, DD, EE]</span><br><span class="line">********** toArray() **********</span><br><span class="line"></span><br><span class="line">[AA, BB, CC]</span><br><span class="line">********** asList() **********</span><br><span class="line"></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Iterator-迭代器接口"><a href="#Iterator-迭代器接口" class="headerlink" title="Iterator 迭代器接口"></a>Iterator 迭代器接口</h2><p>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection col = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        col.add(<span class="string">"AA"</span>);</span><br><span class="line">        col.add(<span class="string">"BB"</span>);</span><br><span class="line">        col.add(<span class="string">"CC"</span>);</span><br><span class="line">        col.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line"></span><br><span class="line">        Iterator ite = col.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(ite.hasNext())&#123;</span><br><span class="line">            System.out.println(ite.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"**************"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//上方ite已经遍历到集合末尾，无法重新遍历，因此需要重新添加迭代器</span></span><br><span class="line">        Iterator ite1 = col.iterator();</span><br><span class="line">        <span class="keyword">while</span> (ite1.hasNext())&#123;</span><br><span class="line">            Object obj = ite1.next();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"Tom"</span>.equals(obj))&#123;</span><br><span class="line">                ite1.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator ite2 = col.iterator();</span><br><span class="line">        <span class="keyword">while</span> (ite2.hasNext())&#123;</span><br><span class="line">            System.out.println(ite2.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br><span class="line">Tom</span><br><span class="line">**************</span><br><span class="line"></span><br><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br></pre></td></tr></table></figure>

<p><b>foreach</b></p>
<p>foreach 也可以遍历集合或数组，它的底层是调用 Iterator</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection col = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        col.add(<span class="string">"AA"</span>);</span><br><span class="line">        col.add(<span class="string">"BB"</span>);</span><br><span class="line">        col.add(<span class="string">"CC"</span>);</span><br><span class="line">        col.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素类型 局部变量 : 被遍历的集合)</span></span><br><span class="line">        <span class="keyword">for</span>(Object obj : col)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br><span class="line">Tom</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Collection-子接口之-List-接口"><a href="#Collection-子接口之-List-接口" class="headerlink" title="Collection 子接口之 List 接口"></a>Collection 子接口之 List 接口</h2><img src='/img/Java高级/16.png'>

<p>ArrayList、LinkedList、Vector 三者的异同：</p>
<ul>
<li>同：三个类都实现了 List 接口，存储数据都是有序的、可重复的</li>
</ul>
<p>异：</p>
<ul>
<li>ArrayList：作为 List 接口的主要实现类；线程不安全的，效率高；底层使用 Object[] elementData 存储</li>
<li>LinkedList：底层使用双向链表存储；频繁插入、删除，此类效率比 ArrayList 高</li>
<li>Vector：作为 List 接口的古老实现类；线程安全的，效率低；底层使用 Object[] elementData 存储</li>
</ul>
<p><b>ArrayList</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="comment">//底层Object[] elementData初始化为&#123;&#125;，并为创建数组</span></span><br><span class="line"></span><br><span class="line">list.add(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//第一次调用add()时，底层才创建了长度为10的数组，并将数据1添加到elementData</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">list.add(<span class="number">11</span>)</span><br><span class="line"><span class="comment">//当数据溢出时，默认情况下扩容到原本容量的1.5倍，将原数组复制到新数组当中</span></span><br></pre></td></tr></table></figure>

<p><b>LinkedList</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinkedList list = <span class="keyword">new</span> LinkedList();</span><br><span class="line"><span class="comment">//内部声明了Node类型的first和last属性，默认值为null</span></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//将1封装到Node当中，创建了Node对象</span></span><br><span class="line"><span class="comment">//以下是Node的定义：</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev,E element,Node&lt;E&gt; next)&#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><b>List 常用方法</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(int index,Object ele)：在index位置插入元素ele</span></span><br><span class="line">        list.add(<span class="number">1</span>,<span class="keyword">new</span> String(<span class="string">"Jack"</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean addAll(int index,Collection eles)：从index位置开始将eles中所有元素添加进去</span></span><br><span class="line">        List list1 = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        list.addAll(list1);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(int index)：获取index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int indexOf(Object obj)：返回obj在集合中首次出现的位置</span></span><br><span class="line">        <span class="keyword">int</span> index = list.indexOf(<span class="number">456</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int lastIndexOf(Object obj)：返回obj在集合中最后一次出现的位置</span></span><br><span class="line">        <span class="keyword">int</span> lastindex = list.lastIndexOf(<span class="number">123</span>);</span><br><span class="line">        System.out.println(lastindex);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove(int index)：移除index处的元素，并返回此元素</span></span><br><span class="line">        <span class="comment">//如果删除的是1，则默认是删除索引1而不是数据1，需要对数据进行装箱才能进行删除数据1</span></span><br><span class="line">        Object obj1 = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(obj1);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object set(int index,Object ele)：设置index位置元素为ele</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        list.set(<span class="number">1</span>,<span class="string">"Lucy"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex)：返回从fromIndex到toIndex位置的左臂右开区间的集合元素</span></span><br><span class="line">        List sublist = list.subList(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(sublist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[123, 456, Tom, 123]</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">[123, Jack, 456, Tom, 123]</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">[123, Jack, 456, Tom, 123, 1, 2, 3]</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">[Jack, 456, Tom, 123, 1, 2, 3]</span><br><span class="line">[Jack, Lucy, Tom, 123, 1, 2, 3]</span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">[Tom, 123]</span><br></pre></td></tr></table></figure>

<p>总结常用方法：</p>
<ul>
<li>增：add(Object obj);</li>
<li>删：remove(int index) / remove(Object obj);</li>
<li>改：set(int index, Object ele);</li>
<li>查：get(int index);</li>
<li>插：add(int index, Object ele);</li>
<li>长度：size();</li>
<li>遍历：<ul>
<li>Iterator迭代器</li>
<li>foreach</li>
<li>普通for</li>
</ul>
</li>
</ul>
<hr>
<h2 id="Collection-子接口之-Set-接口"><a href="#Collection-子接口之-Set-接口" class="headerlink" title="Collection 子接口之 Set 接口"></a>Collection 子接口之 Set 接口</h2><img src='/img/Java高级/17.png'>

<p>实现类：</p>
<img src='/img/Java高级/18.png'>

<img src='/img/Java高级/19.png'>

<img src='/img/Java高级/20.png'>

<ul>
<li>HashSet：作为 Set 的主要实现类；线程不安全；可以存储 null 值</li>
<li>LinkedHashSet：作为 HashSet 的子类；遍历其内部时，可以按照添加的顺序遍历，频繁遍历效率高于 HashSet</li>
<li>TreeSet：可以按照添加对象的指定属性，进行排序</li>
</ul>
<p>无序性：存储的数据在底层数组并非按照数组索引的顺序添加的，而是根据数据的 Hash 值进行添加。</p>
<p>不可重复性：保证添加的元素按照 equals() 判断时，不能返回 true，即相同元素只能添加一个</p>
<p>添加元素的过程，以 HashSet 为例：</p>
<ol>
<li>我们向 HashSet 中添加元素 a，首先调用元素 a 所在类的 hashCode() 方法，计算元素 a 的 hash 值，此 hash 值接着通过某种算法计算出 HashSet 底层数组中的存放位置，判断数组上此位置上是否已有元素</li>
<li>如果此位置上没有其他元素，则将 a 添加进去</li>
<li>如果此位置上有其他元素 b（或以链表形式存在的多个元素），则比较元素 a 与 元素 b 的 hash 值，如果 hash 值不相同，则元素 a 添加成功，如果 hash 值相同，则调用元素 a 所在类的 equals() 方法，equals() 返回 true，则添加失败，如果是 false，则添加成功</li>
<li>添加成功的话，原来的元素在数组中，指向元素 a，即将元素 a 添加到该索引位置的链表末尾</li>
<li>总结就是数据结构的哈希表</li>
<li>向 Set 中添加的数据，其所在类一定要重写 hashCode() 和 equals()</li>
</ol>
<p>重写类中的 hashCode，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">    result = <span class="number">31</span> * result + age;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过将一个属性的 hash 值放大，再添加某种特征数据，返回得到的 hash 值重复的可能性更小。</p>
<p><b>LinkedHashSet</b></p>
<p>作为 HashSet 的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据的前一项数据和后一项数据</p>
<img src='/img/Java高级/21.png'>

<p><b>TreeSet</b></p>
<p>向 TreeSet 中添加的对象必须是相同类的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet ts = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        ts.add(<span class="number">10</span>);</span><br><span class="line">        ts.add(<span class="number">11</span>);</span><br><span class="line">        ts.add(-<span class="number">5</span>);</span><br><span class="line">        ts.add(<span class="number">1</span>);</span><br><span class="line">        ts.add(<span class="number">90</span>);</span><br><span class="line">        ts.add(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object obj:ts)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-5</span><br><span class="line">1</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">90</span><br></pre></td></tr></table></figure>

<p>可以看到存储的数据从小到大排序过的</p>
<p>对于添加的是对象的话，需要重写 compareTo() 来决定用什么进行比较排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonTest</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonTest</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"PersonTest&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> PersonTest)&#123;</span><br><span class="line">            PersonTest p = (PersonTest) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(p.name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据非法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeSet ts = <span class="keyword">new</span> TreeSet();</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Tom"</span>,<span class="number">13</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Jack"</span>,<span class="number">71</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Tenny"</span>,<span class="number">30</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Lucy"</span>,<span class="number">17</span>));</span><br><span class="line"></span><br><span class="line">        Iterator itr = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PersonTest&#123;name&#x3D;&#39;Jack&#39;, age&#x3D;71&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Lucy&#39;, age&#x3D;17&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Tenny&#39;, age&#x3D;30&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Tom&#39;, age&#x3D;13&#125;</span><br></pre></td></tr></table></figure>

<p><b>TreeSet 定制排序</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//声明定制排序对象：按照年龄从小到大</span></span><br><span class="line">        Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> PersonTest &amp;&amp; o2 <span class="keyword">instanceof</span> PersonTest)&#123;</span><br><span class="line">                    PersonTest p1 = (PersonTest) o1;</span><br><span class="line">                    PersonTest p2 = (PersonTest) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(p1.getAge(),p2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据非法"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//构造器中参数为定制排序对象</span></span><br><span class="line">        TreeSet ts = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Tom"</span>,<span class="number">13</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Jack"</span>,<span class="number">71</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Tenny"</span>,<span class="number">30</span>));</span><br><span class="line">        ts.add(<span class="keyword">new</span> PersonTest(<span class="string">"Lucy"</span>,<span class="number">17</span>));</span><br><span class="line"></span><br><span class="line">        Iterator itr = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PersonTest&#123;name&#x3D;&#39;Tom&#39;, age&#x3D;13&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Lucy&#39;, age&#x3D;17&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Tenny&#39;, age&#x3D;30&#125;</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Jack&#39;, age&#x3D;71&#125;</span><br></pre></td></tr></table></figure>

<p>定制排序需要靠 compare 进行比较</p>
<hr>
<h2 id="Map-接口"><a href="#Map-接口" class="headerlink" title="Map 接口"></a>Map 接口</h2><img src='/img/Java高级/22.png'>

<p>Map：双列数据，存储 key-value 对的数据</p>
<ul>
<li>HashMap：作为 Map 的主要实现类；线程不安全，效率高；存储 null 的 key 和 value<ul>
<li>LinkedHashMap：保证在遍历 map 元素时，可以按照添加的顺序实现遍历（在原有 HashMap 底层结构的基础上，添加了一对指针，指向前一个和后一个元素）</li>
</ul>
</li>
<li>TreeMap：保证按照添加的 key-value 对进行排序，实现排序遍历，考虑 key 的自然排序或定制排序，底层是红黑树，key 必须是同类型对象</li>
<li>Hashtable：作为 Map 的古老实现类；线程安全，效率低；不能存储 null 的key 和 value<ul>
<li>Properties：常用来处理配置文件。key 和 value 都是 String 类型</li>
</ul>
</li>
</ul>
<p><font color="red"><b>HashMap 底层实现原理</b></font></p>
<ul>
<li>底层数组是 Node[]，而非Entry[]</li>
<li>首次调用 put() 方法时，底层创建长度为 16 的 Node[] 数组</li>
<li>put(key1, value1)：首先，调用 key1 所在类的 hashCode() 计算 key1 的哈希值，此哈希值经过某种算法计算后，得到在 Node[] 数组中存放的位置，如果此位置上数据为空，则添加成功，如果不为空，则此位置存在一个或多个数据，比较 key1 和已经存在的一个或多个数据的哈希值：如果 key1 的哈希值与已经存在的数据的哈希值都不相同，此时 key1-value1 添加成功，如果存在(key2-value2)相同，则继续调用 key1 所在类的 equals() 方法，如果 equals() 返回 false，则添加成功，如果返回 true，则使用 value1 替换 value2</li>
<li>底层结构：数组 + 链表 + 红黑树</li>
<li>某一个位置上的索引中元素以链表形式存储的数据超过 8 个，且当前数组长度超过 64 时，此时索引位置上的所有数据改为红黑树存储</li>
<li>默认扩容方式：扩容为原来容量的 2 倍，并将原有数据复制到新的数组</li>
</ul>
<img src='/img/Java高级/24.png'>

<p>默认加载因子的默认值为 0.75</p>
<p><b>LinkedHashMap 底层实现原理</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码中，该段代码能记录添加元素的先后顺序，可以使得 LinkedHashMap 能够按照元素添加顺序进行遍历</p>
<p>HashSet 的底层实际上就是创建了一个 HashMap</p>
<hr>
<p><b>Map 中存储 key-value 的特点</b></p>
<img src='/img/Java高级/23.png'>

<p>由图：key 用 Set 存储（无序的、不可重复的），value 用 Collection存储（无序的、可重复的），在存入数据时虽然是 <code>put(key,value)</code>，但实际上是存入一个个 Entry，在 put 的时候会自动包装成 <code>entry(key,value)</code> 存入。</p>
<p>一个键值对：key-value 构成了一个 Entry 对象，使用 Set 存储（无序的、不可重复的）</p>
<p>key 所在类要重写 equals() 和 hashCode() （以 HashMap 为例）</p>
<p>value 所在类要重写 equals()</p>
<hr>
<h2 id="Map-中的常用方法"><a href="#Map-中的常用方法" class="headerlink" title="Map 中的常用方法"></a>Map 中的常用方法</h2><img src='/img/Java高级/25.png'>

<p>增、删、改操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//put()：添加单个键值对</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">"CC"</span>, <span class="number">789</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//put()：作用于修改键值对</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//putAll()：将一个Map对象添加进来</span></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"DD"</span>, <span class="number">000</span>);</span><br><span class="line">        map1.put(<span class="string">"EE"</span>, <span class="number">999</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)：移除 key 所在的键值对，并返回</span></span><br><span class="line">        Object value = map.remove(<span class="string">"CC"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="comment">//clear()：清空数据，与map = null不同，只清空数据</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;AA&#x3D;123, BB&#x3D;456, CC&#x3D;789&#125;</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">&#123;AA&#x3D;12, BB&#x3D;456, CC&#x3D;789&#125;</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">&#123;AA&#x3D;12, BB&#x3D;456, CC&#x3D;789, DD&#x3D;0, EE&#x3D;999&#125;</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">&#123;AA&#x3D;12, BB&#x3D;456, DD&#x3D;0, EE&#x3D;999&#125;</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>元素查询操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">"CC"</span>, <span class="number">789</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(Object key)：获取键值为 key 的键值对，并返回</span></span><br><span class="line">        System.out.println(map.get(<span class="string">"BB"</span>));</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsKey(Object key)：是否存在指定的 key 并返回</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="string">"CC"</span>));</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean containsValue(value)：是否存在指定的 value 并返回</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="number">123</span>));</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int size()：返回包含的键值对数量</span></span><br><span class="line">        System.out.println(map.size());</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean isEmpty()：判断 map 是否为空</span></span><br><span class="line">        System.out.println(map.isEmpty());</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean equals(Object obj)：判断当前 map 和参数对象 obj 是否相等</span></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">"BB"</span>, <span class="number">456</span>);</span><br><span class="line">        map1.put(<span class="string">"CC"</span>, <span class="number">789</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map1);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        System.out.println(map.equals(map1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">456</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">true</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">false</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">&#123;AA&#x3D;123, BB&#x3D;456, CC&#x3D;789&#125;</span><br><span class="line">&#123;AA&#x3D;123, BB&#x3D;456, CC&#x3D;789&#125;</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>遍历操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>, <span class="number">456</span>);</span><br><span class="line">        map.put(<span class="string">"CC"</span>, <span class="number">789</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set keySet()：遍历所有的 key 集</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator itr = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            System.out.println(itr.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Colllection values()：遍历所有的 value 集</span></span><br><span class="line">        Collection col = map.values();</span><br><span class="line">        Iterator itr1 = col.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr1.hasNext())&#123;</span><br><span class="line">            System.out.println(itr1.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set entrySet()：遍历所有的key-value</span></span><br><span class="line">        Set seta = map.entrySet();</span><br><span class="line">        Iterator itr2 = seta.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr2.hasNext())&#123;</span><br><span class="line">            System.out.println(itr2.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">789</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">AA&#x3D;123</span><br><span class="line">BB&#x3D;456</span><br><span class="line">CC&#x3D;789</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="TreeHashMap"><a href="#TreeHashMap" class="headerlink" title="TreeHashMap"></a>TreeHashMap</h2><p><b>自然排序：</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMap tm = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        PersonTest p1 = <span class="keyword">new</span> PersonTest(<span class="string">"Rose"</span>,<span class="number">17</span>);</span><br><span class="line">        PersonTest p2 = <span class="keyword">new</span> PersonTest(<span class="string">"Lucy"</span>,<span class="number">18</span>);</span><br><span class="line">        PersonTest p3 = <span class="keyword">new</span> PersonTest(<span class="string">"Tom"</span>,<span class="number">15</span>);</span><br><span class="line">        PersonTest p4 = <span class="keyword">new</span> PersonTest(<span class="string">"Monsey"</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        tm.put(p1, <span class="number">95</span>);</span><br><span class="line">        tm.put(p2, <span class="number">77</span>);</span><br><span class="line">        tm.put(p3, <span class="number">69</span>);</span><br><span class="line">        tm.put(p4, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set ts = tm.entrySet();</span><br><span class="line">        Iterator itr = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            <span class="comment">//改变原有输出形态</span></span><br><span class="line">            Object obj = itr.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" --------&gt; "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//PersonTest 类中的 compareTo 是根据名字从小到大排序的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> PersonTest)&#123;</span><br><span class="line">            PersonTest p = (PersonTest) o;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(p.name);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据非法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PersonTest&#123;name&#x3D;&#39;Lucy&#39;, age&#x3D;18&#125;--------&gt;77</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Monsey&#39;, age&#x3D;17&#125;--------&gt;100</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Rose&#39;, age&#x3D;17&#125;--------&gt;95</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Tom&#39;, age&#x3D;15&#125;--------&gt;69</span><br></pre></td></tr></table></figure>

<p>TreeHashMap 根据 key 所在类的 compareTo() 方法进行了自然排序</p>
<p><b>定制排序：</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TreeMap tm = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> PersonTest &amp;&amp; o2 <span class="keyword">instanceof</span> PersonTest)&#123;</span><br><span class="line">                    PersonTest p1 = (PersonTest) o1;</span><br><span class="line">                    PersonTest p2 = (PersonTest) o2;</span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(p1.getAge(), p2.getAge());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据非法"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        PersonTest p1 = <span class="keyword">new</span> PersonTest(<span class="string">"Rose"</span>,<span class="number">17</span>);</span><br><span class="line">        PersonTest p2 = <span class="keyword">new</span> PersonTest(<span class="string">"Lucy"</span>,<span class="number">18</span>);</span><br><span class="line">        PersonTest p3 = <span class="keyword">new</span> PersonTest(<span class="string">"Tom"</span>,<span class="number">15</span>);</span><br><span class="line">        PersonTest p4 = <span class="keyword">new</span> PersonTest(<span class="string">"Monsey"</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        tm.put(p1, <span class="number">95</span>);</span><br><span class="line">        tm.put(p2, <span class="number">77</span>);</span><br><span class="line">        tm.put(p3, <span class="number">69</span>);</span><br><span class="line">        tm.put(p4, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set ts = tm.entrySet();</span><br><span class="line">        Iterator itr = ts.iterator();</span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext())&#123;</span><br><span class="line">            <span class="comment">//改变原有输出形态</span></span><br><span class="line">            Object obj = itr.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">" --------&gt; "</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PersonTest&#123;name&#x3D;&#39;Tom&#39;, age&#x3D;15&#125; --------&gt; 69</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Rose&#39;, age&#x3D;17&#125; --------&gt; 100</span><br><span class="line">PersonTest&#123;name&#x3D;&#39;Lucy&#39;, age&#x3D;18&#125; --------&gt; 77</span><br></pre></td></tr></table></figure>

<p>在原本的 TreeHashMap() 空参构造器中引入 Comparator() 对象，并重写 compare() 方法，此处是根据年龄从小到大进行排序，因为做排序的指标数据是唯一的，因此上面 p4 对象中年龄与 p1 对象相同，而 p1 对象更先引入，因此无法引入 p4，而原本要给 p4 的 value 被赋给了 p1</p>
<hr>
<h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><img src='/img/Java高级/26.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"JA.properties"</span>); <span class="comment">//将文件读入流</span></span><br><span class="line">        pros.load(fis); <span class="comment">//加载流对应文件</span></span><br><span class="line"></span><br><span class="line">        String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">        String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name + <span class="string">"      "</span> + <span class="string">"password = "</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JA.properties：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name&#x3D;诗文</span><br><span class="line">password&#x3D;shiwen112233</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name &#x3D; 诗文      password &#x3D; shiwen112233</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Collections-工具类"><a href="#Collections-工具类" class="headerlink" title="Collections 工具类"></a>Collections 工具类</h2><img src='/img/Java高级/27.png'>

<p>常用方法：</p>
<img src='/img/Java高级/28.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">45</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(-<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//reverse()：反转</span></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//shuffle()：随机排序</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//sort(list)：自然排序   /   sort(list,Comparator)：定制排序</span></span><br><span class="line">        <span class="comment">//从小到大</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="comment">//从大到小</span></span><br><span class="line">        Collections.sort(list, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> Integer &amp;&amp; o2 <span class="keyword">instanceof</span> Integer)&#123;</span><br><span class="line">                    Integer i1 = (Integer) o1;</span><br><span class="line">                    Integer i2 = (Integer) o2;</span><br><span class="line">                    <span class="keyword">return</span> -Integer.compare(i1, i2);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据非法"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//swap(List list, int index1, int index2)：交换list中两个索引的元素</span></span><br><span class="line">        Collections.swap(list,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int frequnency(List list,Obejct obj)：获取obj在list中存储的频率，并返回</span></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">int</span> fre = Collections.frequency(list,<span class="number">123</span>);</span><br><span class="line">        System.out.println(fre);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//copy(List dest, List src)：将src中的元素复制给dest</span></span><br><span class="line">        <span class="comment">//因为我们预计要将list复制给dest，而复制过程dest的数组长度不能低于list的长度</span></span><br><span class="line">        <span class="comment">//因此可以先将与list等长的空数组赋给dest</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line"></span><br><span class="line">        Collections.copy(dest, list);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(dest);</span><br><span class="line">        System.out.println(<span class="string">"**********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean replaceAll(List list, Object oldVal, Object newVal)：将list数组中oldVal替换为newVal，并返回</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">boolean</span> re = Collections.replaceAll(list, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[123, 45, 1, -9]</span><br><span class="line">[-9, 1, 45, 123]</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[1, -9, 45, 123]</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[-9, 1, 45, 123]</span><br><span class="line">[123, 45, 1, -9]</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[123, 1, 45, -9]</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[123, 1, 45, -9, 123, 123, 123]</span><br><span class="line">4</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[123, 1, 45, -9, 123, 123, 123]</span><br><span class="line">[123, 1, 45, -9, 123, 123, 123]</span><br><span class="line">**********</span><br><span class="line"></span><br><span class="line">[123, 1, 45, -9, 123, 123, 123]</span><br><span class="line">[123, 2, 45, -9, 123, 123, 123]</span><br></pre></td></tr></table></figure>

<p><b>同步控制：synchronizedXxx()</b></p>
<p>可以将指定集合包装成线程安全的集合</p>
<img src='/img/Java高级/29.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">45</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(-<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//新返回的list1是线程安全的</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[123, 45, 1, -9]</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型基础"><a href="#泛型基础" class="headerlink" title="泛型基础"></a>泛型基础</h2><img src='/img/Java高级/30.png'>

<p>设置泛型是为了保证数据类型安全：比如设置为 &lt;Integer&gt; ，则无法存入非 Integer 的数据</p>
<p>泛型不能添加基本数据类型</p>
<p>对于 ArrayList：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">98</span>);</span><br><span class="line">        list.add(<span class="number">76</span>);</span><br><span class="line">        list.add(<span class="number">130</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Integer source: list)&#123;</span><br><span class="line">            <span class="keyword">int</span> src = source;</span><br><span class="line">            System.out.println(src);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">98</span><br><span class="line">76</span><br><span class="line">130</span><br></pre></td></tr></table></figure>

<p>对于 HashMap：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">        map.put(<span class="string">"Tom"</span>, <span class="number">69</span>);</span><br><span class="line">        map.put(<span class="string">"Jack"</span>, <span class="number">79</span>);</span><br><span class="line">        map.put(<span class="string">"Lucy"</span>, <span class="number">77</span>);</span><br><span class="line">        map.put(<span class="string">"Rose"</span>, <span class="number">98</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,Integer&gt;&gt; itr = entry.iterator();</span><br><span class="line">        <span class="keyword">while</span>(itr.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String,Integer&gt; e = itr.next();</span><br><span class="line">            String k = e.getKey();</span><br><span class="line">            Integer v = e.getValue();</span><br><span class="line">            System.out.println(<span class="string">"key: "</span> + k + <span class="string">"--------&gt;"</span> + <span class="string">"value: "</span> + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key: Tom--------&gt;value: 69</span><br><span class="line">key: Rose--------&gt;value: 98</span><br><span class="line">key: Lucy--------&gt;value: 77</span><br><span class="line">key: Jack--------&gt;value: 79</span><br></pre></td></tr></table></figure>

<p><b>自定义泛型类</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将&lt;T&gt;具体为String类型，其中所有T都将被视为String</span></span><br><span class="line">        User&lt;String&gt; user = <span class="keyword">new</span> User&lt;String&gt;(<span class="string">"Tom"</span>,<span class="number">19</span>,<span class="string">"VIP"</span>);</span><br><span class="line">        System.out.println(user.getLevel().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//&lt;T&gt;表示任意类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> T level;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name,<span class="keyword">int</span> age,T level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getLevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLevel</span><span class="params">(T level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class java.lang.String</span><br></pre></td></tr></table></figure>

<p>而继承自定义泛型类的子类若在继承时不写明具体泛型，则默认为 Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigUser</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">User</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigUser bu = <span class="keyword">new</span> BigUser();</span><br><span class="line">bu.setLevel(<span class="number">123</span>);</span><br><span class="line">System.out.println(bu.getLevel().getClass());</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class java.lang.Integer</span><br></pre></td></tr></table></figure>

<p>如果写明泛型类型，则后续创建对象不写泛型也会识别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigUser</span> <span class="keyword">extends</span> <span class="title">User</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigUser bu = <span class="keyword">new</span> BigUser();</span><br><span class="line">bu.setLevel(<span class="number">123</span>);</span><br><span class="line">System.out.println(bu.getLevel().getClass());</span><br></pre></td></tr></table></figure>

<p>报错，类型不匹配</p>
<p><b>注意点：</b></p>
<img src='/img/Java高级/31.png'>

<img src='/img/Java高级/32.png'>

<img src='/img/Java高级/33.png'>

<img src='/img/Java高级/34.png'>

<p>泛型接口与泛型类近似</p>
<p><b>泛型方法</b></p>
<p>在上面涉及的 User 类中加入泛型方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">copyFromList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line">    ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">        list.add(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FXTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将&lt;T&gt;具体为String类型，其中所有T都将被视为String</span></span><br><span class="line">        User&lt;String&gt; user = <span class="keyword">new</span> User&lt;String&gt;(<span class="string">"Tom"</span>,<span class="number">19</span>,<span class="string">"VIP"</span>);</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list= user.copyFromList(arr);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 2, 3, 4, 5, 6]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>通配符：?</p>
<p>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Sting&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">List&lt;Object&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//两者是并列关系，无法直接相互赋值</span></span><br><span class="line"></span><br><span class="line">List&lt;?&gt; list = list1;</span><br><span class="line">list = list2;</span><br><span class="line"><span class="comment">//添加通配符 ? 的List可视作相当于上面两个List的父类，能够获取两个List的值</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在此处show1()无法传入List&lt;Object&gt;，show2()相对的也是这个情况</span></span><br><span class="line"><span class="comment">//而show3()传入的带通配符的List&lt;?&gt;，使用于List&lt;Object&gt;和List&lt;String&gt;，不需要定义同作用的多个方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show1</span><span class="params">(List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">(List&lt;Object&gt; list)</span></span>&#123;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show3</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">    Iterator&lt;?&gt; itr = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        <span class="comment">//因为是使用的通配符，因此只有Object可以承载多种数据接收</span></span><br><span class="line">        Object obj = iterator.next();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;?&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list1.add(<span class="string">"AA"</span>);</span><br><span class="line">list1.add(<span class="string">"BB"</span>);</span><br><span class="line">list1.add(<span class="string">"CC"</span>);</span><br><span class="line"></span><br><span class="line">list = list1;</span><br><span class="line"><span class="comment">//List&lt;?&gt;只能添加null，不能直接添加其他类型数据</span></span><br><span class="line">list.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许读取数据，用Object来接收</span></span><br><span class="line">Object o = list.get(<span class="number">0</span>);</span><br><span class="line">System.out.println(o);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AA</span><br></pre></td></tr></table></figure>

<p><b>有限制条件的通配符</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List &lt;? extends User&gt; list1 = <span class="keyword">null</span>;    <span class="comment">//只能存入User的子类级别或User</span></span><br><span class="line">List &lt;? <span class="keyword">super</span> User&gt; list2 = <span class="keyword">null</span>;      <span class="comment">//只能存入User的父类级别或User</span></span><br><span class="line"></span><br><span class="line">List &lt;Integer&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">List &lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">List &lt;User&gt; list5 = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line"></span><br><span class="line">list1 = list3;  <span class="comment">//可以</span></span><br><span class="line">list1 = list4;  <span class="comment">//报错</span></span><br><span class="line">list2 = list3;  <span class="comment">//报错</span></span><br><span class="line">list2 = list4;  <span class="comment">//可以</span></span><br></pre></td></tr></table></figure>

<hr>
<h1 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h1><h2 id="File-类的使用"><a href="#File-类的使用" class="headerlink" title="File 类的使用"></a>File 类的使用</h2><p>File 类的一个对象代表一个文件或文件目录。</p>
<p>常用构造器：</p>
<img src='/img/Java高级/35.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\hello.text"</span>);   <span class="comment">//绝对路径</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"hey.text"</span>);  <span class="comment">//idea 中当前 moudle 下的相对路径</span></span><br><span class="line">        File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB"</span>,<span class="string">"Jstudy"</span>);  <span class="comment">//获取一个文件目录下的子文件目录或子文件</span></span><br><span class="line">        File file4 = <span class="keyword">new</span> File(file3,<span class="string">"hello.text"</span>);  <span class="comment">//获取某个File对象所指路径下的子文件目录或子文件</span></span><br><span class="line"></span><br><span class="line">        System.out.println(file1);</span><br><span class="line">        System.out.println(file2);</span><br><span class="line">        System.out.println(file3);</span><br><span class="line">        System.out.println(file4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\CODELIB\Jstudy\hello.text</span><br><span class="line">hey.text</span><br><span class="line">D:\CODELIB\Jstudy</span><br><span class="line">D:\CODELIB\Jstudy\hello.text</span><br></pre></td></tr></table></figure>

<hr>
<p>File 常用方法</p>
<img src='/img/Java高级/36.png'>

<img src='/img/Java高级/37.png'>

<img src='/img/Java高级/38.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\hello.txt"</span>);   <span class="comment">//绝对路径</span></span><br><span class="line">        File file2 = <span class="keyword">new</span> File(<span class="string">"hey.txt"</span>);  <span class="comment">//idea 中当前工程下的相对路径，在@Test下是当前Moudle</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getAbsolutePath()：获取绝对路径</span></span><br><span class="line">        System.out.println(file1.getAbsolutePath());</span><br><span class="line">        <span class="comment">//getPath()：获取路径</span></span><br><span class="line">        System.out.println(file1.getPath());</span><br><span class="line">        <span class="comment">//getName()：获取名称</span></span><br><span class="line">        System.out.println(file1.getName());</span><br><span class="line">        <span class="comment">//getParent()：获取上层目录</span></span><br><span class="line">        System.out.println(file1.getParent());</span><br><span class="line">        <span class="comment">//length()：获取文件长度</span></span><br><span class="line">        System.out.println(file1.length());</span><br><span class="line">        <span class="comment">//lastModified()：获取最后一次修改时间</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file1.lastModified()));</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"***********"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(file2.getAbsolutePath());</span><br><span class="line">        System.out.println(file2.getPath());</span><br><span class="line">        System.out.println(file2.getName());</span><br><span class="line">        System.out.println(file2.getParent());</span><br><span class="line">        System.out.println(file2.length());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date(file2.lastModified()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\CODELIB\Jstudy\hello.txt</span><br><span class="line">D:\CODELIB\Jstudy\hello.txt</span><br><span class="line">hello.txt</span><br><span class="line">D:\CODELIB\Jstudy</span><br><span class="line">0</span><br><span class="line">Wed Mar 09 13:59:18 CST 2021</span><br><span class="line"></span><br><span class="line">***********</span><br><span class="line"></span><br><span class="line">D:\CODELIB\Jstudy\hey.txt</span><br><span class="line">hey.txt</span><br><span class="line">hey.txt</span><br><span class="line">null</span><br><span class="line">0</span><br><span class="line">Wed Mar 09 13:59:39 CST 2021</span><br></pre></td></tr></table></figure>

<p>当对 hello.txt 中添加数据 abcdefg 输出变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\CODELIB\Jstudy\hello.txt</span><br><span class="line">D:\CODELIB\Jstudy\hello.txt</span><br><span class="line">hello.txt</span><br><span class="line">D:\CODELIB\Jstudy</span><br><span class="line">7</span><br><span class="line">Wed Mar 09 14:05:18 CST 2021</span><br></pre></td></tr></table></figure>

<p>对于文件目录操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String[] list()：获取指定文件目录下的文件和文件目录</span></span><br><span class="line">File file3 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy"</span>);</span><br><span class="line">String[] list = file3.list();</span><br><span class="line"><span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.idea</span><br><span class="line">hello.txt</span><br><span class="line">hey.txt</span><br><span class="line">JA.properties</span><br><span class="line">Jstudy.iml</span><br><span class="line">out</span><br><span class="line">src</span><br></pre></td></tr></table></figure>

<p>实际上：</p>
<img src='/img/Java高级/39.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//File[] listFiles()：获取指定文件目录下的文件和文件目录，以File形式存储</span></span><br><span class="line">File[] files = file3.listFiles();</span><br><span class="line"><span class="keyword">for</span>(File f : files)&#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\CODELIB\Jstudy\.idea</span><br><span class="line">D:\CODELIB\Jstudy\hello.txt</span><br><span class="line">D:\CODELIB\Jstudy\hey.txt</span><br><span class="line">D:\CODELIB\Jstudy\JA.properties</span><br><span class="line">D:\CODELIB\Jstudy\Jstudy.iml</span><br><span class="line">D:\CODELIB\Jstudy\out</span><br><span class="line">D:\CODELIB\Jstudy\src</span><br></pre></td></tr></table></figure>

<p>文件更名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// public boolean renameTo(File file)：将指定文件更名为file，需要保证目录中不存在file</span></span><br><span class="line"><span class="comment">// 而file可以存在于任意有权限目录</span></span><br><span class="line">File file4 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\test.txt"</span>);</span><br><span class="line"><span class="keyword">boolean</span> isR = file1.renameTo(file4);</span><br><span class="line">System.out.println(isR);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<img src='/img/Java高级/40.png'>

<p>可以看到原本文件目录内的 hello.txt 不见了，而出现了 test.txt，且其中内容与原本的文件内容相同。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boolean isDirectory()：判断是否为文件目录</span></span><br><span class="line">System.out.println(file1.isDirectory());</span><br><span class="line"><span class="comment">//boolean isFile()：判断是否为文件</span></span><br><span class="line">System.out.println(file1.isFile());</span><br><span class="line"><span class="comment">//boolean exists()：判断是否存在于硬盘内</span></span><br><span class="line">System.out.println(file1.exists());</span><br><span class="line"><span class="comment">//boolean canRead()：判断该文件是否可读</span></span><br><span class="line">System.out.println(file1.canRead());</span><br><span class="line"><span class="comment">//boolean canWrite()：判断该文件是否可写</span></span><br><span class="line">System.out.println(file1.canWrite());</span><br><span class="line"><span class="comment">//boolean isHidden()：判断改文件是否隐藏</span></span><br><span class="line">System.out.println(file1.isHidden());</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>删除、创建文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileCDTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">            <span class="comment">//boolean createNewFile()：若文件不存在，则创建文件，返回true</span></span><br><span class="line">            file.createNewFile();</span><br><span class="line">            System.out.println(<span class="string">"创建成功"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//boolean delete()：删除文件或文件夹</span></span><br><span class="line">            file.delete();</span><br><span class="line">            System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建成功</span><br></pre></td></tr></table></figure>

<img src='/img/Java高级/41.png'>

<p>再次运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">删除成功</span><br></pre></td></tr></table></figure>

<p>文件目录下不再存在 hello.txt</p>
<p>创建文件目录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\Ftest\\FFtest"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">    <span class="comment">//mkdir()：如果要创建文件目录不存在，则创建成功，若其上层目录也不存在，则无法创建</span></span><br><span class="line">    System.out.println(file1.mkdir());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    file1.delete();</span><br><span class="line">    System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br></pre></td></tr></table></figure>

<p>因为 FFtest 的上层目录 Ftest 不存在，所以创建失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file1 = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\Ftest\\FFtest"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file1.exists())&#123;</span><br><span class="line">    <span class="comment">//mkdirs()：如果要创建文件目录不存在，则创建成功，若其上层目录也不存在，则连带上层目录一起创建</span></span><br><span class="line">    System.out.println(file1.mkdirs());</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    file1.delete();</span><br><span class="line">    System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<img src='/img/Java高级/42.png'>

<hr>
<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><img src='/img/Java高级/43.png'>

<img src='/img/Java高级/44.png'>

<p>流体系：</p>
<img src='/img/Java高级/45.png'>

<hr>
<h2 id="读入数据基本操作"><a href="#读入数据基本操作" class="headerlink" title="读入数据基本操作"></a>读入数据基本操作</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileReaderTest</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.实例化 File 对象</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\test.txt"</span>);</span><br><span class="line">                <span class="comment">//2. 提供流</span></span><br><span class="line">                fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">                <span class="comment">//3.数据读入：read()返回读入的一个字符（以int形式存储），如果达到文件末尾，返回-1</span></span><br><span class="line">                <span class="keyword">int</span> data = fr.read();</span><br><span class="line">                <span class="keyword">while</span> (data != -<span class="number">1</span>)&#123;</span><br><span class="line">                    System.out.print((<span class="keyword">char</span>) data);</span><br><span class="line">                    data = fr.read();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//4. 关闭流</span></span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcdefg</span><br></pre></td></tr></table></figure>

<img src='/img/Java高级/46.png'>

<p>优化读入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">                FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1. 提供File对象</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\test.txt"</span>);</span><br><span class="line">                <span class="comment">//2. 提供流</span></span><br><span class="line">                fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">                <span class="keyword">int</span> len;</span><br><span class="line">                <span class="comment">//3.读入数据，将cbuf数组传入read，cbuf数组有多长，每次read就读入多少个数据</span></span><br><span class="line">                <span class="keyword">while</span>((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">                        System.out.print(cbuf[i]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//4. 关闭流</span></span><br><span class="line">                    fr.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcdefg</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供File类对象，指明文件</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\test2.txt"</span>);</span><br><span class="line">        <span class="comment">//2. 提供FileWriter对象，用于数据写入</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(file);</span><br><span class="line">            <span class="comment">//3. 通过write()写入数据</span></span><br><span class="line">            fw.write(<span class="string">"Hello, "</span>);</span><br><span class="line">            fw.write(<span class="string">"I'm Jack!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//4. 关闭流</span></span><br><span class="line">                fw.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/47.png'>

<p>由此知道，若操作的文件不存在，则在写入的时候会自动创建该文件。</p>
<p>修改写入数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fw.write(<span class="string">"Hello\n"</span>);</span><br><span class="line">fw.write(<span class="string">"I'm Jack!"</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/48.png'>

<p>由此知道，默认操作情况下对已存在文件重新进行写入操作会对原有数据进行覆盖。</p>
<p>如果修改 FileWriter 构造器传入的参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fw = <span class="keyword">new</span> FileWriter(file,<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>

<p>再次运行后：</p>
<img src='/img/Java高级/49.png'>

<p>即在原有数据上继续添加数据。</p>
<p><b>拓展：通过读入写入实现文件复制</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//被复制的文件</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\test.txt"</span>);</span><br><span class="line">    <span class="comment">//开启读入、写入流</span></span><br><span class="line">    FileReader fr = <span class="keyword">null</span>;</span><br><span class="line">    FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fr = <span class="keyword">new</span> FileReader(file);</span><br><span class="line">        fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\CODELIB\\Jstudy\\test3.txt"</span>);</span><br><span class="line">        <span class="comment">//读入操作</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//写入操作，每次写入从0开始，len个字符</span></span><br><span class="line">            fw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/50.png'>

<p>成功生成 test3.txt，并将 test.txt 的数据写入，完成复制操作。</p>
<p><font color="red"><b>注意：以上都是字符流操作，支持于文字文件，对于图片、视频等无法操作，需要用字节流，若用字节流读取文字文件，则有可能出现乱码，因此也不用字节流读文字文件</b></font></p>
<hr>
<h2 id="字节流操作"><a href="#字节流操作" class="headerlink" title="字节流操作"></a>字节流操作</h2><p>完成字节流读写操作复制一个图片：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建img对象</span></span><br><span class="line">    File img = <span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\YMDX.jpg"</span>);</span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建字节输入输出流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(img);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\YMDX2.jpg"</span>);</span><br><span class="line">        <span class="comment">//进行数据读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] bbur = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bbur)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(bbur,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/51.png'>

<p>图片成功复制</p>
<hr>
<h2 id="缓冲流的使用"><a href="#缓冲流的使用" class="headerlink" title="缓冲流的使用"></a>缓冲流的使用</h2><p>缓冲流可以提高流的读写速度</p>
<p>首先测试上一节图片复制的花费时间得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">花费时间：2520ms</span><br></pre></td></tr></table></figure>

<p>接下来使用缓冲流进行复制</p>
<p>定义一个复制操作方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">copyFile</span><span class="params">(String srcPath, String destPath)</span></span>&#123;</span><br><span class="line">    <span class="comment">//造文件</span></span><br><span class="line">    File src = <span class="keyword">new</span> File(srcPath);</span><br><span class="line">    File dest = <span class="keyword">new</span> File(destPath);</span><br><span class="line">    <span class="comment">//造流</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">    FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//造缓冲流</span></span><br><span class="line">    BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">    BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建字节输入输出流</span></span><br><span class="line">        fis = <span class="keyword">new</span> FileInputStream(src);</span><br><span class="line">        fos = <span class="keyword">new</span> FileOutputStream(dest);</span><br><span class="line"></span><br><span class="line">        bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line">        bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line">        <span class="comment">//进行数据读写操作</span></span><br><span class="line">        <span class="keyword">byte</span>[] bbur = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bbur)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(bbur,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流，只需要关闭外层流即可</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进行复制：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    String srcPath = <span class="keyword">new</span> String(<span class="string">"D:\\CODELIB\\Jstudy\\YMDX.jpg"</span>);</span><br><span class="line">    String destPath = <span class="keyword">new</span> String(<span class="string">"D:\\CODELIB\\Jstudy\\YMDX2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    copyFile(srcPath, destPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"花费时间："</span> + (end - start) + <span class="string">"ms"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复制成功，结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">花费时间：41ms</span><br></pre></td></tr></table></figure>

<p>可以看到与原本复制花费时间有明显提升。</p>
<p>速度快的原因：BufferedInputStream 内部提供了一个缓冲区，能够一次性存储一定量的字节（默认 8192），然后 BufferedOutputStream 内部定义了一个 flush() 方法，当缓冲区存满后，取出缓冲区数据并清空缓冲区。</p>
<hr>
<h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><p>进行字符流和字节流之间的转换</p>
<img src='/img/Java高级/52.png'>

<p>转换流是处理流、属于字符流</p>
<p>InputStreamReader：字节输入流 —&gt; 字符输入流<br>OutputStreamWriter：字符输出流 –&gt; 字节输出流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//造字节输入流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\CODELIB\\Jstudy\\test2.txt"</span>);</span><br><span class="line">        <span class="comment">//转换字符输入流，参数二是读入格式，根据文件存储时的格式来填</span></span><br><span class="line">        isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"UTF-8"</span>);</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            String str = <span class="keyword">new</span> String(cbuf,<span class="number">0</span>,len);</span><br><span class="line">            System.out.print(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">I&#39;m Jack!Hello</span><br><span class="line">I&#39;m Jack!</span><br></pre></td></tr></table></figure>

<p>读写转换一起用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">    OutputStreamWriter osw = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//造输入输出流</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"D:\\CODELIB\\Jstudy\\testCN.txt"</span>);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\testGBK.txt"</span>);</span><br><span class="line">        <span class="comment">//造转换流</span></span><br><span class="line">        isr = <span class="keyword">new</span> InputStreamReader(fis,<span class="string">"utf-8"</span>);</span><br><span class="line">        osw = <span class="keyword">new</span> OutputStreamWriter(fos,<span class="string">"gbk"</span>);</span><br><span class="line">        <span class="comment">//读写</span></span><br><span class="line">        <span class="keyword">char</span>[] cbuf = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(cbuf)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            osw.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isr.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            osw.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="其他流"><a href="#其他流" class="headerlink" title="其他流"></a>其他流</h2><p><b>标准输入、输出流</b></p>
<p>标准输入流：System.in</p>
<p>标准输出流：System.out</p>
<p>情景：从键盘输入字符串，要求将读取到的整行字符串转换为大写输出，然后进行输入操作。直到输入“e”或“exit”，程序结束：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">inTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//造流</span></span><br><span class="line">            isr = <span class="keyword">new</span> InputStreamReader(System.in);</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">            <span class="comment">//输入信息并输出</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">"请输入字符串："</span>);</span><br><span class="line">                String data = br.readLine();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">"e"</span>.equalsIgnoreCase(data)||<span class="string">"exit"</span>.equalsIgnoreCase(data))&#123;</span><br><span class="line">                    System.out.println(<span class="string">"输入结束"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String uppercase = data.toUpperCase();</span><br><span class="line">                System.out.println(uppercase);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">请输入字符串：asdasd541as56d1as</span><br><span class="line">ASDASD541AS56D1AS</span><br><span class="line">请输入字符串：dfdfvdfgdr15</span><br><span class="line">DFDFVDFGDR15</span><br><span class="line">请输入字符串：e</span><br><span class="line">输入结束</span><br></pre></td></tr></table></figure>

<p><b>打印流</b></p>
<p>PrintStream 和 PrintWriter 提供了一系列 println() 和 print() 重载方法</p>
<p>情景：将 ASCII 输出到指定文件内，每 50 个换一行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">outTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//造流</span></span><br><span class="line">        PrintStream ps = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\ostest.txt"</span>);</span><br><span class="line">            ps = <span class="keyword">new</span> PrintStream(fos,<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span>(ps != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//这条语句使System的输出默认输出到ps所指位置</span></span><br><span class="line">                System.setOut(ps);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">255</span>;i++)&#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>)i);</span><br><span class="line">                <span class="keyword">if</span>(i % <span class="number">50</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    System.out.println();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            ps.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/53.png'>

<hr>
<p><b>数据流</b></p>
<p>DataInputStream 和 DataOutputStream：用于读取或写出基本数据类型和字符串类型数据。</p>
<p>情景：将一个人的三种不同类型的信息存入并能取出到控制台</p>
<p>存入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataOutput</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//造流</span></span><br><span class="line">    DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        dos = <span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\Person.txt"</span>));</span><br><span class="line">        <span class="comment">//写出字符串</span></span><br><span class="line">        dos.writeUTF(<span class="string">"诗文"</span>);</span><br><span class="line">        dos.flush();<span class="comment">//存入数据后刷新</span></span><br><span class="line">        <span class="comment">//写出整数</span></span><br><span class="line">        dos.writeInt(<span class="number">21</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        <span class="comment">//写出布尔</span></span><br><span class="line">        dos.writeBoolean(<span class="keyword">true</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/54.png'>

<p>查看错误：文件编码问题</p>
<p>读取：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataInput</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//造流</span></span><br><span class="line">        dis = <span class="keyword">new</span> DataInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\CODELIB\\Jstudy\\Person.txt"</span>));</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        String name = dis.readUTF();</span><br><span class="line">        <span class="keyword">int</span> age = dis.readInt();</span><br><span class="line">        <span class="keyword">boolean</span> isMale = dis.readBoolean();</span><br><span class="line">        <span class="comment">//控制台打印</span></span><br><span class="line">        System.out.println(<span class="string">"name："</span> + name);</span><br><span class="line">        System.out.println(<span class="string">"age："</span> + age);</span><br><span class="line">        System.out.println(<span class="string">"isMale："</span> + isMale);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name：诗文</span><br><span class="line">age：21</span><br><span class="line">isMale：true</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h2><img src='/img/Java高级/55.png'>

<p>对象的序列化：</p>
<img src='/img/Java高级/56.png'>

<p>序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectOutputStream oos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//造流</span></span><br><span class="line">        oos = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\obj.dat"</span>));</span><br><span class="line">        <span class="comment">//存数据</span></span><br><span class="line">        oos.writeObject(<span class="keyword">new</span> String(<span class="string">"这是一个序列化的数据"</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(oos != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                oos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到 obj.dat 文件，直接打开乱码：</p>
<img src='/img/Java高级/57.png'>

<p>反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//造流</span></span><br><span class="line">        ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"D:\\CODELIB\\Jstudy\\obj.dat"</span>));</span><br><span class="line">        <span class="comment">//读数据</span></span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        String src = (String) obj;</span><br><span class="line">        System.out.println(src);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//关闭流</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ois.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个序列化的数据</span><br></pre></td></tr></table></figure>

<p><b>自定义类序列化</b></p>
<p>自定义类序列化要求：</p>
<ol>
<li>自定义类需要实现接口：Serializable 或 Externalizable</li>
<li>需要添加序列版本号： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = xxxxxxxxxxxxxxxL</span><br></pre></td></tr></table></figure>
 (如果不添加，系统会自动生成，但若对类进行修改，序列号也会修改，则无法读取之前存入的数据，因此要自己定义)</li>
<li>自定义类内部的所有属性也必须是可序列化的</li>
<li>不能序列化 static 和 transient 修饰的成员变量</li>
</ol>
<p>User.class：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5641526315L</span>;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 test1() 中 //存数据 下添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">oos.writeObject(<span class="keyword">new</span> User(<span class="string">"诗文"</span>,<span class="number">21</span>));</span><br><span class="line">oos.flush();</span><br></pre></td></tr></table></figure>

<p>在 test2() 中 //读数据 下添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User u = (User) ois.readObject();</span><br><span class="line">System.out.println(u);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是一个序列化的数据</span><br><span class="line">User&#123;name&#x3D;&#39;诗文&#39;, age&#x3D;21&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="随机文件存取"><a href="#随机文件存取" class="headerlink" title="随机文件存取"></a>随机文件存取</h2><img src='/img/Java高级/58.png'>

<img src='/img/Java高级/61.png'>

<p>RandomAccessFile 作为输出流时，若原文件存在，则会对文件内数据进行覆盖（默认情况下从头逐个覆盖）</p>
<p>通过 seek() 方法可以指定覆盖的起始位置</p>
<p>源文件 rant.txt</p>
<img src='/img/Java高级/59.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RandomAccessFile raf = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        raf = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">"D:\\CODELIB\\Jstudy\\rant.txt"</span>),<span class="string">"rw"</span>);</span><br><span class="line">        <span class="comment">//将文件内容指针指向第3个字符处</span></span><br><span class="line">        raf.seek(<span class="number">2</span>);</span><br><span class="line">        raf.write(<span class="string">"9999"</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            raf.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java高级/60.png'>

<hr>
<h2 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h2><img src='/img/Java高级/62.png'>

<img src='/img/Java高级/63.png'>

<img src='/img/Java高级/64.png'>

<img src='/img/Java高级/65.png'>

<img src='/img/Java高级/66.png'>

<img src='/img/Java高级/67.png'>

<hr>
<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络编程概述"><a href="#网络编程概述" class="headerlink" title="网络编程概述"></a>网络编程概述</h2><img src='/img/Java高级/68.png'>

<img src='/img/Java高级/69.png'>

<img src='/img/Java高级/70.png'>

<p>网络数据传输过程</p>
<img src='/img/Java高级/71.png'>

<hr>
<h2 id="IP-和端口号"><a href="#IP-和端口号" class="headerlink" title="IP 和端口号"></a>IP 和端口号</h2><img src='/img/Java高级/72.png'>

<p><b>IP：</b></p>
<p>InetAddress 类的一个对象代表一个 IP 地址</p>
<p>域名会通过 DNS （域名解析服务器）解析出实际的 IP 地址，通过 IP 地址访问对应的网络服务器</p>
<p>本地回路地址：127.0.0.1 （表示本机，对应 localhost）</p>
<p>InetAddress 对象实例化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//InetAddress类的构造器是私有的，因此实例化不使用构造器，因此不写 new</span></span><br><span class="line">    InetAddress ia1 = <span class="keyword">null</span>;</span><br><span class="line">    InetAddress ia2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//实例化：通过IP地址</span></span><br><span class="line">        ia1 = InetAddress.getByName(<span class="string">"192.168.1.1"</span>);</span><br><span class="line">        System.out.println(ia1);</span><br><span class="line">        <span class="comment">//实例化：通过域名（会自动DNS解析其IP）</span></span><br><span class="line">        ia2 = InetAddress.getByName(<span class="string">"www.baidu.com"</span>);</span><br><span class="line">        System.out.println(ia2);</span><br><span class="line">        <span class="comment">//实例化：获取本机</span></span><br><span class="line">        InetAddress ia3 = InetAddress.getLocalHost();</span><br><span class="line">        System.out.println(ia3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取域名</span></span><br><span class="line">    System.out.println(ia1.getHostName());</span><br><span class="line">    <span class="comment">//获取IP</span></span><br><span class="line">    System.out.println(ia2.getHostAddress());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;192.168.1.1</span><br><span class="line">www.baidu.com&#x2F;14.215.177.39</span><br><span class="line">LAPTOP-VPSJTSEP&#x2F;192.168.1.140</span><br><span class="line">OpenWrt.lan</span><br><span class="line">14.215.177.39</span><br></pre></td></tr></table></figure>

<hr>
<p><b>端口号：</b></p>
<img src='/img/Java高级/73.png'>

<hr>
<h2 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h2><img src='/img/Java高级/74.png'>

<img src='/img/Java高级/75.png'>

<img src='/img/Java高级/76.png'>

<p>（建立连接）三次握手：</p>
<img src='/img/Java高级/77.png'>

<p>简单说明：</p>
<ul>
<li>一次握手：客户端询问服务器端是否存在</li>
<li>二次握手：服务器端收到客户端存在的消息</li>
<li>三次握手：客户端发送确认连接信息</li>
</ul>
<ol>
<li>客户端通过向服务器端发送一个 SYN 来创建一个主动打开，作为三路握手的一部分。客户端把这段连接的序号设定位随机数 A。</li>
<li>服务器端应当为一个合法的 SYN 回送一个 SYN/ACK，ACK 的确认码应为 A + 1，SYN/ACK 包本身又有一个随机数 B</li>
<li>客户端接收到 SYN/ACK，向服务器端发送 ACK，确认码为 B + 1，序号设定为随机数 C</li>
</ol>
<p>（释放连接）四次挥手：</p>
<img src='/img/Java高级/78.png'>

<p>简单说明（以客户端主动断开连接情景）：</p>
<ul>
<li>一次挥手：客户端向服务器端发送申请断开链接</li>
<li>二次挥手：服务器端向客户端发送连接断开信息</li>
<li>三次挥手：服务器端断开与客户端连接</li>
<li>四次挥手：客户端发送信息验证是否与服务器已断开连接</li>
</ul>
<img src='/img/Java高级/79.png'>

<hr>
<h2 id="TCP-网络编程"><a href="#TCP-网络编程" class="headerlink" title="TCP 网络编程"></a>TCP 网络编程</h2><p>情景 1：客户端向服务器端发送一条数据，服务器端将数据显示在控制台上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//指定接收者</span></span><br><span class="line">        InetAddress ia = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        <span class="comment">//建立Socket与指定接收者的8999端口的连接</span></span><br><span class="line">        socket = <span class="keyword">new</span> Socket(ia,<span class="number">8999</span>);</span><br><span class="line">        <span class="comment">//建立输出流，socket接收输出流的数据</span></span><br><span class="line">        os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//输出信息</span></span><br><span class="line">        os.write(<span class="string">"这是向服务器端发送的信息"</span>.getBytes());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流、连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    InputStream is = <span class="keyword">null</span>;</span><br><span class="line">    ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//建立服务器端端口号</span></span><br><span class="line">        ss = <span class="keyword">new</span> ServerSocket(<span class="number">8999</span>);</span><br><span class="line">        <span class="comment">//建立Socket接收数据</span></span><br><span class="line">        socket = ss.accept();</span><br><span class="line">        <span class="comment">//建立输入流，socket接收输入流的数据</span></span><br><span class="line">        is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//能够连续输出字节后统一拼接</span></span><br><span class="line">        baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="comment">//在控制台输出数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//关闭流、连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            baos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ss.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先开启服务器、后开启客户端，结果：</p>
<img src='/img/Java高级/80.png'>

<p>情景 2：客户端发送文件给服务器端，服务器端将文件保存在本地</p>
<p>原文件：</p>
<img src='/img/Java高级/81.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务器端</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ServerSocket server = <span class="keyword">null</span>;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    DataInputStream dis = <span class="keyword">null</span>;</span><br><span class="line">    OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        server = <span class="keyword">new</span> ServerSocket(<span class="number">4700</span>);</span><br><span class="line">        socket = server.accept();</span><br><span class="line">        dis = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        os = <span class="keyword">new</span> FileOutputStream(<span class="string">"D:\\CODELIB\\Jstudy\\YYYY.jpg"</span>);</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = dis.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            os.write(buff, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dis.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Socket socket = <span class="keyword">null</span>;</span><br><span class="line">    DataOutputStream dos = <span class="keyword">null</span>;</span><br><span class="line">    InputStream inputStream = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> Socket(<span class="string">"127.0.0.1"</span>, <span class="number">4700</span>);</span><br><span class="line">        dos = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"C:\\Users\\Poet\\blog\\themes\\diaspora\\source\\img\\YMDX.jpg"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        inputStream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        <span class="keyword">int</span> len = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> ((len = inputStream.read(buff)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            dos.write(buff, <span class="number">0</span>, len);</span><br><span class="line">            dos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>传输完成后：</p>
<img src='/img/Java高级/82.png'>

<hr>
<h2 id="UDP-网络编程"><a href="#UDP-网络编程" class="headerlink" title="UDP 网络编程"></a>UDP 网络编程</h2><img src='/img/Java高级/83.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line"></span><br><span class="line">        String src = <span class="keyword">new</span> String(<span class="string">"发送的数据"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] data = src.getBytes();</span><br><span class="line">        InetAddress ia = InetAddress.getLocalHost();</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(data,<span class="number">0</span>,data.length,ia,<span class="number">9900</span>);</span><br><span class="line"></span><br><span class="line">        socket.send(dp);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9900</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>,buffer.length);</span><br><span class="line">        socket.receive(dp);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(dp.getData(), <span class="number">0</span>, dp.getLength()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先开启接收者，然后开启发送者，结果：</p>
<img src='/img/Java高级/84.png'>

<hr>
<h2 id="URL-编程"><a href="#URL-编程" class="headerlink" title="URL 编程"></a>URL 编程</h2><img src='/img/Java高级/85.png'>

<img src='/img/Java高级/86.png'>

<img src='/img/Java高级/87.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:4000/2021/02/02/Java%E9%AB%98%E7%BA%A7/"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(url.getProtocol());  <span class="comment">//获取协议名</span></span><br><span class="line">            System.out.println(url.getHost());  <span class="comment">//获取主机名</span></span><br><span class="line">            System.out.println(url.getPort());  <span class="comment">//获取端口号</span></span><br><span class="line">            System.out.println(url.getPath());  <span class="comment">//获取文件路径</span></span><br><span class="line">            System.out.println(url.getFile());  <span class="comment">//获取文件名</span></span><br><span class="line">            System.out.println(url.getQuery()); <span class="comment">//获取查询名</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">localhost</span><br><span class="line">4000</span><br><span class="line">&#x2F;2021&#x2F;02&#x2F;02&#x2F;Java%E9%AB%98%E7%BA%A7&#x2F;</span><br><span class="line">&#x2F;2021&#x2F;02&#x2F;02&#x2F;Java%E9%AB%98%E7%BA%A7&#x2F;</span><br><span class="line">null</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java入门</title>
    <url>/2021/01/11/Java%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h1><img src='/img/Java入门/1.png'>

<p>冯诺依曼体系结构</p>
<p>8 bit = 1 byte（字节）</p>
<h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><ul>
<li><p>常用DOS命令</p>
<ul>
<li>dir：列出当前目录下所有文件及文件夹</li>
<li>md：创建目录</li>
<li>rd：删除目录</li>
<li>cd：进入指定目录</li>
<li>cd..：退回到上一级目录</li>
<li>cd\：退回根目录</li>
<li>del：删除文件</li>
<li>exit：退出 dos 命令行</li>
</ul>
</li>
</ul>
<p>Java 一大特点：拥有垃圾回收器功能。</p>
<p>Java 特点：</p>
<ul>
<li><p>面向对象</p>
<ul>
<li>两大基本概念：类、对象</li>
<li>三大特性：封装、继承、多态</li>
<li>Java 类及类的成员：属性、方法、构造器、代码块、内部类</li>
</ul>
</li>
<li><p>健壮性</p>
<ul>
<li>吸收 C/C++ 的优点，但去掉了影响程序健壮性的功能（如指针、内存申请与释放等），提供相对安全的内存管理和访问机制</li>
</ul>
</li>
<li><p>跨平台性</p>
<ul>
<li>跨平台性：通过 Java 语言编写的应用程序在不同的系统平台上都可以运行</li>
<li>原理：只要在需要运行 Java 应用程序的系统上，安装 Java 虚拟机（JVM）即可，由 JVM 负责 Java 程序在系统上的运行</li>
</ul>
</li>
</ul>
<p>Java 两大核心机制：</p>
<ul>
<li>Java 虚拟机</li>
<li>垃圾收集机制</li>
</ul>
<p>JDK（Java 开发工具包）：其中包含 Java 开发工具和 JRE。开发工具：编译工具（ javac.exe ）和打包工具（ jar.exe ）等</p>
<p>JRE（Java 运行环境）：包括 Java 虚拟机（JVM）和 Java 程序所需的核心类库等</p>
<img src='/img/Java入门/2.png'>

<p>*.java -&gt; javac.exe（编译） -&gt; *.class（字节码文件） -&gt; java.exe（运行） -&gt; 结果</p>
<p>编译后会生成一个或多个字节码文件，字节码文件名与源文件类名相同</p>
<p>第一个 Java 文件运行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Helloworld!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font color='red'>注意：最多有一个类声明为public，且该public类的类名与源文件名相同</font></p>
<p>Java 注释：</p>
<ul>
<li><p>单行注释：（ // 注释内容 ）</p>
</li>
<li><p>多行注释（ /* 可跨行的多行注释内容 */ ）</p>
</li>
<li><p>文档注释（注释内容可被 JDK 所提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。）</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@author</span> poem</span></span><br><span class="line"><span class="comment"><span class="doctag">@version</span> v1.0</span></span><br><span class="line"><span class="comment">第一个java程序：helloworld</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>  于命令行输入</p>
  <img src='/img/Java入门/3.png'>

<p>  会自动生成响应文件夹</p>
  <img src='/img/Java入门/4.png'>

  <img src='/img/Java入门/5.png'>

<p>  点击文件夹中 index.html 即可查看该 java 文件相关信息</p>
  <img src='/img/Java入门/6.png'>

</li>
</ul>
<p>Java API 可前往</p>
<p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<p>内进行查看</p>
<p><b>堆 Heap</b></p>
<p>一个 JVM 实例只存在一个堆内存，堆内存的大小可以调节。堆内存分为三部分：</p>
<ul>
<li>新生区 Young</li>
<li>养老区 Old</li>
<li>永久存储区 Perm （方法区，概念上属于堆内存，逻辑上是单独分出来的）</li>
</ul>
<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="关键字和标识符"><a href="#关键字和标识符" class="headerlink" title="关键字和标识符"></a>关键字和标识符</h2><ul>
<li><p>关键字：具有专门用途的字符串（如：class、if）</p>
</li>
<li><p>标识符：对各种变量、方法和类命名时使用的字符序列（关键字、保留字不可为标识符，）</p>
<p>  命名规则：</p>
<ul>
<li><p>26个英文字母，0-9，_，$，开头不能为数字</p>
</li>
<li><p>不可直接使用关键字或保留字</p>
</li>
<li><p>可以包含关键字</p>
</li>
<li><p>类名首个字母必须大写，多个单词组成的，每个单词首字母都要大写</p>
</li>
<li><p>方法名一般首个字母小写（构造方法例外），多个单词组成方法名，后面单词首字母大写</p>
<p>命名规范：</p>
</li>
<li><p>包名：xxxyyyzzz</p>
</li>
<li><p>类名、接口名：XxxYyyZzz</p>
</li>
<li><p>变量名、方法名：xxxYyyZzz</p>
</li>
<li><p>常量名：XXX_YYY_ZZZ</p>
</li>
</ul>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li><p>变量：</p>
<ul>
<li><p>内存中的一个存储区域</p>
</li>
<li><p>该区域的数据可以在同一类型范围内不断变化</p>
</li>
<li><p>变量是程序的最基本的存储单元。包含变量类型、变量名和存储的值。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">System.out.println(age);</span><br></pre></td></tr></table></figure>
<p>输出得到结果 18</p>
</li>
</ul>
</li>
<li><p>数据类型</p>
<ul>
<li>基本数据类型<ul>
<li>数值型<ul>
<li>整数类型（byte,short,int,long）</li>
<li>浮点类型（float,double）</li>
</ul>
</li>
<li>字符型（char）</li>
<li>布尔型（boolean）</li>
</ul>
</li>
<li>引用数据类型<ul>
<li>类（class）</li>
<li>接口（interface）</li>
<li>数组（[]）</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p><b>整数类型</b></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>1 字节</td>
<td>-128 ~ 127</td>
</tr>
<tr>
<td>short</td>
<td>2 字节</td>
<td>-2^15 ~ (2^15)-1</td>
</tr>
<tr>
<td>int</td>
<td>4 字节</td>
<td>-2^31 ~ (2^31)-1</td>
</tr>
<tr>
<td>long</td>
<td>8 字节</td>
<td>-2^63 ~ (2^63)-1</td>
</tr>
</tbody></table>
<p><font color="red">注意：声明一个long型变量，赋值时给结尾加”L”或”l”，如：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> l1 = <span class="number">2423434234L</span>;</span><br></pre></td></tr></table></figure>

<p><b>浮点类型</b></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>单精度 float</td>
<td>4 字节</td>
<td>-3.403E38 ~ 3.403E38</td>
</tr>
<tr>
<td>双精度 double</td>
<td>8 字节</td>
<td>-1.798E308 ~ 1.798E308</td>
</tr>
</tbody></table>
<p>E308：表示10的308次方</p>
<p>3.403E38：表示3.403 × 10^38</p>
<p><font color="red">注意：声明一个float型变量，赋值时给结尾加”F”或”f”，如：</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">388.234F</span>;</span><br></pre></td></tr></table></figure>

<p><b>字符类型</b></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用存储空间</th>
<th>表数范围</th>
</tr>
</thead>
<tbody><tr>
<td>char</td>
<td>2 字节</td>
<td>一个字符或一个转义字符</td>
</tr>
</tbody></table>
<p>定义 char 型变量通常使用一对’’</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c1 = <span class="string">'A'</span></span><br></pre></td></tr></table></figure>

<p><b>布尔类型</b></p>
<p>boolean 只能取 true 或 false</p>
<p>Java 中 true 或 false 不能用 0 或 1 表示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> bl1 = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>

<p><b>基本数据类型之间的运算规则</b></p>
<p>不能与 boolean 做运算</p>
<ol>
<li><p>自动类型提升：</p>
<p> 当表数范围小的数与表数范围大的数做运算，结果自动转化为表数范围大的数据类型</p>
<p> byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</p>
<p> <font color="red">注意：当 byte、char、short 三种类型做运算时，结果都为int</font></p>
</li>
<li><p>强制类型转换：</p>
<p> 当表数范围小的数与表示范围大的数做运算，希望结果为表数范围小的数据类型时，可以使用强转符“ ( ) ”进行强制类型转换，但会缺失精度。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = <span class="number">12.333</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = (<span class="keyword">int</span>)d1;</span><br><span class="line">System.out.println(i1);</span><br></pre></td></tr></table></figure>

<p> 结果为</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<hr>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i2 = <span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i2;</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<p> 结果为</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-128</span><br></pre></td></tr></table></figure>
<p> （byte正数上限为127，转换后溢出）</p>
<hr>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> b1 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">byte</span> b2 = b1 + <span class="number">1</span>;</span><br><span class="line">System.out.println(b2);</span><br></pre></td></tr></table></figure>

<p> 报错（整数型常量默认为int，浮点型常量默认为double，需要强制转换）</p>
</li>
</ol>
<p><b>字符串类型：String</b></p>
<p>String 是一种引用数据类型</p>
<p>声明 String 类型变量时，使用一对 “ ”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"Hello World!"</span>;</span><br><span class="line">System.out.println(s1);</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<p>String 可以和所有基本数据类型做运算,结果仍为 String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">1001</span>;</span><br><span class="line">String numberStr = <span class="string">"学号："</span>;</span><br><span class="line">String info = numberStr + number;</span><br><span class="line">System.out.println(info);</span><br><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">true</span>;</span><br><span class="line">String info1 = info + b1;</span><br><span class="line">System.out.println(info1);</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学号：1001</span><br><span class="line"></span><br><span class="line">学号：1001true</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;   <span class="comment">//97</span></span><br><span class="line"><span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">String str = <span class="string">"hello"</span>;</span><br><span class="line">System.out.println(c + num + str);</span><br><span class="line">System.out.println(c + str + num);</span><br><span class="line">System.out.println(c + (num + str));</span><br><span class="line">System.out.println((c + num) + str);</span><br><span class="line">System.out.println(str + num + c);</span><br></pre></td></tr></table></figure>

<p>结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">107hello</span><br><span class="line">ahello10</span><br><span class="line">a10hello</span><br><span class="line">107hello</span><br><span class="line">hello10a</span><br></pre></td></tr></table></figure>

<hr>
<p><b>进制转换</b></p>
<ul>
<li>二进制：0、1，满2进1，以 0b 或 0B 为开头</li>
<li>八进制：0-7，满8进1，以0开头</li>
<li>十进制：0-9，满10进1</li>
<li>十六进制：0-9 以及 A-F，满16进1，以 0x 或 0X 为开头</li>
</ul>
<p>如：</p>
<img src='/img/Java入门/7.png'>

<p><b>二进制</b></p>
<p>最高位为符号位，0 为正，1 为负。</p>
<p>正数原码，反码，补码相同。</p>
<p>负数反码为原码各个数字取反，0 变 1，1 变 0，补码为反码 + 1</p>
<p>二进制转换为十进制：</p>
<p>1110 = 0 × 2^0 + 1 × 2^1 + 1 × 2^2 + 1 × 2^3 = 14</p>
<img src='/img/Java入门/8.png'>

<p><font color="red">计算机底层都以补码方式存储数据</font></p>
<p>十进制转换为二进制：</p>
<p>（短除 2 取余的逆）</p>
<p>如 13 ÷ 2 得 6 余 1 –&gt; 6 ÷ 2 得 3 余 0 –&gt; 3 ÷ 2 得 1 余 1 –&gt; 1 ÷ 2 得 0 余 1 –&gt; 0 ÷ 2 得 0 余 0 ……</p>
<p>以此得到 10110000000……</p>
<p>取逆从右往左看得到 1101，因此 13 转换为二进制为 1101</p>
<hr>
<p>二进制转换为八进制（三个一位）</p>
<p>如 11101001 转换为八进制即先看做是 011 101 001</p>
<p>其中 001 的十进制数为 1 对应八进制 1，101 的十进制数为 5 对应八进制 5，011 的十进制数为3 对应八进制 3</p>
<p>因此 11101001 转换为八进制为 0351</p>
<hr>
<p>二进制转换为十六进制（四个一位）</p>
<p>仍是 11101001 转换为十六进制即先看做是 1110 1001</p>
<p>其中 1110 的十进制数为 14 对应十六进制的 E，1001 的十进制数为 9 对应十六进制的 9</p>
<p>因此11101001 转换为十六进制为 0xE9</p>
<hr>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li>算术运算符</li>
<li>赋值运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>三元运算符</li>
</ul>
<p><b>算术运算符</b></p>
<img src='/img/Java入门/9.png'>

<p>注意点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> result1 = num1 / num2;  <span class="comment">//先是两个int整型数据做运算得到2</span></span><br><span class="line">System.out.println(result1);</span><br><span class="line"><span class="keyword">double</span> result2 = num1 / (num2 + <span class="number">0.0</span>);   </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">先是整型数据与浮点数据做运算，自动转化为浮点数据，</span></span><br><span class="line"><span class="comment">再与另一个整型数据做运算，又转化为浮点数据。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">System.out.println(result2);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.0</span><br><span class="line">2.4</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b1 = a1++;</span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b2 = ++a2;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"a1 = "</span> + a1 + <span class="string">" "</span> + <span class="string">"b1 = "</span> + b1);</span><br><span class="line">System.out.println(<span class="string">"a2 = "</span> + a2 + <span class="string">" "</span> + <span class="string">"b2 = "</span> + b2);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a1 &#x3D; 11 b1 &#x3D; 10</span><br><span class="line">a2 &#x3D; 11 b2 &#x3D; 11</span><br></pre></td></tr></table></figure>

<hr>
<p><b>赋值运算符</b></p>
<p>符号：=</p>
<ul>
<li>当 “ = ” 两侧数据不一致时，可以使用自动类型转换或强制类型转换原则进行处理。</li>
<li>支持连续赋值。</li>
</ul>
<p>扩展赋值运算符：+=、-=、*=、/=、%=</p>
<ul>
<li>+=：x += b &lt;–&gt; x = x + b</li>
<li>-=：x -= b &lt;–&gt; x = x - b</li>
<li>*=：x *= b &lt;–&gt; x = x * b</li>
<li>/=：x /= b &lt;–&gt; x = x / b</li>
<li>%=：x %= b &lt;–&gt; x = x % b</li>
</ul>
<p>以上运算符均不会改变变量本身数据类型</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">3</span>;</span><br><span class="line">s = s + <span class="number">2</span>;  <span class="comment">//错误，编译不通过</span></span><br><span class="line">s += <span class="number">2</span>;    <span class="comment">//s == 5</span></span><br></pre></td></tr></table></figure>

<hr>
<p><b>比较运算符</b></p>
<img src='/img/Java入门/10.png'>

<p>比较运算符结果都为 boolean 型</p>
<hr>
<p><b>逻辑运算符</b></p>
<ul>
<li>逻辑与：&amp; （x &amp; y 在左边数据为false时，立即执行结束）</li>
<li>逻辑或：|</li>
<li>逻辑非：!</li>
<li>逻辑异或：^</li>
<li>短路与：&amp;&amp;</li>
<li>短路或：||</li>
</ul>
<img src='/img/Java入门/11.png'>

<hr>
<p><b>位运算符</b></p>
<img src='/img/Java入门/12.png'>

<p>位运算符是直接对整数的二进制进行运算的。</p>
<p>如 21 的二进制数为 10101 进行 21&lt;&lt;2 运算得到 1010100 其十进制数为 84 == 21 × (2^2)</p>
<p>将原数据向左移 x 位就相当于令原数据乘 2^x</p>
<p>将原数据向右移 x 位就相当于令原数据除 2^x</p>
<img src='/img/Java入门/13.png'>

<ul>
<li>&amp;：二进制中两数相同为 1，不同为 0</li>
<li>|：二进制中两数中有一个 1 则为 1，否则为 0</li>
<li>^：二进制中两数不同为 1，相同为 0</li>
</ul>
<img src='/img/Java入门/14.png'>

<hr>
<p><b>三元运算符</b></p>
<p>(条件表达式)? 表达式1 : 表达式2</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;（true）  （false）</p>
<p>条件表达式结果为 boolean 型，根据表达式结果真假决定执行表达式 1 还是 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取两数之间较大的值</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> max = (m &gt; n)? m : n;</span><br><span class="line"></span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure>

<p>三元运算符可以嵌套，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">12</span>;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">String maxStr = (m &gt; n)? <span class="string">"m大"</span> : ((m == n)? <span class="string">"m和n相等"</span> : <span class="string">"n大"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(maxStr);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m和n相等</span><br></pre></td></tr></table></figure>

<hr>
<p><b>运算符优先级</b></p>
<img src='/img/Java入门/15.png'>

<hr>
<h2 id="程序流程控制"><a href="#程序流程控制" class="headerlink" title="程序流程控制"></a>程序流程控制</h2><p>三种流程结构：</p>
<ul>
<li><p>顺序结构</p>
<p>  程序自上而下依次执行，中间没有跳转和判断。</p>
</li>
<li><p>分支结构</p>
<p>  根据条件有选择的执行。</p>
<p>  有 if…else 和 switch-case 两种分支语句</p>
</li>
<li><p>循环结构</p>
<p>  根据循环条件，重复性的执行某段代码。</p>
<p>  有 while、do…while 和 for 三种循环语句。</p>
<p>  注：JDK1.5 提供了 foreach 循环，方便的遍历集合、数组元素。  </p>
</li>
</ul>
<hr>
<p><b>分支结构：if…else</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    执行表达式<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    执行表达式<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">    换行表达式<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">    执行表达式<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    执行表达式n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><b>从键盘获取不同类型的变量</b></p>
<ol>
<li><p>需要导包：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Scanner的实例化</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);  <span class="comment">//System.in代表键盘输入</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>调用Scanner类的方法获取指定类型的变量，如获取 int 类型变量（nextInt 方法）</p>
</li>
</ol>
<p>例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScannerTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">        System.out.println(<span class="string">"输入的数值为："</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/16.png'>

<hr>
<p><b>分支结构：switch-case</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> 常量n:</span><br><span class="line">        语句n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(number)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        System.out.println(<span class="string">"one"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        System.out.println(<span class="string">"two"</span>);;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        System.out.println(<span class="string">"three"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        System.out.println(<span class="string">"four"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">"five"</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">"other"</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">two</span><br></pre></td></tr></table></figure>

<hr>
<p><b>循环结构：for</b></p>
<p>循环结构四要素：</p>
<p>① 初始化条件</p>
<p>② 循环条件  –&gt; boolean 类型</p>
<p>③ 循环体</p>
<p>④ 迭代条件</p>
<p>for 循环的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(①;②;④)&#123;</span><br><span class="line">    ③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ……</p>
<p>例如：从 1 循环到 150，并在每行打印一个值，若当前值为 3 的倍数，则额外打印“ foo ”，若当前值为 5 的倍数，则额外打印“ biz ”，若当前值为 7 的倍数，则额外打印“ baz ”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">150</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">"  foo"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">"  biz"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(i + <span class="string">"  baz"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/17.png'>

<hr>
<p><b>循环结构：while</b></p>
<p>循环结构四要素：</p>
<p>① 初始化条件</p>
<p>② 循环条件  –&gt; boolean 类型</p>
<p>③ 循环体</p>
<p>④ 迭代条件</p>
<p>while 循环的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">①</span><br><span class="line"><span class="keyword">while</span>(②)&#123;</span><br><span class="line">    ③;</span><br><span class="line">    ④;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行过程：① -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ……</p>
<hr>
<p><b>循环结构：do…while</b></p>
<p>循环结构四要素：</p>
<p>① 初始化条件</p>
<p>② 循环条件  –&gt; boolean 类型</p>
<p>③ 循环体</p>
<p>④ 迭代条件</p>
<p>do…while 循环的结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">①</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    ③;</span><br><span class="line">    ④;</span><br><span class="line">&#125;<span class="keyword">while</span>(②);</span><br></pre></td></tr></table></figure>

<p>执行过程：① -&gt; ③ -&gt; ④ -&gt; ② -&gt; ③ -&gt; ④ -&gt; ② -&gt; ……</p>
<hr>
<p><b>嵌套循环</b></p>
<p>例如输出五行五列的“ * ”矩阵</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)&#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;<span class="number">5</span>;j++)&#123;</span><br><span class="line">            System.out.print(<span class="string">"*"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/18.png'>

<p>记录数法处理输出1-100之间的所有质数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= <span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>;j&lt;= i-<span class="number">1</span>;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % j != <span class="number">0</span>) &#123;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == (i-<span class="number">2</span>))&#123;</span><br><span class="line">            System.out.print(i+<span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/19.png'>

<p>break 结束当前循环</p>
<p>continue 结束当次循环</p>
<p>带标签的 break 和 continue</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">label:<span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xxxxx)&#123;</span><br><span class="line">            <span class="keyword">break</span> label;</span><br><span class="line">            <span class="comment">//continue label;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上结束的是最外层的 label:for 循环</p>
<hr>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组的概述"><a href="#数组的概述" class="headerlink" title="数组的概述"></a>数组的概述</h2><p>数组（ Array ）：是多个相同数据类型的数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p>
<p>数组常见概念：</p>
<ul>
<li>数组名</li>
<li>下标（或索引）</li>
<li>元素</li>
<li>数组的长度</li>
</ul>
<p>数组本身是<font color="#00FFFF">引用数据类型</font>，而数组中的元素可以是任意数据类型，包括基本数据类型和引用数据类型。</p>
<p>创建数组对象会创建一片连续的存储空间，数组名中引用的是这块连续空间的首地址。</p>
<p>数组长度一经确定，不可更改。</p>
<p>可以直接通过下标调用指定位置的数组元素。</p>
<p>数组的分类：</p>
<ul>
<li>维度分类：一维数组、二维数组、三维数组、……</li>
<li>元素数据类型分类：基本数据类型元素的数组、引用数据类型元素的数组（即对象数组）</li>
</ul>
<hr>
<h2 id="一维数组的使用"><a href="#一维数组的使用" class="headerlink" title="一维数组的使用"></a>一维数组的使用</h2><p><b>一维数组的声明和初始化</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] id;   <span class="comment">//声明</span></span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1000</span>,<span class="number">1001</span>,<span class="number">1002</span>,<span class="number">1003</span>,<span class="number">1004</span>&#125;;   <span class="comment">//静态初始化</span></span><br><span class="line">String[] names = <span class="keyword">new</span> String[<span class="number">5</span>];     <span class="comment">//声明 + 动态初始化</span></span><br></pre></td></tr></table></figure>

<hr>
<p><b>一维数组调用指定位置的元素</b></p>
<p>数组的下标从 0 开始</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">names[<span class="number">0</span>] = <span class="string">"张三"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"李四"</span>;</span><br><span class="line">names[<span class="number">2</span>] = <span class="string">"王五"</span>;</span><br><span class="line">names[<span class="number">3</span>] = <span class="string">"赵六"</span>;</span><br><span class="line">names[<span class="number">4</span>] = <span class="string">"孙七"</span>;</span><br></pre></td></tr></table></figure>

<hr>
<p><b>获取数组的长度</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(names.length);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<hr>
<p><b>遍历一维数组</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; names.length; i++&gt;)&#123;</span><br><span class="line">    System.out.print(names[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">张三 李四 王五 赵六 孙七</span><br></pre></td></tr></table></figure>

<hr>
<p><b>数组元素的默认初始化值</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0 0 0 0</span><br></pre></td></tr></table></figure>
<p>整型数组默认初始化值为 0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>[] arr = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.0 0.0 0.0 0.0 0.0</span><br></pre></td></tr></table></figure>
<p>浮点型数组默认初始化值为 0</p>
<p>char型数组默认初始化值为 0 或 ‘\u0000’</p>
<p>boolean 型数组默认初始化值为 false</p>
<p>引用数据类型的数组默认初始化值为 null</p>
<hr>
<p><b>数组的内存解析</b></p>
<p>内存简化结构</p>
<img src='/img/Java入门/20.png'>

<p>栈中常常存放<font color='#00FFFF'>局部变量</font></p>
<p>堆中常常存放<font color='#00FFFF'>通过 new 获得的结构，如：对象、数组</font></p>
<p>以以下代码为例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">String[] arr1 = <span class="keyword">new</span> String[<span class="number">4</span>];</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">"刘德华"</span>;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="string">"张学友"</span>;</span><br><span class="line">arr1 = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<img src='/img/Java入门/21.png'>

<ul>
<li><p>第一行代码：</p>
<p>  以上代码存放于 main 方法中，其中声明的变量皆为局部变量。开始先声明局部变量 int 型数组 arr，将 arr 存放于内存栈中。为 arr 数组初始化，内部元素为1,2,3，于内存堆中开辟三个连续空间存放数组元素，空间首地址假设为 0x34ab，将首地址赋给栈中的 arr，刚开辟的空间内部数组初始值为 0，陆续替换为初始化后的元素。</p>
</li>
<li><p>第二行代码：</p>
<p>  声明局部变量String 型数组 arr1，将 arr1 存放于内存栈中，为 arr1 数组初始化，与内存堆中开辟四个连续空间存放事故族元素，空间首地址假设为 0x12ab，将首地址赋给栈中的 arr1，刚开辟的空间内部数组初始值为 null。</p>
</li>
<li><p>第三行代码：</p>
<p>  将内存堆中首地址为 0x12ab 的连续空间内第二个空间的值替换为“刘德华”。</p>
</li>
<li><p>第四行代码：</p>
<p>  将内存堆中首地址为 0x12ab 的连续空间内第三个空间的值替换为“张学友”。</p>
</li>
<li><p>第五行代码：</p>
<p>  于内存堆中开辟三个连续空间存放数组元素，空间首地址假设为 0x5566，将首地址赋给栈中的 arr1，替换掉原本的 0x12ab，arr1 不再指向首地址为 0x12ab 的这片内存空间。</p>
</li>
</ul>
<hr>
<p><b>例题：</b></p>
<p>从键盘读入学生成绩，找出最高分，并输出学生成绩等级，等级规则如下：</p>
<ul>
<li>成绩 &gt;= 最高分 - 10   等级为：’A’</li>
<li>成绩 &gt;= 最高分 - 20   等级为：’B’</li>
<li>成绩 &gt;= 最高分 - 30   等级为：’C’</li>
<li>其余   等级为：’D’</li>
</ul>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">"请输入你要录入的成绩个数："</span>);</span><br><span class="line">        <span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line">        <span class="keyword">double</span>[] examnum = <span class="keyword">new</span> <span class="keyword">double</span>[num];</span><br><span class="line">        System.out.print(<span class="string">"\n请依次输入成绩："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; examnum.length; i++) &#123;</span><br><span class="line">            examnum[i] = scan.nextDouble();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span>[] sortnum = <span class="keyword">new</span> <span class="keyword">double</span>[num];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; examnum.length; j++) &#123;</span><br><span class="line">            sortnum[j] = examnum[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; sortnum.length - <span class="number">1</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; sortnum.length - <span class="number">1</span> - k; l++) &#123;</span><br><span class="line">                <span class="keyword">double</span> t;</span><br><span class="line">                <span class="keyword">if</span> (sortnum[l] &gt; sortnum[l + <span class="number">1</span>]) &#123;</span><br><span class="line">                    t = sortnum[l + <span class="number">1</span>];</span><br><span class="line">                    sortnum[l + <span class="number">1</span>] = sortnum[l];</span><br><span class="line">                    sortnum[l] = t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"最高分为："</span> + sortnum[sortnum.length - <span class="number">1</span>]);</span><br><span class="line">        System.out.println(<span class="string">"各学生评分情况如下："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> o = <span class="number">0</span>; o &lt; examnum.length; o++) &#123;</span><br><span class="line">            <span class="keyword">char</span> grade;</span><br><span class="line">            <span class="keyword">if</span> (examnum[o] &gt;= sortnum[sortnum.length - <span class="number">1</span>] - <span class="number">10</span>) &#123;</span><br><span class="line">                grade = <span class="string">'A'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (examnum[o] &gt;= sortnum[<span class="number">0</span>] - <span class="number">20</span>) &#123;</span><br><span class="line">                grade = <span class="string">'B'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (examnum[o] &gt;= sortnum[<span class="number">0</span>] - <span class="number">30</span>) &#123;</span><br><span class="line">                grade = <span class="string">'C'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                grade = <span class="string">'D'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"学生 "</span> + o + <span class="string">" 的成绩为："</span> + grade);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/22.png'>

<hr>
<h2 id="多维数组的使用"><a href="#多维数组的使用" class="headerlink" title="多维数组的使用"></a>多维数组的使用</h2><p><b>二维数组概述</b></p>
<p>一个一维数组作为另一个一维数组的元素而存在，则该数组即为二维数组</p>
<p><b>二维数组的声明和初始化</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;&#125;;</span><br><span class="line"><span class="comment">//动态初始化</span></span><br><span class="line">String[][] arr1 = <span class="keyword">new</span> String[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="comment">//另一种动态初始化</span></span><br><span class="line">String[][] arr2 = <span class="keyword">new</span> String[<span class="number">3</span>][];</span><br></pre></td></tr></table></figure>

<hr>
<p><b>调用二维数组指定位置元素</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p>对上面的 arr2 赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr2 = <span class="keyword">new</span> String[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr[<span class="number">0</span>][<span class="number">2</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure>

<hr>
<p><b>获取二维数组长度</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上方代码内的arr</span></span><br><span class="line">System.out.println(arr.length);</span><br><span class="line">System.out.println(arr[<span class="number">0</span>].length);</span><br><span class="line">System.out.println(arr[<span class="number">1</span>].length);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<hr>
<p><b>遍历二维数组</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++)&#123;</span><br><span class="line">        System.out.print(arr[i][j] + <span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 2 3 </span><br><span class="line">4 5 </span><br><span class="line">6 7 8</span><br></pre></td></tr></table></figure>

<hr>
<p><b>二维数组的初始化值</b></p>
<p>二维数组分为外层数组的元素和内层数组的元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr4 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr4[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr4[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[I@15db9742</span><br><span class="line">0</span><br></pre></td></tr></table></figure>

<p>上方看似乱码的数据为地址值。</p>
<p>因为二维数组实质就是数组之间的嵌套关系，因此外层数组元素存放的是要指向内层数组的信息，而直接指向信息便是地址值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr4);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[I@6d06d69c</span><br></pre></td></tr></table></figure>

<p>相比于上一个地址值，该地址值前缀有两个“[”，表示这是一个二维数组的地址值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>[][] arr5 = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr5[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr5[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[F@6d06d69c</span><br><span class="line">0.0</span><br></pre></td></tr></table></figure>

<p>由此看出上述结果前缀中有的是“[I”，而有的是“[F”，通过代码了解到前缀包含“I”表示这是一个 int 型数组的地址值，前缀包含“F”，表示这是一个 float 型数组的地址值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] arr6 = <span class="keyword">new</span> String[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">System.out.println(arr6[<span class="number">0</span>]);</span><br><span class="line">System.out.println(arr6[<span class="number">0</span>][<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Ljava.lang.String;@7852e922</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>该结果地址值中前缀包含的是String所在的包名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[][] arr7 = <span class="keyword">new</span> String[<span class="number">4</span>][];</span><br><span class="line">System.out.println(arr7[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null</span><br></pre></td></tr></table></figure>

<p>因为未对内存数组初始化，因此无指向信息，但由于数组是引用类型变量，因此初始化值为 null</p>
<hr>
<p><b>二维数组的内存解析</b></p>
<p>针对以下代码进行内存解析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>][];</span><br><span class="line">arr1[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">arr1[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">arr1[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<img src='/img/Java入门/23.png'>

<ul>
<li><p>第一行代码：</p>
<p>  声明一个二维数组 arr1，将 arr1 放入内存栈中，对 arr1 进行初步初始化开辟四个连续的内存空间，假设该内存空间首地址为 0x1234，将首地址赋给内存栈中的 arr1，因未对内层数组进行初始化因此外层数组元素初始值全为 null。</p>
</li>
<li><p>第二行代码：</p>
<p>  对 arr1 中外层数组第二个元素初始化 int 型数组，开辟三个连续的内存空间，初始默认值为 0，其中元素分别替换为1,2,3，假设该连续空间首地址为 0x7788，将该首地址赋值给外层数组第二个元素，替换掉 null。</p>
</li>
<li><p>第三行代码：</p>
<p>  对 arr1 中外层数组第三个元素初始化 int 型数组，开辟四个连续的内存空间，初始默认值为 0，假设该连续空间首地址为 0x6677，将该首地址赋值给外层数组第三个元素，替换掉 null。</p>
</li>
<li><p>第四行代码：</p>
<p>  将arr1 中外层数组第三个元素的数组中第二个元素替换为 30。</p>
</li>
</ul>
<hr>
<p><b>例题：杨辉三角形</b></p>
<img src='/img/Java入门/24.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"请输入要输出的杨辉三角形阶数："</span>);</span><br><span class="line">        Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">int</span> floor = scan.nextInt();</span><br><span class="line">        <span class="keyword">int</span>[][] yh = <span class="keyword">new</span> <span class="keyword">int</span>[floor][];</span><br><span class="line">        yh[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>&#125;;</span><br><span class="line">        yh[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; yh.length; i++) &#123;</span><br><span class="line">            yh[i] = <span class="keyword">new</span> <span class="keyword">int</span>[i + <span class="number">1</span>];</span><br><span class="line">            yh[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            yh[i][i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                yh[i][j] = yh[i - <span class="number">1</span>][j - <span class="number">1</span>] + yh[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k&lt;yh.length;k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>;l&lt;=k;l++)&#123;</span><br><span class="line">                System.out.print(yh[k][l]+<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/25.png'>

<hr>
<h2 id="数组常见算法"><a href="#数组常见算法" class="headerlink" title="数组常见算法"></a>数组常见算法</h2><p><b>数组的常见算法之线性查找</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>,<span class="string">"BB"</span>,<span class="string">"CC"</span>,<span class="string">"DD"</span>&#125;;</span><br><span class="line">String dest = <span class="string">"CC"</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(dest.equals(arr[i]))&#123;</span><br><span class="line">        System.out.println(<span class="string">"指定元素位置为："</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"未找到指定元素"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定元素位置为：2</span><br></pre></td></tr></table></figure>

<hr>
<p><b>数组的常见算法之二分法查找</b></p>
<p>前提：所要查找的数组有序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">34</span>,<span class="number">50</span>,<span class="number">67</span>,<span class="number">80</span>,<span class="number">95</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dest = <span class="number">67</span>;</span><br><span class="line"><span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">int</span> head = <span class="number">0</span>;   <span class="comment">//头部索引</span></span><br><span class="line"><span class="keyword">int</span> end = arr.length - <span class="number">1</span>;   <span class="comment">//尾部索引</span></span><br><span class="line"><span class="keyword">while</span>(head &lt;= end)&#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (head + end)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(dest == arr[mid])&#123;</span><br><span class="line">        System.out.println(<span class="string">"指定元素位置为："</span> + mid);</span><br><span class="line">        isFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dest &lt; arr[mid])&#123;</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        head = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(isFlag == <span class="keyword">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">"未找到指定元素"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">指定元素位置为：5</span><br></pre></td></tr></table></figure>

<hr>
<p><b>排序算法</b></p>
<p>时间复杂度：分析关键字的比较次数和记录的移动次数。</p>
<p>空间复杂度：分析排序算法中需要多少辅助内存</p>
<p>稳定性：若两个记录 A 和 B 的关键字值相等，但排序后 A、B 的先后次序保持不变，则称这种算法是稳定的。</p>
<p>内部排序：直接在内存中完整进行排序操作。</p>
<p>外部排序：通过外部存储器（磁盘）的辅助，每次选取一段数据放入内存进行排序后写入，可视为多次内部排序。</p>
<p>十大内部排序算法：</p>
<ul>
<li>选择排序<ul>
<li>直接选择排序、堆排序</li>
</ul>
</li>
<li>交换排序<ul>
<li>冒泡排序、快速排序</li>
</ul>
</li>
<li>插入排序<ul>
<li>直接插入排序、折半插入排序、Shell 排序</li>
</ul>
</li>
<li>归并排序</li>
<li>桶式排序</li>
<li>基数排序</li>
</ul>
<hr>
<p><b>数组排序之冒泡排序</b></p>
<p>设计思想：将相邻元素进行比较，针对需求进行交换（从大到小或从小到大），第一次交换循环得到最大值（最小值）在数组末尾，第二次交换循环得到次最大值（次最小值）在数组倒数第二个位置，以此类推。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">90</span>,<span class="number">60</span>,<span class="number">3</span>,<span class="number">71</span>,<span class="number">81</span>,<span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt; arr.length - <span class="number">1</span> - i;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>;k &lt; arr.length;k++)&#123;</span><br><span class="line">    System.out.print(arr[k]+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">90 81 71 60 5 4 3 2 1</span><br></pre></td></tr></table></figure>

<hr>
<p><b>数组排序之快速排序</b></p>
<img src='/img/Java入门/26.png'>

<p>设计思想：</p>
<p>如图，在一个数组上任意选取一个数，令 Pivot 指向该数，令 low 指向 Pivot 所指位置后一个数，令 high 指向该组数组末尾元素。当 low 所指数小于 Pivot 所指元素时，则指向下一个元素，指针向后移一位，当 high 所指数大于 Pivot 所指元素时，则指向上一个元素，指针向前移一位。若 low 所指数大于等于 Pivot 所指元素时，停止移动，若 high 所指数小于 Pivot 所指元素时，停止移动。当 low 和 high 都停止移动时，交换此时两指针所指元素，随后继续移动。当 high 指针被 low 指针所超过时，令 Pivot 指向此时 high 所指位置，一次排序结束。随后通过 Pivot 将该数组分为两份，Pivot 所指元素两侧数组再次进行之前的排序活动，以此类推。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = data[i];</span><br><span class="line">        data[i] = data[j];</span><br><span class="line">        data[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subSort</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> base = data[start];</span><br><span class="line">            <span class="keyword">int</span> low = start;</span><br><span class="line">            <span class="keyword">int</span> high = end + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (low &lt; end &amp;&amp; data[++low] - base &lt;= <span class="number">0</span>)</span><br><span class="line">                    ;</span><br><span class="line">                <span class="keyword">while</span> (high &gt; start &amp;&amp; data[--high] - base &gt;= <span class="number">0</span>)</span><br><span class="line">                    ;</span><br><span class="line">                <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">                    swap(data, low, high);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(data, start, end);</span><br><span class="line"></span><br><span class="line">            subSort(data, start, high - <span class="number">1</span>);</span><br><span class="line">            subSort(data, high + <span class="number">1</span>, end);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line">        subSort(data, <span class="number">0</span>, data.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] data = &#123;<span class="number">9</span>, -<span class="number">16</span>, <span class="number">30</span>, <span class="number">23</span>, -<span class="number">30</span>, -<span class="number">49</span>, <span class="number">25</span>, <span class="number">21</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">"排序前："</span> + java.util.Arrays.toString(data));</span><br><span class="line">        quickSort(data);</span><br><span class="line">        System.out.println(<span class="string">"排序后："</span> + java.util.Arrays.toString(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Arrays-工具类的使用"><a href="#Arrays-工具类的使用" class="headerlink" title="Arrays 工具类的使用"></a>Arrays 工具类的使用</h2><p>例如：</p>
<img src='/img/Java入门/27.png'>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//equals 的使用</span></span><br><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isEquals = Arrays.equals(arr1,arr2);</span><br><span class="line">System.out.println(isEquals);</span><br><span class="line"></span><br><span class="line"><span class="comment">//toString 数组遍历</span></span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//fill 将指定的值填充到数组当中</span></span><br><span class="line">Arrays.fill(arr1,<span class="number">10</span>);</span><br><span class="line">System.out.println(Arrays.toString(arr1));</span><br><span class="line"></span><br><span class="line"><span class="comment">//sort 对数组进行排序</span></span><br><span class="line">Arrays.sort(arr2);</span><br><span class="line">System.out.println(Arrays.toString(arr2));</span><br><span class="line"></span><br><span class="line"><span class="comment">//binarySearch 二分查找</span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,-<span class="number">34</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">3</span>,<span class="number">79</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> index = Arrays.binarySearch(arr3,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">if</span>(index &gt;= <span class="number">0</span>)&#123;     <span class="comment">//该方法若返回负值，则说明未查找到</span></span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"未找到"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">[1,2,3,4]</span><br><span class="line">[10,10,10,10]</span><br><span class="line">[1,2,3,4]</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="面向对象编程（1）"><a href="#面向对象编程（1）" class="headerlink" title="面向对象编程（1）"></a>面向对象编程（1）</h1><h2 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h2><p>二者都是一种思想，面向对象是相对于面向过程而言的，面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。面向对象，将功能封装进对象，强调了具备功能的对象，以类/对象为最小单位,考虑谁来做。</p>
<h2 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h2><ul>
<li>类：是对一类事物的描述，是抽象的、概念上的定义。</li>
<li>对象：是实际存在的该类事物的每个个体，因而也称为实例。</li>
</ul>
<p>设计类就是设计 类的成员。</p>
<p>类的成员常常包含：属性（成员变量）、方法（成员函数）</p>
<p>初级类（只包含属性和方法）举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMarried;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名字是："</span> + name + <span class="string">"，年龄是："</span> + age + <span class="string">"，Married:"</span> + isMarried;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类的实例化即创建类的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>

<p>调用对象的属性和方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">p1.name = <span class="string">"Tom"</span>;</span><br><span class="line">p1.age = <span class="number">18</span>;</span><br><span class="line">p1.isMarried = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">p1.display();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">名字是：Tom，年龄是：18，Married：false</span><br></pre></td></tr></table></figure>

<p>若创建了一个类的多个对象，每个对象都有自己独立的一套属性和方法（非 static 情况）</p>
<p>易发生情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person p2 = p1;</span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">"Tom"</span>;</span><br><span class="line">p1.age = <span class="number">18</span>;</span><br><span class="line">p1.isMarried = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">p2.name = <span class="string">"Jack"</span>;</span><br><span class="line"></span><br><span class="line">p1.display();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">名字是：Jack，年龄是：18，Married：false</span><br></pre></td></tr></table></figure>

<p>这是因为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person p2 &#x3D; p1;</span><br></pre></td></tr></table></figure>
<p>这行代码将 p1 在堆空间所指向的地址值赋给了 p2，即 p1 和 p2 指向了同一个堆空间中的地址，则两者共享同一片空间，同一个对象。</p>
<hr>
<p><b>对象的内存解析</b></p>
<img src='/img/Java入门/28.png'>

<img src='/img/Java入门/29.png'>

<p>示例代码：</p>
<p>类的创建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"名字是："</span> + name + <span class="string">"，年龄是："</span> + age + <span class="string">"，Married:"</span> + isMarried;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src='/img/Java入门/30.png'>

<p>解析代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name = <span class="string">"Tom"</span>;</span><br><span class="line">p1.isMale = <span class="keyword">true</span>;</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">System.out.println(p2.name);</span><br><span class="line">Person p3 = p1;</span><br><span class="line">p3.age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>第一行代码：</p>
<p>  在栈中放入对象 p1，在堆空间中开辟一片以 Person 类为模板的对象空间，假设首地址为 0x12ab，将首地址赋给 p1。</p>
</li>
<li><p>第二行代码：</p>
<p>  将 p1 所指对象空间中的 name 属性的值更改为 “Tom”。</p>
</li>
<li><p>第三行代码：</p>
<p>  将 p1 所指对象空间中的 isMale 属性的值更改为 true。</p>
</li>
<li><p>第四行代码：</p>
<p>  在栈中放入对象 p2，在堆空间中开辟一片以 Person 类为模板的对象空间，假设首地址为 0x7788，将首地址赋给 p2。</p>
</li>
<li><p>第五行代码：</p>
<p>  输出 p2 所指对象空间中 name 属性的值，输出结果为 null。</p>
</li>
<li><p>第六行代码：</p>
<p>  在栈中放入对象 p3，将 p1 所指对象空间首地址赋给 p3，p3 和 p1 共享同一个对象空间。</p>
</li>
<li><p>第七行代码：</p>
<p>  将 p3 所指对象空间中的 age 属性的值更改为 10。</p>
</li>
</ul>
<hr>
<p><b>属性和局部变量</b></p>
<p>不同点：</p>
<ul>
<li>在类中声明的位置不同<ul>
<li>属性：直接定义在类的一对 {} 内。</li>
<li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内的变量。</li>
</ul>
</li>
<li>权限修饰符不同<ul>
<li>属性：可以在声明属性时，指明其权限，使用权限修饰符（private、public、缺省、protected）</li>
<li>局部变量：不可使用权限修饰符。</li>
</ul>
</li>
<li>默认初始化值不同<ul>
<li>属性：根据其类型，都有其初始化值。</li>
<li>局部变量：没有默认初始化值，调用前一定要先显性赋值。</li>
</ul>
</li>
<li>内存中加载位置不同<ul>
<li>属性：加载在堆空间（非 static）。</li>
<li>局部变量：加载在栈空间。</li>
</ul>
</li>
</ul>
<p>相同点：</p>
<ul>
<li>定义格式相同。</li>
<li>先声明，后使用。</li>
<li>都有其对应的作用域。</li>
</ul>
<hr>
<p><b>类中方法的声明和使用</b></p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">boolean</span> isMale;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"休息了"</span> + hour + <span class="string">"个小时"</span>);</span><br><span class="line">        eat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNation</span><span class="params">(String nation)</span> </span>&#123;</span><br><span class="line">        String info = <span class="string">"我的国籍是"</span> + nation;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法可以声明 0 个、1 个或多个形参。</p>
<p>return 使用在方法体中，针对有返回值类型的方法返回数据，或者结束方法。</p>
<p>方法在使用过程中可以调用当前类的属性或方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Customer cust = <span class="keyword">new</span> Customer();</span><br><span class="line">cust.sleep(<span class="number">8</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">休息了8个小时</span><br><span class="line">客户吃饭</span><br></pre></td></tr></table></figure>

<p>方法里不能定义其他方法</p>
<p>匿名对象：</p>
<p>类的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发送邮件"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPrice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"手机的价格为："</span> + price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>匿名对象调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Phone().sendEmail();</span><br><span class="line"><span class="keyword">new</span> Phone().price = <span class="number">1999</span>;</span><br><span class="line"><span class="keyword">new</span> Phone().getPrice();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送邮件</span><br><span class="line">0.0</span><br></pre></td></tr></table></figure>

<p>由此看出匿名对象的每次调用都是对应着一个新的对象，互不相通的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhoneMall</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Phone phone)</span></span>&#123;</span><br><span class="line">        phone.sendEmail();</span><br><span class="line">        phone.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PhoneMall mall = <span class="keyword">new</span> PhoneMall();</span><br><span class="line">mall.show(<span class="keyword">new</span> Phone());</span><br></pre></td></tr></table></figure>

<p>以上应用方法也很常见。</p>
<hr>
<h2 id="再谈方法"><a href="#再谈方法" class="headerlink" title="再谈方法"></a>再谈方法</h2><p><b>方法的重载</b></p>
<p>重载：在同一个类中，允许存在一个以上的同名方法，只要他们的参数个数或参数类型不同即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> i, String j)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"先整后串"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(String j, <span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"先串后整"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Test().check(<span class="number">16</span>,<span class="string">"Tom"</span>);</span><br><span class="line"><span class="keyword">new</span> Test().check(<span class="string">"Tom"</span>,<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先整后串</span><br><span class="line">先串后整</span><br></pre></td></tr></table></figure>

<hr>
<p><b>可变个数的形参</b></p>
<p>JDKSE 5.0 后提供了 Varargs 机制，允许直接定义能和多个实参相匹配的形参。</p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String ... s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"可变"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不可变"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Test test = <span class="keyword">new</span> Test();</span><br><span class="line">test.show(<span class="string">"tom"</span>);</span><br><span class="line">test.show(<span class="string">"tom"</span>,<span class="string">"jack"</span>,<span class="string">"lucy"</span>);</span><br><span class="line">test.show();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不可变</span><br><span class="line">可变</span><br><span class="line">可变</span><br></pre></td></tr></table></figure>

<p>由此知道传入可变形参个数的方法时，传入的参数个数可以是 0 个及以上。</p>
<p>可变参数个数方法与本类方法名相同，形参类型也相同的数组之间不构成重载，两者不可共存。</p>
<p>可变个数形参必须声明在参数列表末尾，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> i,String ... s)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><b>方法的值传递机制</b></p>
<p>实参传入放的过程：</p>
<ul>
<li>形参是基本数据类型时，将实参基本数据类型的变量的“数据值”传递给形参。</li>
<li>形参是引用数据类型是，将实参引用数据类型的变量的“地址值”传递给形参。</li>
</ul>
<hr>
<h2 id="封装和隐藏"><a href="#封装和隐藏" class="headerlink" title="封装和隐藏"></a>封装和隐藏</h2><p>在实际开发过程中，要尽量避免用户使用“对象.属性”的方式对属性进行赋值，则需要将属性声明为私有（private），通过方法添加限制条件进行赋值。</p>
<p>我们将类的属性私有化（private），同时，提供公共（public）的方法来获取和设置此属性的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name1)</span></span>&#123;</span><br><span class="line">        name = name1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age1)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(age1 &gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            age = age1;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//抛出一个异常</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line">animal.setName(<span class="string">"Tom"</span>);</span><br><span class="line">animal.setAge(<span class="number">7</span>);</span><br><span class="line">System.out.println(animal.getName());</span><br><span class="line">System.out.println(animal.getAge());</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tom</span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<hr>
<p><b>四种权限修饰符</b></p>
<p>权限从小到大依次排列：</p>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>类内部</th>
<th>同一个包</th>
<th>不同包的子类</th>
<th>同一个工程</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>缺省</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<p>四种权限可以修饰类和类的内部结构（属性、方法、构造器、内部类）。</p>
<p>四种权限都可以修饰类的内部结构</p>
<p>private、protected 不能修饰类本身</p>
<hr>
<p><b>构造器</b></p>
<p>作用：</p>
<ul>
<li>创建对象</li>
<li>初始化对象的信息</li>
</ul>
<p>如果没有显式的定义类的构造器的话，则系统会默认提供一个空参的构造器。</p>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Person...</span><br></pre></td></tr></table></figure>

<p>构造器可以有多个，一个类中定义的多个构造器，彼此构成重载。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String n)</span></span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tom</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="关键字：this"><a href="#关键字：this" class="headerlink" title="关键字：this"></a>关键字：this</h2><p>this 可以视为当前对象的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">p.setAge(<span class="number">1</span>);</span><br><span class="line">System.out.println(p.getAge());</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure>

<p>更改定义类的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure>

<p>this 修饰属性和方法：this 理解为当前对象的</p>
<p>this 调用构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始调用构造器"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age,<span class="keyword">boolean</span> isFlag)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name,age);</span><br><span class="line">        <span class="keyword">if</span>(isFlag == <span class="keyword">false</span>)</span><br><span class="line">            System.out.println(<span class="string">"调用结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">7</span>,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开始调用构造器</span><br><span class="line">Tom</span><br><span class="line">7</span><br><span class="line">调用结束</span><br></pre></td></tr></table></figure>

<p>当要调用其他构造器时，必须声明在当前构造器的首行，且一个构造器只能调用一个其他构造器。</p>
<hr>
<h2 id="关键字之-package-和-import"><a href="#关键字之-package-和-import" class="headerlink" title="关键字之 package 和 import"></a>关键字之 package 和 import</h2><p>package 关键字的使用：</p>
<ul>
<li><p>为了更好实现项目中类的管理，引入了包的概念。</p>
</li>
<li><p>使用package声明类或接口所属的包，声明在源文件首行。</p>
</li>
<li><p>包属于标识符，要符合命名规范，“见名知意”。</p>
</li>
<li><p>每“.”一次，就代表一层文件目录。</p>
<p>  如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.poem.java1;</span><br></pre></td></tr></table></figure>
<p>  在文件资源列表显示为三层：</p>
  <img src='/img/Java入门/31.png'></li>
<li><p>同一个包下不能命名同名的类、接口。</p>
</li>
</ul>
<img src='/img/Java入门/32.png'>

<img src='/img/Java入门/33.png'>

<p>import 关键字的使用：</p>
<ul>
<li><p>在源文件中，显式的使用 import 导入指定包中的接口、类。</p>
</li>
<li><p>声明在包的声明和类的声明之间。</p>
</li>
<li><p>如果要导入某个包中的多个类或接口，如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Array;</span><br></pre></td></tr></table></figure>
<p>  可以直接用“ * ”代替结构名，如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;     <span class="comment">//这样导入了util下所有结构</span></span><br></pre></td></tr></table></figure></li>
<li><p>如果使用的类或接口属于 java.lang 中的，则可省略 import 显式声明。</p>
</li>
<li><p>使用“xxx.*”可以表示 xxx 包下的所有结构，但如果使用 xxx 子包下的结构，仍需要通过 import 导入，包括 java.lang 包下的子包，如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br></pre></td></tr></table></figure></li>
<li><p>如果使用多个包中的同名类，则在使用该类时，命名完整，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.poem.java1.Login log1 = <span class="keyword">new</span> com.poem.java1.Login();</span><br><span class="line">com.poem.java2.Login log2 = <span class="keyword">new</span> com.poem.java2.Login(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>可以通过 import static 导入指定类或接口中的静态结构（属性或方法），如：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br></pre></td></tr></table></figure>
<p>  导入过后：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println();</span><br><span class="line"><span class="comment">//上下等同</span></span><br><span class="line">out.println();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="面向对象编程（2）"><a href="#面向对象编程（2）" class="headerlink" title="面向对象编程（2）"></a>面向对象编程（2）</h1><h2 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h2><p>一个类可以继承另一个类中的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Person.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> agel</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Student.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String major;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">learn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(major);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.eat();</span><br><span class="line">Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">s1.major = <span class="string">"计算机"</span>;</span><br><span class="line">s1.eat();</span><br><span class="line">s1.learn();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">吃</span><br><span class="line">吃</span><br><span class="line">计算机</span><br></pre></td></tr></table></figure>

<p>继承性好处：</p>
<ul>
<li>减少代码冗余，提高复用性。</li>
<li>便于功能的扩展。</li>
<li>为多态性的使用提供了前提。</li>
</ul>
<p>继承性的规定：</p>
<ul>
<li>一个类可以有多个子类。</li>
<li>一个类只能有一个父类。</li>
<li>一个类的子类也可以是某个类的父类（多层继承）。</li>
</ul>
<p>所有类的最上层父类都是 Object 类（java.lang.Object）。</p>
<hr>
<h2 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h2><p>重写：在子类中可以根据需要对父类中的方法进行改造，子类方法将覆盖父类的方法。</p>
<p>要求：</p>
<ul>
<li><p>子类重写的方法必须和父类中的被重写方法具有相同的方法名和参数列表。</p>
</li>
<li><p>子类重写方法的返回值类型不能大于父类被重写方法中的返回值类型（若是基本类型，则必须相同）。</p>
</li>
<li><p>子类重写方法的访问权限不能小于父类被重写方法的访问权限。</p>
<p>  子类不能重写父类中声明为 private 的方法。</p>
</li>
<li><p>子类方法抛出的异常不能大于父类被重写方法的异常。</p>
</li>
</ul>
<hr>
<h2 id="关键字之-super"><a href="#关键字之-super" class="headerlink" title="关键字之 super"></a>关键字之 super</h2><p>super 可以理解为：父类的。<br>super 可以用来调用：属性、方法、构造器。<br>通常当子父类有重名结构时使用。</p>
<p>父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1001</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name);     <span class="comment">//调用构造器</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String major;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">1002</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String major)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃好的"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Tom"</span>);       <span class="comment">//调用父类构造器</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.id);</span><br><span class="line">        eat();</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.show();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tom</span><br><span class="line">1002</span><br><span class="line">1001</span><br><span class="line">吃好的</span><br><span class="line">吃</span><br></pre></td></tr></table></figure>

<p>在构造器首行没有显式的声明“this(形参列表)”或“super(形参列表)”，则默认调用父类中的空参构造器：super()</p>
<p>如：</p>
<p>父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"哈喽"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">哈喽</span><br></pre></td></tr></table></figure>

<p>实际上在子类的构造其中存在：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在类的多个构造器中，至少有一个类的构造器中使用了“super(形参列表)”，调用父类的构造器。</p>
<hr>
<h2 id="面向对象之多态性"><a href="#面向对象之多态性" class="headerlink" title="面向对象之多态性"></a>面向对象之多态性</h2><p>父类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"能够吃东西"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isRich;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃的很多"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">earnMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"很会挣钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>子类2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> isBeauty;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Women</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃的很少"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goShopping</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"很会花钱"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.eat();</span><br><span class="line"></span><br><span class="line">Man man = <span class="keyword">new</span> Man();</span><br><span class="line">man.eat();</span><br><span class="line">man.age = <span class="number">25</span>;</span><br><span class="line">man.earnMoney();</span><br><span class="line"></span><br><span class="line"><span class="comment">//多态体现：父类的引用指向子类的对象</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Man();</span><br><span class="line">Person p3 = <span class="keyword">new</span> Woman();</span><br><span class="line"><span class="comment">//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法</span></span><br><span class="line">p2.eat();</span><br><span class="line"><span class="comment">//p2.earnMoney();     会报错</span></span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">能够吃东西</span><br><span class="line">吃的很多</span><br><span class="line">很会赚钱</span><br><span class="line">吃的很多</span><br></pre></td></tr></table></figure>

<p>有了对象多态性后我们可以在编译期调用父类定义的方法，但在执行期，实际执行的是子类重写后的方法。</p>
<p>多态性只适用于方法，不适用于属性。</p>
<p>虚拟方法调用：</p>
<p>子类中定义了和父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚拟方法，父类根据赋给它的不同的子类对象，动态调用属于子类的该方法。</p>
<p>若想调用子类中特有的方法和属性，可以进行向下转型（强制类型转换）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略.......</span></span><br><span class="line">p2.eat();</span><br><span class="line">Man m1 = (Man)p2;</span><br><span class="line">m1.earnMoney();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">省略..........</span><br><span class="line">很会赚钱</span><br></pre></td></tr></table></figure>

<p>但存在转换隐患</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略.....</span></span><br><span class="line">p2.eat();</span><br><span class="line">Man m1 = (Man)p2;</span><br><span class="line">m1.earnMoney();</span><br><span class="line">Woman w1 = (Woman)p2;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">报错信息.....</span><br></pre></td></tr></table></figure>

<p>因为 p2 在实例化时实例的对象类型就是 Man，Man 与 Woman 平级，此时将 p2 转为 Woman 实际上是将  Man 类型转换为 Woman 类型，因此失败。</p>
<hr>
<h2 id="关键字之-instanceof"><a href="#关键字之-instanceof" class="headerlink" title="关键字之 instanceof"></a>关键字之 instanceof</h2><p>a instanceof A：判断对象 a 是否是类 A 的实例，如果是（返回 true），如果不是（返回 false）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//省略.....</span></span><br><span class="line">p2.eat();</span><br><span class="line">Man m1 = (Man)p2;</span><br><span class="line">m1.earnMoney();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Woman)&#123;</span><br><span class="line">    System.out.println(<span class="string">"女人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Man)&#123;</span><br><span class="line">    System.out.println(<span class="string">"男人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p2 <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">    System.out.println(<span class="string">"人"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">省略......</span><br><span class="line">男人</span><br><span class="line">人</span><br></pre></td></tr></table></figure>

<p>为了避免向下转型出现异常，因此在向下转型前先通过 instanceof 进行判断，返回 true 则继续进行转型。</p>
<p>同时 instanceof 判断不是一对一唯一正确的，只要是确实对象或其父类，都可以返回 true。</p>
<hr>
<h2 id="Object-类的剖析"><a href="#Object-类的剖析" class="headerlink" title="Object 类的剖析"></a>Object 类的剖析</h2><p>Object 类方法及用处：</p>
<ul>
<li>clone()：克隆一个对象</li>
<li>equals()：比较两个对象是否相等</li>
<li>finalize()：回收堆空间中未被指向的对象之前会调用该方法（一般不主动调用，会自动调用）</li>
<li>getclass()：返回当前对象的类</li>
<li>hashcode()：返回当前对象的哈希值</li>
</ul>
<p><b>== 和 equals() 的区别</b></p>
<ul>
<li>== 既可以比较基本数据类型也可以比较引用数据类型，对于基本数据类型是比较值，对于引用数据类型是比较地址值。</li>
<li>equals() 属于 Object 类里面的方法，若该方法未被重写过，则默认功能与 == 相同。但诸如String、Date、包装类等都对其有所重写。</li>
<li>具体看自定义类中是否对 equals() 方法有所重写。</li>
<li>通常重写后会比较类中相应属性是否都相等。</li>
</ul>
<hr>
<p><b>toString() 的使用</b></p>
<ol>
<li><p>当我们输出一个对象的引用时，实际上就是调用当前对象的 toString()</p>
</li>
<li><p>Object 中 toString() 的定义：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getclass.getName() + <span class="string">"@"</span> + Integer.toHexStirng(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如 String、Date、包装类等都重写了 toString() 方法，使得调用后返回“实体内容”。</p>
</li>
</ol>
<hr>
<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><img src='/img/Java入门/34.png'>

<p>使基本数据类型得到与类相同的待遇。</p>
<img src='/img/Java入门/35.png'>

<p>基本数据类型 –&gt; 包装类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">Integer in1 = <span class="keyword">new</span> Integer(num1);</span><br><span class="line">System.out.println(in1.toString());</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<p>包装类 –&gt; 基本数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer in1 = <span class="keyword">new</span> Integer(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> i1 = in1.intValue();</span><br><span class="line">System.out.println(i1 + <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22</span><br></pre></td></tr></table></figure>

<p>自动装箱与自动拆箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">    method(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure>

<p>自动装箱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer in1 = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>

<p>自动拆箱：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num3 = in1;</span><br></pre></td></tr></table></figure>

<p>包装类（基本数据类型） –&gt; String</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用valueOf（）</span></span><br><span class="line"><span class="keyword">float</span> f1 = <span class="number">12.3f</span>;</span><br><span class="line">String str1 = String.valueOf(f1);   <span class="comment">//"12.3"</span></span><br></pre></td></tr></table></figure>

<p>String –&gt; 包装类（基本数据类型）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用parseXxx</span></span><br><span class="line">String str2 = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">int</span> i1 = Integer.parseInt(str2);    <span class="comment">//123</span></span><br></pre></td></tr></table></figure>

<p>易错情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">    System.out.println(o1);     <span class="comment">//1.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object o2;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">    &#125;<span class="comment">//1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.0</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>因为三元运算符需要统一数据类型，因此整型自动提升为双精度浮点型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">    System.out.println(i == j);</span><br><span class="line"></span><br><span class="line">    Integer m = <span class="number">1</span>;</span><br><span class="line">    Integer n = <span class="number">1</span>;</span><br><span class="line">    System.out.println(m == n);</span><br><span class="line"></span><br><span class="line">    Integer x = <span class="number">128</span>;</span><br><span class="line">    Integer y = <span class="number">128</span>;</span><br><span class="line">    System.out.println(x == y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个输出：i 和 j 都属于对象，== 比较的是两者的地址值，不相等，因此为false。</li>
<li>第二个输出：m 和 n 通过自动装箱的方式进行赋值，因此两者比较的是数值，相等，为true。</li>
<li>第三个输出：x 和 y 虽然看似都是自动装箱方式进行赋值，但 Integer 内部定义了 IntegerCache 结构，IntegerCache 中定义了 Integer[] 数组，保存了 -128 ~ 127 范围内的整数。如果通过自动装箱方式，给 Integer 赋值的范围在 -128 ~ 127 范围内时，可以直接使用数组中的元素，不需要 new，反之必须要有 new 才能完成装箱。</li>
</ul>
<hr>
<h1 id="面向对象（下）"><a href="#面向对象（下）" class="headerlink" title="面向对象（下）"></a>面向对象（下）</h1><h2 id="关键字之-static"><a href="#关键字之-static" class="headerlink" title="关键字之 static"></a>关键字之 static</h2><p>在编写类的过程，只是对象的属性及其方法，并未产生实质的对象，只有通过 new 关键字才能创建实质的对象，这时系统才会给对象分配内存空间。但若我们需要无论产生多少对象的情况下，内存空间始终存有一份某些特别的数据，其余对象可以共享，这时可以使用 static 关键字。</p>
<p>static 可以修饰：属性、方法、代码块、内部类。</p>
<p>修饰静态变量（类变量）：</p>
<p>类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> nation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Chinese c1 = <span class="keyword">new</span> Chinese();</span><br><span class="line">Chinese c2 = <span class="keyword">new</span> Chinese();</span><br><span class="line"></span><br><span class="line">c1.name = <span class="string">"张三"</span>;</span><br><span class="line">c1.age = <span class="number">25</span>;</span><br><span class="line">c1.nation = <span class="string">"CN"</span></span><br><span class="line"></span><br><span class="line">c2.name = <span class="string">"李四"</span>;</span><br><span class="line">c2.age = <span class="number">18</span></span><br><span class="line">c2.nation = <span class="string">"CHINA"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(c1.nation);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHINA</span><br></pre></td></tr></table></figure>

<p>因为 nation 属性是静态的，所有由该类而生成的对象共享同一个 nation 属性。</p>
<p>静态变量随着类的加载而加载，实例对象是随着对象的创建而加载的。</p>
<p>静态变量存于方法区的静态域中。</p>
<p>修饰静态方法（类方法）：</p>
<p>类中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是一个中国人！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Chinese.show();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我是一个中国人！</span><br></pre></td></tr></table></figure>

<p>因为静态方法与静态变量一样是通过类的加载而加载，因此可以直接通过类名进行调用。</p>
<p>静态方法只能调用静态方法或者属性，非静态方法，既可以调用静态方法和属性，也可以调用非静态的。</p>
<p>静态方法中不能使用 this 和 super。</p>
<hr>
<p><b>单例设计模式</b></p>
<img src='/img/Java入门/36.png'>

<p>饿汉式实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.内部创建类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">new</span> Bank();</span><br><span class="line">    <span class="comment">//3.提供公共方法，返回类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Bank bank1 = Bank.getInstance();</span><br><span class="line">Bank bank2 = Bank.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(bank1 == bank2);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<p>因为在 main 方法中看似创建的两个对象实际上都调用的 Bank 类中创建对象的方法，而该方法创建的对象是唯一的。</p>
<hr>
<p>懒汉式实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.声明当前类对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//3.声明public、static的返回当前类对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Order();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Order order1 = Order.getInstance();</span><br><span class="line">Order order2 = Order.getInstance();</span><br><span class="line"></span><br><span class="line">System.out.println(order1 == order2);</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span><br></pre></td></tr></table></figure>

<p>啥时候用啥时候再创建对象：懒汉式<br>一开始直接创建好对象：饿汉式</p>
<ul>
<li><p>饿汉式</p>
<ul>
<li>好处：线程安全。</li>
<li>坏处：对象加载时间过长。</li>
</ul>
</li>
<li><p>懒汉式</p>
<ul>
<li>好处：延迟对象的创建。</li>
<li>坏处：可能发生线程冲突，线程不安全（暂时）</li>
</ul>
</li>
</ul>
<p>单例设计模式优点：只生成一个实例，减少了系统性能开销。</p>
<p>常见单例设计模式应用：</p>
<img src='/img/Java入门/37.png'>

<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>代码块的作用：初始化类、对象。</p>
<p>代码块只能用 static 进行修饰。</p>
<p>分类：静态代码块、非静态代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String desc = <span class="string">"我是一个人"</span>;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块：</p>
<ul>
<li>能够有输出语句</li>
<li>随着类的加载而执行（只执行一次）</li>
<li>作用：初始化类的信息</li>
<li>若一个类中定义了多个静态代码块，则按照声明顺序执行。</li>
<li>只能调用静态结构</li>
</ul>
<p>非静态代码块：</p>
<ul>
<li>能够有输出语句</li>
<li>随着对象的创建而执行，每创建一个对象就执行一次</li>
<li>作用：在创建时对对象的属性进行初始化</li>
<li>若一个类中定义了多个非静态代码块，则按照声明顺序执行。</li>
<li>可调用静态和非静态结构</li>
</ul>
<p>当 main 方法为空，有输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static block</span><br></pre></td></tr></table></figure>

<p>当 main 方法中有对象创建：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person desc = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">block</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="关键字之-final"><a href="#关键字之-final" class="headerlink" title="关键字之 final"></a>关键字之 final</h2><p>final 可以修饰：类、方法、变量</p>
<p>final 修饰类：不能被继承（如 String 类、System 类等）</p>
<p>final 修饰方法：不能被重写</p>
<p>final 修饰变量：此时称为常量</p>
<ul>
<li>修饰属性：可以考虑的赋值位置有：<ul>
<li>显式初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> width = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
<li>代码块中初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">&#123;</span><br><span class="line">    left = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造器中初始化<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> high;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FinalTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    high = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>修饰局部变量：尤其 final 修饰形参时，形参是常量，调用时为常量形参提供一个实参，随后不可修改。</li>
</ul>
<p>static final 修饰属性：称为全局常量（常量命名一般大写）</p>
<hr>
<h2 id="关键字之-abstract"><a href="#关键字之-abstract" class="headerlink" title="关键字之 abstract"></a>关键字之 abstract</h2><p>abstract 可以修饰：类（抽象类）、方法（抽象方法）</p>
<p>修饰类：</p>
<ul>
<li>此类不可实例化</li>
<li>开发中会提供抽象类的子类，对子类进行实例化</li>
</ul>
<p>修饰方法：</p>
<ul>
<li>只有方法声明，无方法体</li>
<li>若子类重写了所有父类中所有抽象方法后，才能实例化，若有抽象方法没有被重写，则此子类也是抽象类</li>
</ul>
<p>包含抽象方法的类一定是抽象类。</p>
<p>abstract 不能修饰私有方法、静态方法、final 方法、final 类</p>
<p><b>模板方法设计模式</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">spendTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        code();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"花费时间为："</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubTest</span> <span class="keyword">extends</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">code</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"次数："</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过此方法可以在动态需求方法处，定义为抽象方法，方便重写。</p>
<hr>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>通过接口可以实现多重继承的效果</p>
<img src='/img/Java入门/38.png'>

<p>接口使用 interface 进行定义</p>
<p>Java 中接口和类是并列结构</p>
<p>接口中可以定义：全局常量、抽象方法、静态方法、默认方法</p>
<p>在接口中定义全局常量时，可以省略 public static final</p>
<p>在接口中定义抽象方法时，可以省略 public abstract</p>
<p>接口通过类进行实现(implements)</p>
<p>当实现类重写了接口中所有抽象方法，则该实现类才可以进行实例化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SPEED = <span class="number">7900</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SPEED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Attackable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bullet</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Attackable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子弹可以飞，飞行速度最快："</span> + MAX_SPEED + <span class="string">"，最慢："</span> + MIN_SPEED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子弹击中停止"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子弹可以造成伤害"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口之间可以多重继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CC</span> <span class="keyword">extends</span> <span class="title">AA</span>,<span class="title">BB</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口满足多态性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Enter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TypeC</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Enter</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> <span class="keyword">implements</span> <span class="title">USB</span>,<span class="title">TypeC</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"插入"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"移除"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Usedevice</span><span class="params">(USB usb)</span></span>&#123;</span><br><span class="line">        usb.Enter();</span><br><span class="line">        usb.Out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Computer com = <span class="keyword">new</span> Computer();</span><br><span class="line">    Person1 per1=<span class="keyword">new</span> Person1();</span><br><span class="line">    per1.Usedevice(com);    <span class="comment">//USB usb = new Computer();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">插入</span><br><span class="line">移除</span><br></pre></td></tr></table></figure>

<p>创建接口匿名实现类的非匿名对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">USB phone = <span class="keyword">new</span> USB()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">per1.Usedevice(phone);</span><br></pre></td></tr></table></figure>

<p>创建接口匿名实现类的匿名对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">per1.Usedevice(<span class="keyword">new</span> USB()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Enter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>接口中定义的静态方法只能通过接口调用。</p>
<p>当类实现的多个接口中存在同名的默认方法，则需要在类中重写同名的默认方法。</p>
<hr>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>Java 中允许类 A 声明在另一个类 B 中，称 A 为内部类、B 为外部类。</p>
<p>分类：成员内部类（静态、非静态）、局部内部类（方法内、代码块内、构造器内）</p>
<p>成员内部类：</p>
<ul>
<li>作为外部类的成员<ul>
<li>可以调用外部类的结构</li>
<li>可以被 static 修饰</li>
<li>可以被 4 种不同权限修饰</li>
</ul>
</li>
<li>作为类：<ul>
<li>可以定义属性、方法、构造器等</li>
<li>可以被 final 修饰</li>
<li>可以被 abstract 修饰</li>
</ul>
</li>
</ul>
<p>实例化成员内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Study</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">            Person.<span class="keyword">this</span>.eat();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Leg</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"跑步"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化静态成员内部类</span></span><br><span class="line">Person.Head head = <span class="keyword">new</span> Person.Head();</span><br><span class="line">head.Study();</span><br><span class="line"><span class="comment">//实例化非静态成员内部类</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person</span><br><span class="line">Person.Leg leg = p.<span class="keyword">new</span> Leg();</span><br><span class="line">leg.Run();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学习</span><br><span class="line">跑步</span><br></pre></td></tr></table></figure>

<p>成员内部类调用外部类结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name = <span class="string">"John"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Getname</span></span>&#123;</span><br><span class="line">        String name = <span class="string">"Jack"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">            System.out.println(Person.<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main 方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Getname gn = p.<span class="keyword">new</span> Getname();</span><br><span class="line">gn.getName(<span class="string">"Lucy"</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Lucy</span><br><span class="line">Jack</span><br><span class="line">John</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>两种异常：</p>
<ul>
<li><p>Error：Java 虚拟机遇到严重的无法解决的问题，如 JVM 内部错误、资源耗尽等严重情况，一般不编写针对性代码进行处理。</p>
</li>
<li><p>Exception：其他因为编程错误或偶然的外部因素导致的一般性问题，可以使用针对性代码进行处理，如：空指针访问、试图读取不存在的文件、网络连接中断、数组角标越界……</p>
<ul>
<li>受检异常（编译异常）</li>
<li>非受检异常（运行异常）</li>
</ul>
</li>
</ul>
<p>异常处理体系结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.Throwable</span><br><span class="line">    java.lang.Error：一般不编写针对性代码</span><br><span class="line">    java.lang.Exception：可以进行异常处理</span><br></pre></td></tr></table></figure>

<h2 id="异常处理机制：try-catch-finally"><a href="#异常处理机制：try-catch-finally" class="headerlink" title="异常处理机制：try-catch-finally"></a>异常处理机制：try-catch-finally</h2><p>编写代码过程中针对可能出现错误的地方加入检测代码，如检测输入为空、输入的是非法数据等，若只用 if-else 会导致代码十分臃肿，可读性差，因此采用异常处理机制。</p>
<ul>
<li>try-catch-finally：异常自我处理完成</li>
<li>throws + 异常类型：委托更高级代码区进行异常处理</li>
</ul>
<p>异常处理：抓抛模型</p>
<ul>
<li>“抛”：程序运行过程中一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。一旦抛出对象，后续代码不再执行。</li>
<li>“抓”：可以理解为异常的处理方式。</li>
</ul>
<p><b>try-catch-finally 的使用</b></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span>,变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理方式1</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span>,变量名<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//处理方式2</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">3</span>,变量名<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//处理方式3</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">4</span>,变量名<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">//处理方式4</span></span><br><span class="line">&#125;........</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//错误类型转换</span></span><br><span class="line">String str =<span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">&#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"出现数值转换异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出现数制转换异常</span><br></pre></td></tr></table></figure>

<p>同样在 try 区中一旦出现异常，try 区后续代码不执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str =<span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">    System.out.println(<span class="string">"111"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"出现数值转换异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"222"</span>);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">出现数值转换异常</span><br><span class="line">222</span><br></pre></td></tr></table></figure>

<p>catch 中的异常类若存在子父类关系，则子类声明在上，父类在下。</p>
<p>常用异常处理方式：</p>
<ul>
<li>String getMessage()：输出简略异常信息</li>
<li>printStackTrace()：输出详细异常信息</li>
</ul>
<p>如:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str =<span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">&#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">For input string: &quot;abc&quot;</span><br></pre></td></tr></table></figure>

<p>在 try 区声明的变量，在外部无法使用，所以尽量不在 try 区内部进行声明。</p>
<p>finally 中存放的代码在 try 或 catch 中有 return 语句，catch 中又出现异常等情况，仍会执行完 finally 中的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str =<span class="string">"123"</span>;</span><br><span class="line">str = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">&#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"运行了"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: <span class="string">"abc"</span></span><br><span class="line">	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="number">67</span>)</span><br><span class="line">	at java.base/java.lang.Integer.parseInt(Integer.java:<span class="number">660</span>)</span><br><span class="line">	at java.base/java.lang.Integer.parseInt(Integer.java:<span class="number">778</span>)</span><br><span class="line">	at HelloWorld.main(HelloWorld.java:<span class="number">9</span>)</span><br><span class="line">运行了</span><br></pre></td></tr></table></figure>

<p>如数据库连接、输入输出流、Socket等资源，JVM 无法自动回收，需要手动释放资源，此时资源释放就需要放在 finally 当中，因为是无论出现什么情况都必须要执行释放代码。</p>
<p>try-catch-finally 结构可以嵌套。</p>
<p>运行异常一般修改代码本体而不进行 try-catch-finally 处理，编译异常则进行该处理。</p>
<hr>
<h2 id="异常处理机制：throws-异常类型"><a href="#异常处理机制：throws-异常类型" class="headerlink" title="异常处理机制：throws + 异常类型"></a>异常处理机制：throws + 异常类型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method1();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> NumberFormatException, Exception </span>&#123;</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> NumberFormatException, Exception </span>&#123;</span><br><span class="line">        String str =<span class="string">"123"</span>;</span><br><span class="line">        str = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>throws 抛出上下级关系通过调用关系进行联系。</p>
<p>同样程序运行过程中一旦出现异常，就会在异常代码处生成一个对应异常类的对象，并将此对象抛出。一旦抛出对象，后续代码不再执行。</p>
<p>执行方法 a 中，又先后调用其他的方法，这些方法时递进关系的，则建议使用 throws 方法进行处理，而方法 a 可以用 try-catch-finally。</p>
<hr>
<h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><p>异常对象的产生：</p>
<ul>
<li>系统自动生成异常对象</li>
<li>手动生成一个异常对象，并抛出（throw）</li>
</ul>
<p>main 方法内：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">stu.regist(-<span class="number">1001</span>);</span><br><span class="line">System.out.println(stu);</span><br></pre></td></tr></table></figure>

<p>要令上方代码接收到非法数据后提示错误信息并停止后续运行，若按以往方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"输入数据非法！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>得到结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入数据非法！</span><br><span class="line">Student@682a0b20</span><br></pre></td></tr></table></figure>
<p>后续代码仍然运行，则可以用 thorw 手动抛出异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入数据非法！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<img src='/img/Java入门/39.png'>

<p>通常 new 的异常对象有 RuntimeException 和 Exception</p>
<hr>
<h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p>如何自定义异常类：</p>
<ol>
<li>继承于现有的异常结构，如：RuntimeException、Exception</li>
<li>提供全局常量： serialVersionUID</li>
<li>提供重载构造器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5123153212L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript学习</title>
    <url>/2021/02/20/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="JS基础"><a href="#JS基础" class="headerlink" title="JS基础"></a>JS基础</h1><h2 id="JS的组成部分"><a href="#JS的组成部分" class="headerlink" title="JS的组成部分"></a>JS的组成部分</h2><ul>
<li>JavaScript语法</li>
<li>DOM（页面文档对象模型）</li>
<li>BOM（浏览器对象模型）</li>
</ul>
<p>DOM——文档对象模型</p>
<p>DOM是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）</p>
<p>BOM——浏览器对象模型</p>
<p>BOM，它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p>
<hr>
<h2 id="JS的书写方式"><a href="#JS的书写方式" class="headerlink" title="JS的书写方式"></a>JS的书写方式</h2><ul>
<li>行内式 (可读性差，不推荐)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我试试"</span> <span class="attr">onclick</span>=<span class="string">"alert('Hello World')"</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>内嵌式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'Hello World~!'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部JS文件 (推荐，可读强，可复用强)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"my.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JS注释方式"><a href="#JS注释方式" class="headerlink" title="JS注释方式"></a>JS注释方式</h2><ul>
<li>单行注释</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 我是一行注释</span><br></pre></td></tr></table></figure>

<ul>
<li>多行注释</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  我是多行</span><br><span class="line">  的注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="JS的输入输出"><a href="#JS的输入输出" class="headerlink" title="JS的输入输出"></a>JS的输入输出</h2><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>归属</th>
</tr>
</thead>
<tbody><tr>
<td>alert(msg)</td>
<td>浏览器弹出警示框</td>
<td>浏览器</td>
</tr>
<tr>
<td>console.log(msg)</td>
<td>浏览器控制台打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>document.write(msg)</td>
<td>浏览器页面打印输出信息</td>
<td>浏览器</td>
</tr>
<tr>
<td>prompt(info)</td>
<td>浏览器弹出输入框，用户可以输入</td>
<td>浏览器</td>
</tr>
</tbody></table>
<p>alert( )和document.write( )主要将信息展示给用户</p>
<p>console.log( )主要将信息展示给程序员</p>
<hr>
<h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><ul>
<li>变量的声明</li>
<li>变量的赋值</li>
</ul>
<p>声明变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age; <span class="comment">//  声明一个 名称为age 的变量</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>var 是一个 JS关键字，用来声明变量( variable 变量的意思 )。使用该关键字声明变量后，计算机会自动为变量分配内存空间，不需要程序员管</p>
</li>
<li><p>age 是程序员定义的变量名，我们要通过变量名来访问内存中分配的空间</p>
</li>
</ul>
<p>赋值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">age = <span class="number">10</span>; <span class="comment">// 给 age  这个变量赋值为 10</span></span><br></pre></td></tr></table></figure>

<p>更新变量：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line">  </span><br><span class="line">age = <span class="number">81</span>;   <span class="comment">// 最后的结果就是81因为18 被覆盖掉了</span></span><br></pre></td></tr></table></figure>

<p>声明多个变量：</p>
<p>同时声明多个变量时，只需要写一个 var， 多个变量名之间使用英文逗号隔开。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>,  name = <span class="string">'zs'</span>, sex = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>声明变量特殊情况</p>
<table>
<thead>
<tr>
<th>情况</th>
<th>说明</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>var  age ; console.log (age);</td>
<td>只声明 不赋值</td>
<td>undefined</td>
</tr>
<tr>
<td>console.log(age)</td>
<td>不声明 不赋值  直接使用</td>
<td>报错</td>
</tr>
<tr>
<td>age   = 10; console.log (age);</td>
<td>不声明   只赋值</td>
<td>10</td>
</tr>
</tbody></table>
<hr>
<h2 id="JS的数据类型"><a href="#JS的数据类型" class="headerlink" title="JS的数据类型"></a>JS的数据类型</h2><p>JS是一种弱类型的动态语言，不用提前声明变量的类型，会在运行过程中自动确定</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">10</span>; <span class="comment">// 这是⼀个数字型</span></span><br><span class="line"><span class="keyword">var</span> areYouOk = <span class="string">'是的'</span>; <span class="comment">// 这是⼀个字符串</span></span><br></pre></td></tr></table></figure>

<p>JS 把数据类型分为两类：</p>
<ul>
<li>简单数据类型 （Number,String,Boolean,Undefined,Null）</li>
<li>复杂数据类型 （object)</li>
</ul>
<table>
<thead>
<tr>
<th>简单数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>Number</td>
<td>数字型，包括浮点—4，0.24</td>
<td>0</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔型，true，false</td>
<td>false</td>
</tr>
<tr>
<td>String</td>
<td>字符串类型</td>
<td>“”</td>
</tr>
<tr>
<td>Undefined</td>
<td>未赋值</td>
<td>undefined</td>
</tr>
<tr>
<td>Null</td>
<td>变量为空值</td>
<td>null</td>
</tr>
</tbody></table>
<ul>
<li>数字型</li>
</ul>
<p>数字型三个特殊值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="literal">Infinity</span>); <span class="comment">// Infinity</span></span><br><span class="line">alert(-<span class="literal">Infinity</span>); <span class="comment">// -Infinity</span></span><br><span class="line">alert(<span class="literal">NaN</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>
<p>Infinity ，代表⽆穷⼤，⼤于任何数值<br>-Infinity ，代表⽆穷⼩，⼩于任何数值<br>NaN ，Not a number，代表⼀个非数值</p>
<p>isNaN</p>
<p>⽤来判断⼀个变量是否为非数字的类型，返回 true 或者 false</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> usrAge = <span class="number">21</span>;</span><br><span class="line"><span class="keyword">var</span> isOk = <span class="built_in">isNaN</span>(userAge);</span><br><span class="line"><span class="built_in">console</span>.log(isNum); <span class="comment">// false ，21 不是⼀个非数字</span></span><br><span class="line"><span class="keyword">var</span> usrName = <span class="string">"andy"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(userName)); <span class="comment">// true ，"andy"是⼀个非数字</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串型</li>
</ul>
<p>字符串型可以是引号中的任意文本，其语法为 双引号 “” 和 单引号’’</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">"我爱北京天安⻔~"</span>; <span class="comment">// 使⽤双引号表⽰字符串</span></span><br><span class="line"><span class="keyword">var</span> strMsg2 = <span class="string">'我爱吃猪蹄~'</span>; <span class="comment">// 使⽤单引号表⽰字符串</span></span><br><span class="line"><span class="comment">// 常⻅错误</span></span><br><span class="line"><span class="keyword">var</span> strMsg3 = 我爱⼤肘⼦; <span class="comment">// 报错，没使⽤引号，会被认为是js代码，但js没有这</span></span><br><span class="line">些语法</span><br></pre></td></tr></table></figure>

<p>JS推荐使用单引号</p>
<p>字符串中的转义符：</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\n</td>
<td>换行</td>
</tr>
<tr>
<td>\\</td>
<td>斜杠\</td>
</tr>
<tr>
<td>‘</td>
<td>单引号</td>
</tr>
<tr>
<td>“</td>
<td>双引号</td>
</tr>
<tr>
<td>\t</td>
<td>tab 缩进</td>
</tr>
<tr>
<td>\b</td>
<td>空格</td>
</tr>
</tbody></table>
<p>字符串长度可用length获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strMsg = <span class="string">"我是帅⽓多⾦的程序猿！"</span>;</span><br><span class="line">alert(strMsg.length); <span class="comment">// 显⽰ 11</span></span><br></pre></td></tr></table></figure>

<p>字符串拼接可以使⽤ + 进⾏拼接，其拼接⽅式为 字符串 + 任何类型 = 拼接之后的新字<br>符串</p>
<p>拼接前会把与字符串相加的任何类型转成字符串，再拼接成⼀个新的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.1 字符串 "相加"</span></span><br><span class="line">alert(<span class="string">'hello'</span> + <span class="string">' '</span> + <span class="string">'world'</span>); <span class="comment">// hello world</span></span><br><span class="line"><span class="comment">//1.2 数值字符串 "相加"</span></span><br><span class="line">alert(<span class="string">'100'</span> + <span class="string">'100'</span>); <span class="comment">// 100100</span></span><br><span class="line"><span class="comment">//1.3 数值字符串 + 数值</span></span><br><span class="line">alert(<span class="string">'11'</span> + <span class="number">12</span>); <span class="comment">// 1112</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布尔型</li>
</ul>
<p>布尔型与数字相加true 的值为 1，false 的值为 0。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> + <span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取变量类型</li>
</ul>
<p>typeof可以获取变量的数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">18</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num) <span class="comment">// 结果 number</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>使⽤表单、prompt 获取过来的数据默认是字符串类型的，此时就不能直接简单的进⾏加法运算，⽽需要转换变量的数据类型</p>
<ul>
<li><p>三种转换：</p>
<ul>
<li>转换为字符串类型</li>
<li>转换为数字型</li>
<li>转换为布尔型</li>
</ul>
</li>
<li><p>转化为字符串</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>方式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>toString()</td>
<td>var num=1; alert(num.toString());</td>
</tr>
<tr>
<td>String() 强制转换</td>
<td>var num=1; alert(String(num));</td>
</tr>
<tr>
<td>加号拼接</td>
<td>var num=1; alert(num+’字符串’);</td>
</tr>
</tbody></table>
<ul>
<li>转化为数字型</li>
</ul>
<table>
<thead>
<tr>
<th>方式</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>parseInt(string)</td>
<td>parseInt(‘16’)</td>
</tr>
<tr>
<td>parseFloat(string)</td>
<td>parseFloat(‘27.87’)</td>
</tr>
<tr>
<td>Number()强制转换</td>
<td>Number(‘12’)</td>
</tr>
<tr>
<td>算术运算隐式转换</td>
<td>‘12’ - 0</td>
</tr>
</tbody></table>
<p>P.S. 两个浮点型不能直接判断相等</p>
<ul>
<li>转换为布尔型<ul>
<li>代表空、否定的值都被转换为false</li>
<li>其余值为true</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">''</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">'⼩⽩'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建数组两种方式：</p>
<ul>
<li>new</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(); <span class="comment">// 创建一个新的空数组</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字面量创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = []；</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名 = [<span class="string">'小白'</span>,<span class="string">'小黑'</span>,<span class="string">'大黄'</span>,<span class="string">'瑞奇'</span>];</span><br></pre></td></tr></table></figure>

<p>数组可以存放任意数据类型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="string">'小白'</span>,<span class="number">12</span>,<span class="literal">true</span>,<span class="number">28.9</span>];</span><br></pre></td></tr></table></figure>

<p>数组长度也可以通过length获取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">alert(arrStus.length); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<p>P.S. length可以被修改</p>
<p>如果设置的length属性值大于数组的元素个数，则会在数组末尾出现空白元素</p>
<p>如果设置的length属性值小于数组的元素个数，则会把超过该值的数组元素删除</p>
<p>数组可以通过以下方式尾插入新元素：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arrStus = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arrStus[arrStus.length] = <span class="number">4</span>; <span class="comment">// arrStus = [1,2,3,4]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li>声明函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>调用函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">函数名(); <span class="comment">// 通过调用函数名来执行函数体代码</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数封装</li>
</ul>
<p>将一个或多个功能通过函数方式封装起来</p>
<p>例：封装计算1-100累加和</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> sumNum = <span class="number">0</span>;<span class="comment">// 准备一个变量，保存数字和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">sumNum += i;<span class="comment">// 把每个数值 都累加 到变量中</span></span><br><span class="line">&#125;</span><br><span class="line">alert(sumNum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line">getSum();</span><br></pre></td></tr></table></figure>

<ul>
<li>arguments的使用</li>
</ul>
<p>arguments是存储了传递过程中所有实参的伪数组，可以通过它来获取实参</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">if</span>( <span class="built_in">arguments</span>.length == <span class="number">2</span> )&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">'传入参数不合法'</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( add(<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log( add(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) ); <span class="comment">// 传入参数不合法</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>函数两种声明方式</p>
<ul>
<li><p>命名函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li>
<li><p>匿名函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明定义方式</span></span><br><span class="line"><span class="comment">// 这是函数表达式写法，匿名函数后面跟分号结束</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;；</span><br><span class="line"><span class="comment">// 调用的方式，函数调用必须写到函数体下面</span></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<hr>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>创建对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名&#123;</span><br><span class="line">  键 : 键值，</span><br><span class="line">  ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>字面量创建</p>
<ul>
<li>对象的创建</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = &#123;</span><br><span class="line">  name : <span class="string">'pink'</span>,</span><br><span class="line">  age : <span class="number">18</span>,</span><br><span class="line">  sex : <span class="string">'男'</span>,</span><br><span class="line">  sayHi : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'大家好啊~'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>访问对象的属性</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(star.name); <span class="comment">// 调用名字属性</span></span><br><span class="line"><span class="built_in">console</span>.log(star[<span class="string">'name'</span>]); <span class="comment">// 调用名字属性</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用对象的方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">star.sayHi(); <span class="comment">// 调用 sayHi 方法</span></span><br></pre></td></tr></table></figure></li>
<li><p>利用 new Object 创建对象</p>
<ul>
<li><p>创建空对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> andy = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure>
</li>
<li><p>给空对象添加属性和方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">andy.name = <span class="string">'pink'</span>;</span><br><span class="line">andy.age = <span class="number">18</span>;</span><br><span class="line">andy.sex = <span class="string">'男'</span>;</span><br><span class="line">andy.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'大家好啊~'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>利用构造函数创建对象</p>
<ul>
<li><p>构造函数封装格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 构造函数名(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,形参<span class="number">3</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.属性名<span class="number">1</span> = 参数<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.属性名<span class="number">2</span> = 参数<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">this</span>.属性名<span class="number">3</span> = 参数<span class="number">3</span>;</span><br><span class="line">  <span class="keyword">this</span>.方法名 = 函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造函数调用格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> 构造函数名(实参<span class="number">1</span>，实参<span class="number">2</span>，实参<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>遍历对象</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(k); <span class="comment">// 这里的 k 是属性名</span></span><br><span class="line"><span class="built_in">console</span>.log(obj[k]); <span class="comment">// 这里的 obj[k] 是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="内置对象、方法"><a href="#内置对象、方法" class="headerlink" title="内置对象、方法"></a>内置对象、方法</h2><p>常用内置对象：Math、 Date 、Array、String等</p>
<ul>
<li>添加删除数组元素的方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>push(参数1,…)</td>
<td>末尾添加一个或多个元素</td>
<td>返回新长度</td>
</tr>
<tr>
<td>pop()</td>
<td>删除数组最后一个元素，数组长度减 1</td>
<td>返回被删除的元素值</td>
</tr>
<tr>
<td>unshift(参数1,…)</td>
<td>向数组开头添加一个或多个元素</td>
<td>返回新长度</td>
</tr>
<tr>
<td>shift()</td>
<td>删除数组第一个元素，数组长度减 1</td>
<td>返回第一个元素的值</td>
</tr>
</tbody></table>
<ul>
<li><p>数组排序</p>
<ul>
<li><p>reverse()：颠倒数组中元素的顺序</p>
</li>
<li><p>sort()：对元素进行排序</p>
<p>默认为元素值首字符于字符表中顺序进行升序排序</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">6</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"10"</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"5"</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">"40"</span></span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"25"</span></span><br><span class="line">arr[<span class="number">4</span>] = <span class="string">"1000"</span></span><br><span class="line">arr[<span class="number">5</span>] = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(arr + <span class="string">"&lt;br /&gt;"</span>)</span><br><span class="line"><span class="built_in">document</span>.write(arr.sort(sortNumber))</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * 结果</span></span><br><span class="line"><span class="comment"> * 10,5,40,25,1000,1</span></span><br><span class="line"><span class="comment"> * 1,5,10,25,40,1000</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>返回 a-b 为升序，返回 b-a 为降序</p>
</li>
</ul>
</li>
<li><p>数组转换为字符串</p>
</li>
</ul>
<p>可用toString()，也可用join(‘分隔符’)</p>
<ul>
<li><p>其他数组对象方法</p>
<ul>
<li>concat(arr1,arr2,…)：连接两个或多个数组，返回一个新数组</li>
<li>slice(begin,end)：截取数组自下标begin开始，到下标end结束的元素并返回一个新数组</li>
<li>splice(begin,num)：删除数组自下标begin开始的num个元素，并返回新数组，该操作会影响原数组</li>
</ul>
</li>
<li><p>字符串对象方法</p>
<ul>
<li>concat(str1,str2,…)：连接两个或多个字符串，等效于 +</li>
<li>substr(start,length)：从start索引开始，取length个字符</li>
<li>slice(start,end)：从start索引开始截取到end索引位置的字符</li>
<li>substring(start,end)：基本与slice相同，但取不到负值</li>
<li>str.replace(被替换的字符串，要替换为的字符串)：将字符串中某些字符转变为另外的字符</li>
<li>str.split(‘分隔符’)：将字符串每到分隔符处进行分割后返回新的数组</li>
</ul>
</li>
</ul>
<hr>
<h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><p>API（Application Programming Interface，应⽤程序编程接⼝）是⼀些预先定义的函数，⽬的是提供应⽤程序与开发⼈员基于某软件或硬件得以访问⼀组例程的能⼒，⽽⼜⽆需访问源码。</p>
<p>Web API 是浏览器提供的⼀套操作浏览器功能和⻚⾯元素的 API ( BOM 和 DOM )。</p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>文档对象模型（Document Object Model，简称DOM），是 W3C 组织推荐的处理可扩展标记语⾔（html或者xhtml）的标准编程接⼝。</p>
<p>W3C 已经定义了⼀系列的 DOM 接⼝，通过这些 DOM 接⼝可以改变⽹⻚的内容、结构和样式。</p>
<img src='/img/web/JS/4.png'>

<p>DOM树 ⼜称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的⻚⾯。</p>
<ul>
<li>文档：⼀个⻚⾯就是⼀个文档，DOM中使⽤document表⽰</li>
<li>节点：⽹⻚中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使⽤node表⽰</li>
<li>标签节点：⽹⻚中的所有标签，通常称为元素节点，⼜简称为“元素”，使⽤element表⽰</li>
</ul>
<hr>
<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul>
<li>根据 ID 获取</li>
</ul>
<p>语法：document.getElementById(id)</p>
<p>作⽤：根据ID获取元素对象</p>
<p>参数：id值，区分⼤⼩写的字符串</p>
<p>返回值：元素对象 或 null</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"time"</span>&gt;</span>2019-9-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 因为我们文档⻚⾯从上往下加载，所以先得有标签 所以我们script写到标签的下⾯</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> timer = <span class="built_in">document</span>.getElementById(<span class="string">'time'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(timer);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">typeof</span> timer);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.dir 打印我们返回的元素对象 更好的查看⾥⾯的属性和⽅法</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.dir(timer);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>根据标签名获取</li>
</ul>
<p>语法：document.getElementsByTagName(‘标签名’) 或者 element.getElementsByTagName(‘标签名’)</p>
<p>作⽤：根据标签名获取元素对象</p>
<p>参数：标签名</p>
<p>返回值：元素对象集合（伪数组，数组元素是元素对象）</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久22<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久33<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久44<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，应是等你好久55<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⽣僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⽣僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⽣僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⽣僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⽣僻字<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1.返回的是 获取过来元素对象的集合 以伪数组的形式存储的</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> lis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(lis);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(lis[<span class="number">0</span>]);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 我们想要依次打印⾥⾯的元素对象我们可以采取遍历的⽅式</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(lis[i]);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. element.getElementsByTagName() 可以得到这个元素⾥⾯的某些标签</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> nav = <span class="built_in">document</span>.getElementById(<span class="string">'nav'</span>); <span class="comment">// 这个获得nav 元素</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> navLis = nav.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(navLis);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>H5新增元素获取方式</li>
</ul>
<ol>
<li>document.getElementsByClassName(‘类名’); //根据类名返回元素对象集合</li>
<li>document.querySelector(‘选择器’); //根据指定选择器返回查询到的第一个元素对象</li>
<li>document.querySelectorAll(‘选择器’); //根据指定选择器返回元素对象集合</li>
</ol>
<p>选择器：通过id选择，或类名选择等获取指定元素，使用选择器获取元素时要加符号如获取box类( .box )，获取ID为home( #home )。</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>盒⼦1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>盒⼦2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>⾸⻚<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. getElementsByClassName 根据类名获得某些元素集合</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> boxs = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'box'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(boxs);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. querySelector 返回指定选择器的第⼀个元素对象 切记 ⾥⾯的选择器需要加符号.box #nav</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> firstBox = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(firstBox);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> nav = <span class="built_in">document</span>.querySelector(<span class="string">'#nav'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(nav);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> li = <span class="built_in">document</span>.querySelector(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(li);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. querySelectorAll()返回指定选择器的所有元素对象集合</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> allBox = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(allBox);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(lis);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>获取特殊元素</li>
</ul>
<ol>
<li>获取body元素：document.body // 返回body元素对象</li>
<li>获取html元素：document.html // 返回html元素对象</li>
</ol>
<hr>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件三要素：</p>
<ol>
<li>事件源（谁）：触发事件的元素</li>
<li>事件类型（什么事件）： 例如 click 点击事件</li>
<li>事件处理程序（做啥）：事件触发后要执⾏的代码(函数形式)，事件处理函数</li>
</ol>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>唐伯虎<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  <span class="comment">&lt;!-- 事件源  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *点击⼀个按钮，弹出对话框</span><br><span class="line"> *1. 事件是有三部分组成 事件源 事件类型 事件处理程序 我们也称为事件三要素</span><br><span class="line"> *(1) 事件源 事件被触发的对象 谁 按钮</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);  <span class="comment">// 获取事件源</span></span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> *(2) 事件类型 如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按*下</span><br><span class="line"> *(3) 事件处理程序 通过⼀个函数赋值的⽅式 完成</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="actionscript"> btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123; <span class="comment">// click事件类型</span></span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'点秋香'</span>); <span class="comment">// 事件处理程序</span></span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>执行事件步骤</li>
</ul>
<ol>
<li>获取事件源</li>
<li>注册事件</li>
<li>添加事件处理程序</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 执⾏事件步骤</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取事件源</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2.绑定事件 注册事件</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// div.onclick </span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 3.添加事件处理程序</span></span></span><br><span class="line"><span class="actionscript"> div.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'我被选中了'</span>);</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>常用鼠标事件</li>
</ul>
<table>
<thead>
<tr>
<th>鼠标事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onclick</td>
<td>鼠标点击左键触发</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过触发</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标离开触发</td>
</tr>
<tr>
<td>onfocus</td>
<td>获取鼠标焦点触发</td>
</tr>
<tr>
<td>onblur</td>
<td>失去鼠标焦点触发</td>
</tr>
<tr>
<td>onmousemove</td>
<td>鼠标移动触发</td>
</tr>
<tr>
<td>onmouseup</td>
<td>鼠标弹起触发</td>
</tr>
<tr>
<td>onmousedown</td>
<td>鼠标按下触发</td>
</tr>
</tbody></table>
<hr>
<h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul>
<li>改变元素内容</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.innerText <span class="comment">// 从起始到终止位置的内容，去除html标签，空格和换行也会去掉</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">element.innerHTML <span class="comment">// 从起始到终止位置的内容，包括html标签，保留空格和换行</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>显⽰当前系统时间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>某个时间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span>1123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 当我们点击了按钮， div⾥⾯的文字会发⽣变化</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2.注册事件</span></span></span><br><span class="line"><span class="actionscript"> btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// div.innerText = '2020-6-6';</span></span></span><br><span class="line"> div.innerHTML = getDate();</span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> year = date.getFullYear();</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> month = date.getMonth() + <span class="number">1</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> dates = date.getDate();</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> arr = [<span class="string">'星期⽇'</span>, <span class="string">'星期⼀'</span>, <span class="string">'星期⼆'</span>, <span class="string">'星期三'</span>, <span class="string">'星期四'</span>, <span class="string">'星期五'</span>,</span></span><br><span class="line"><span class="actionscript"><span class="string">'星期六'</span>];</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> day = date.getDay();</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">return</span> <span class="string">'今天是：'</span> + year + <span class="string">'年'</span> + month + <span class="string">'⽉'</span> + dates + <span class="string">'⽇ '</span> +</span></span><br><span class="line">arr[day];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>innerText和innerHTML的区别：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"> 我是文字</span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// innerText 和 innerHTML的区别</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. innerText 不识别html标签 非标准 去除空格和换⾏</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line">day01_WebAPIs.md 8/20/2021</span><br><span class="line">9 / 16</span><br><span class="line"><span class="handlebars"><span class="xml"> // div.innerText = '<span class="tag">&lt;<span class="name">strong</span>&gt;</span>今天是：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 2019';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换⾏的</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"> div.innerHTML = '<span class="tag">&lt;<span class="name">strong</span>&gt;</span>今天是：<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 2019';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 这两个属性是可读写的 可以获取元素⾥⾯的内容</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> p = <span class="built_in">document</span>.querySelector(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(p.innerText);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(p.innerHTML);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src='/img/web/JS/5.png'>

<p>第一行是innerText在控制台输出的内容，无html，而且删除了换行</p>
<p>后面是innerHTML在控制台输出的内容，有html标签，而且保留了换行</p>
<p>获取属性的值：元素对象.属性名</p>
<p>设置属性的值：元素对象.属性名 = 值</p>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"ldh"</span>&gt;</span>刘德华<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"zxy"</span>&gt;</span>张学友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/ldh.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">"刘德华"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 修改元素属性 src</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ldh = <span class="built_in">document</span>.getElementById(<span class="string">'ldh'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> zxy = <span class="built_in">document</span>.getElementById(<span class="string">'zxy'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="actionscript"> zxy.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> img.src = <span class="string">'images/zxy.jpg'</span>;</span></span><br><span class="line"><span class="actionscript"> img.title = <span class="string">'张学友思密达'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> ldh.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> img.src = <span class="string">'images/ldh.jpg'</span>;</span></span><br><span class="line"><span class="actionscript"> img.title = <span class="string">'刘德华'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>样式属性修改</li>
</ul>
<ol>
<li>element.style：修改行内样式（元素对象.style.样式属性 = 值）</li>
<li>element.className：修改类名样式</li>
</ol>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 注册事件 处理程序</span></span></span><br><span class="line"><span class="actionscript"> div.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// div.style⾥⾯的属性 采取驼峰命名法</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.style.backgroundColor = <span class="string">'purple'</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.style.width = <span class="string">'250px'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 使⽤ element.style 获得修改元素样式 如果样式比较少 或者 功能简单的情况下</span></span></span><br><span class="line">使⽤</span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> test = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> test.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.style.backgroundColor = 'purple';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.style.color = '#fff';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.style.fontSize = '25px';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.style.marginTop = '100px';</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 我们可以通过 修改元素的className更改元素的样式 适合于样式较多或者功能</span></span></span><br><span class="line">复杂的情况</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 如果想要保留原先的类名，我们可以这么做 多类名选择器</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.className = 'change';</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.className = <span class="string">'first change'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="排他操作"><a href="#排他操作" class="headerlink" title="排他操作"></a>排他操作</h2><ol>
<li>所有元素全部清除样式</li>
<li>给当前元素设置样式</li>
<li>注意顺序不能颠倒</li>
</ol>
<p>例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取所有按钮元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// btns得到的是伪数组 ⾥⾯的每⼀个元素 btns[i]</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> btns[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// (1) 我们先把所有的按钮背景颜⾊去掉</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; btns.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> btns[i].style.backgroundColor = <span class="string">''</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// (2) 然后才让当前的元素背景颜⾊为pink</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.style.backgroundColor = <span class="string">'pink'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（背景更换）</p>
<img src='/img/web/JS/6.png'>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"baidu"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/1.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/2.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/3.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/4.jpg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> imgs = <span class="built_in">document</span>.querySelector(<span class="string">'.baidu'</span>).querySelectorAll(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.log(imgs);</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 循环注册事件</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> imgs[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this.src 就是我们点击图片的路径 images/2.jpg</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.log(this.src);</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 把这个路径 this.src 给body 就可以了</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.body.style.backgroundImage = <span class="string">'url('</span> + <span class="keyword">this</span>.src + <span class="string">')'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><ul>
<li>获取属性值</li>
</ul>
<p>element.属性 // 获取内置属性值<br>element.getAttribute(‘属性’) // 获取自定义属性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span> <span class="attr">data-index</span>=<span class="string">"1"</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素的属性值</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// (1) element.属性</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.id);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">//(2) element.getAttribute('属性') get得到获取 attribute 属性的意思，获取⾃定义属性 index</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.getAttribute(<span class="string">'id'</span>));</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.getAttribute(<span class="string">'index'</span>));</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置属性值</li>
</ul>
<p>element.属性 = ‘值’ // 设置内置属性值</p>
<p>element.setAttribute(‘属性’,’值’) // 设置自定义属性值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// (1) element.属性= '值'</span></span><br><span class="line">div.id = <span class="string">'test'</span>;</span><br><span class="line">div.className = <span class="string">'navs'</span>;</span><br><span class="line"><span class="comment">// (2) element.setAttribute('属性', '值'); 主要针对于⾃定义属性</span></span><br><span class="line">div.setAttribute(<span class="string">'index'</span>, <span class="number">2</span>);</span><br><span class="line">div.setAttribute(<span class="string">'class'</span>, <span class="string">'footer'</span>); <span class="comment">// class 特殊 这⾥⾯写的就是</span></span><br></pre></td></tr></table></figure>

<ul>
<li>移除属性</li>
</ul>
<p>element.removeAttribute(‘属性’)</p>
<p>例：（京东商品选项卡）</p>
<p>鼠标点击相应选项卡，选项卡样式改变，下方内容对应改变</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> tab_list = <span class="built_in">document</span>.querySelector(<span class="string">'.tab_list'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> lis = tab_list.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> items = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.item'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// for循环，给选项卡绑定点击事件</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 开始给5个⼩li 设置索引号</span></span></span><br><span class="line"><span class="actionscript"> lis[i].setAttribute(<span class="string">'index'</span>, i);</span></span><br><span class="line"><span class="actionscript"> lis[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 上的模块选项卡，当前这⼀个底⾊会是红⾊，其余不变（排他思想）</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 其余的li清除 class 这个类</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> lis[i].className = <span class="string">''</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 留下被选择的</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.className = <span class="string">'current'</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 下⾯的显⽰内容模块</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 让其余的item 这些div 隐藏</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> items[i].style.display = <span class="string">'none'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 让对应的item 显⽰出来</span></span></span><br><span class="line"><span class="actionscript"> items[index].style.display = <span class="string">'block'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>⽹⻚中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使⽤ node 来表⽰。</p>
<p>HTML DOM 树中的所有节点均可通过 JavaScript 进⾏访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p>
<p>⼀般地，节点⾄少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性。</p>
<ol>
<li>元素节点：nodeType 为 1</li>
<li>属性节点：nodeType 为 2</li>
<li>文本节点：nodeType 为 3</li>
</ol>
<ul>
<li>节点层级</li>
</ul>
<p>利⽤ DOM 树可以把节点划分为不同的层级关系，常⻅的是⽗⼦兄层级关系。</p>
<ol>
<li>父级节点：node.parentNode</li>
</ol>
<p>该属性可以返回某节点的最近的一个父级节点</p>
<p>若无父节点则返回null</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"erweima"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. ⽗节点 parentNode</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> erweima = <span class="built_in">document</span>.querySelector(<span class="string">'.erweima'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 得到的是离元素最近的⽗级节点如果找不到⽗节点就返回为 null</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(erweima.parentNode);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<img src='/img/web/JS/8.png'>

<ol start="2">
<li>子节点</li>
</ol>
<p>parentNode.childNodes（返回所有子节点的集合）</p>
<p>parentNode.children（返回子元素节点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// DOM 提供的⽅法（API）获取</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> lis = ul.querySelectorAll(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. ⼦节点 childNodes 所有的⼦节点 包含 元素节点 文本节点等等</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ul.childNodes);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ul.childNodes[<span class="number">0</span>].nodeType);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ul.childNodes[<span class="number">1</span>].nodeType);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. children 获取所有的⼦元素节点 也是我们实际开发常⽤的</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ul.children);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>parentNode.firstChild（返回第一个子节点）</p>
<p>parentNode.lastChild（返回最后一个子节点）</p>
<p>parentNode.firstElementChild（返回第一个子元素节点）</p>
<p>parentNode.lastElementChild（返回最后一个子元素节点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是li5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ol = <span class="built_in">document</span>.querySelector(<span class="string">'ol'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. firstChild 第⼀个⼦节点 不管是文本节点还是元素节点</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.firstChild);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.lastChild);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. firstElementChild 返回第⼀个⼦元素节点 ie9才⽀持</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.firstElementChild);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.lastElementChild);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 实际开发的写法 既没有兼容性问题⼜返回第⼀个⼦元素</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.children[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(ol.children[ol.children.length - <span class="number">1</span>]);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>兄弟节点</li>
</ul>
<p>node.nextSibling（返回当前元素的下一个兄弟节点）</p>
<p>node.previousSibling（返回当前元素上一个兄弟节点）</p>
<p>node.nextElementSibling（返回当前元素的下一个兄弟元素节点）</p>
<p>node.previousElementSibling（返回当前元素的上一个兄弟元素节点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1.nextSibling 下⼀个兄弟节点 包含元素节点或者 文本节点等等</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.nextSibling);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.previousSibling);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. nextElementSibling 得到下⼀个兄弟元素节点</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.nextElementSibling);</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(div.previousElementSibling);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取方式大多是都存在兼容问题，解决兼容问题可以自己封装一个兼容性函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNextElementSibling</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> el = element;</span><br><span class="line"> <span class="keyword">while</span> (el = el.nextSibling) &#123;</span><br><span class="line"> <span class="keyword">if</span> (el.nodeType === <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> el;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建节点</li>
</ul>
<p>document.createElement(‘tagName’)：（创建由tagName指定的html元素）</p>
<ul>
<li>添加节点</li>
</ul>
<p>node.appendChild(child)：（将一个节点添加到指定父节点的子节点列表末尾）</p>
<p>node.insertBefore(child, 指定元素)：（将一个节点添加到父节点的一个指定子节点的前面）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>123<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 创建节点元素节点</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 添加节点 node.appendChild(child) node ⽗级 child 是⼦级 后⾯追加元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"> ul.appendChild(li);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> lili = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"> ul.insertBefore(lili, ul.children[0]);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 4. 我们想要⻚⾯添加⼀个新的元素 ： 1. 创建元素 2. 添加元素</span></span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（发布留言）</p>
<img src='/img/web/JS/9.png'>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'textarea'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="actionscript"> btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">if</span> (text.value == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'您没有输入内容'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"> li.innerHTML = text.value;</span><br><span class="line"><span class="actionscript"> <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"> ul.insertBefore(li, ul.children[0]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除节点</li>
</ul>
<p>node.removeChild(child)：（删除指定子节点，并返回被删除的子节点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊⼤<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>熊⼆<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 删除元素 node.removeChild(child)</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// ul.removeChild(ul.children[0]);</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 点击按钮依次删除⾥⾯的孩⼦</span></span></span><br><span class="line"><span class="actionscript"> btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"> if (ul.children.length == 0) &#123;</span><br><span class="line"><span class="actionscript"> <span class="keyword">this</span>.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"> ul.removeChild(ul.children[0]);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（删除留言）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发布<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'textarea'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 注册事件</span></span></span><br><span class="line"><span class="actionscript"> btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">if</span> (text.value == <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'您没有输入内容'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.log(text.value);</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// (1) 创建元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 先有li 才能赋值</span></span></span><br><span class="line"><span class="handlebars"><span class="xml"> li.innerHTML = text.value + "<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'javascript:;'</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>";</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// (2) 添加元素</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// ul.appendChild(li);</span></span></span><br><span class="line"> ul.insertBefore(li, ul.children[0]);</span><br><span class="line"><span class="actionscript"> <span class="comment">// (3) 删除元素 删除的是当前链接的li 它的⽗亲</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> <span class="keyword">as</span> = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">as</span>[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 删除的是 li 当前a所在的li this.parentNode;</span></span></span><br><span class="line"><span class="actionscript"> ul.removeChild(<span class="keyword">this</span>.parentNode);</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>克隆节点</li>
</ul>
<p>node.cloneNode()：返回该方法节点的一个副本</p>
<p>括号内参数为空或者false则只复制该节点本身</p>
<p>若括号内参数为true，则复制该节点包含该节点的所有子节点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>1111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. node.cloneNode(); 括号为空或者⾥⾯是false 浅拷⻉ 只复制标签不复制⾥⾯的</span></span></span><br><span class="line">内容</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. node.cloneNode(true); 括号为true 深拷⻉ 复制标签复制⾥⾯的内容</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> lili = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span></span><br><span class="line"> ul.appendChild(lili);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（动态生成表格）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1.先去准备好学⽣的数据</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> datas = [&#123;</span></span><br><span class="line"><span class="actionscript"> name: <span class="string">'魏璎珞'</span>,</span></span><br><span class="line"><span class="actionscript"> subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"> score: 100</span><br><span class="line"> &#125;, &#123;</span><br><span class="line"><span class="actionscript"> name: <span class="string">'弘历'</span>,</span></span><br><span class="line"><span class="actionscript"> subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"> score: 98</span><br><span class="line"> &#125;, &#123;</span><br><span class="line"><span class="actionscript"> name: <span class="string">'傅恒'</span>,</span></span><br><span class="line"><span class="actionscript"> subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"> score: 99</span><br><span class="line"> &#125;, &#123;</span><br><span class="line"><span class="actionscript"> name: <span class="string">'明⽟'</span>,</span></span><br><span class="line"><span class="actionscript"> subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"> score: 88</span><br><span class="line"> &#125;, &#123;</span><br><span class="line"><span class="actionscript"> name: <span class="string">'⼤猪蹄⼦'</span>,</span></span><br><span class="line"><span class="actionscript"> subject: <span class="string">'JavaScript'</span>,</span></span><br><span class="line"> score: 0</span><br><span class="line"> &#125;];</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 往tbody ⾥⾯创建⾏： 有⼏个⼈（通过数组的⻓度）我们就创建⼏⾏</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> tbody = <span class="built_in">document</span>.querySelector(<span class="string">'tbody'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 遍历数组</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; datas.length; i++) &#123; </span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 创建 tr⾏</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span></span><br><span class="line"> tbody.appendChild(tr);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. ⾏⾥⾯创建单元格td 单元格的数量取决于每个对象⾥⾯的属性个数 </span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 使⽤for in遍历学⽣对象</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> datas[i]) &#123; </span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 创建单元格</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 把对象⾥⾯的属性值 datas[i][k] 给 td </span></span></span><br><span class="line"> td.innerHTML = datas[i][k];</span><br><span class="line"> tr.appendChild(td);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 创建有删除2个字的单元格</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">'td'</span>);</span></span><br><span class="line"><span class="handlebars"><span class="xml"> td.innerHTML = '<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span>删除 <span class="tag">&lt;/<span class="name">a</span>&gt;</span>';</span></span></span><br><span class="line"> tr.appendChild(td);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 4. 删除操作 开始</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> <span class="keyword">as</span> = <span class="built_in">document</span>.querySelectorAll(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">as</span>.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">as</span>[i].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 点击a 删除 当前a 所在的⾏(链接的爸爸的爸爸) </span></span></span><br><span class="line">node.removeChild(child) </span><br><span class="line"><span class="actionscript"> tbody.removeChild(<span class="keyword">this</span>.parentNode.parentNode)</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><ul>
<li>事件监听</li>
</ul>
<p>eventTarget.addEventListener(type, listener[, useCapture])</p>
<ol>
<li>type：事件类型字符串，如click、mouseover</li>
<li>listener：事件处理函数，事件发生会调用</li>
<li>useCapture：可选参数，布尔值</li>
</ol>
<ul>
<li>删除事件</li>
</ul>
<ol>
<li>传统删除方式</li>
</ol>
<p>eventTarget.onclick = null</p>
<ol start="2">
<li>方法监听删除方式</li>
</ol>
<p>eventTarget.removeEventListener(type, listener[, useCapture]);</p>
<p>eventTartget.detachEvent(eventNameWithOn, callback);</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> divs[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"> alert(11);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 传统⽅式删除事件</span></span></span><br><span class="line"><span class="actionscript"> divs[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. removeEventListener 删除事件</span></span></span><br><span class="line"><span class="actionscript"> divs[<span class="number">1</span>].addEventListener(<span class="string">'click'</span>, fn) <span class="comment">// ⾥⾯的fn 不需要调⽤加⼩括号</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"> alert(22);</span><br><span class="line"><span class="actionscript"> divs[<span class="number">1</span>].removeEventListener(<span class="string">'click'</span>, fn);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. detachEvent</span></span></span><br><span class="line"><span class="actionscript"> divs[<span class="number">2</span>].attachEvent(<span class="string">'onclick'</span>, fn1);</span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"> alert(33);</span><br><span class="line"><span class="actionscript"> divs[<span class="number">2</span>].detachEvent(<span class="string">'onclick'</span>, fn1);</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>DOM事件流</li>
</ul>
<p>事件流描述的是从页面接收事件的顺序。</p>
<p>事件发生时会在元素节点之间按照特定顺序传播，这个传播过程便是DOM事件流</p>
<img src="/img/web/JS/10.png">

<ol>
<li>事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到DOM最顶层的节点的过程</li>
<li>事件捕获：由DOM最顶层节点开始，然后逐级向下传播到最具体的元素的过程</li>
</ol>
<p>事件流三个阶段：</p>
<ol>
<li>捕获阶段</li>
<li>当前目标阶段</li>
<li>冒泡阶段</li>
</ol>
<p>JS只能进行冒泡和捕获其中一个阶段</p>
<p>onclick和attachEvent只能得到冒泡阶段</p>
<p>eventTarget.addEventListener(type, listener[, useCapture]);第三个参数如果是true，则在捕获阶段调用事件处理程序，若为false，或空（默认false），则在冒泡阶段调用事件处理程序。</p>
<ul>
<li>事件对象</li>
</ul>
<p>事件发生后，跟事件相关的一系列信息数据的集合都放在这个对象里，这个对象就是事件对象。</p>
<p>事件触发后，就会产生事件对象，并且系统会以实参的形式传给事件处理函数。因此在事件处理函数中声明一个形参用来接收事件对象。</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventTarget.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这个event就是事件对象，我们还可以写成e</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>兼容性处理：</p>
<p>e = e || window.event</p>
<p>如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">eventTarget.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事件对象属性和方法</p>
<table>
<thead>
<tr>
<th>事件对象属性方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.target</td>
<td>返回触发事件对象</td>
</tr>
<tr>
<td>e.srcElement</td>
<td>返回触发事件对象（旧，处理兼容性问题）</td>
</tr>
<tr>
<td>e.type</td>
<td>返回事件类型</td>
</tr>
<tr>
<td>e.cancelBubble</td>
<td>阻止冒泡（旧，处理兼容性问题）</td>
</tr>
<tr>
<td>e.returnValue</td>
<td>阻止默认事件（旧，处理兼容性问题）</td>
</tr>
<tr>
<td>e.preventDefault()</td>
<td>阻止默认事件</td>
</tr>
<tr>
<td>e.stopPropagation()</td>
<td>阻止冒泡</td>
</tr>
</tbody></table>
<ul>
<li>e.target和this的区别</li>
</ul>
<p>this是事件绑定的元素</p>
<p>e.target是事件触发的元素</p>
<p>一般情况下this和e.target指向是相同的</p>
<p>在事件冒泡时（⽗⼦元素有相同事件，单击⼦元素，⽗元素的事件处理函数也会被触发执⾏）</p>
<p>这时候this指向的是⽗元素，因为它是绑定事件的元素对象。</p>
<p>⽽target指向的是⼦元素，因为他是触发事件的那个具体元素对象。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 我们给ul 绑定了事件 那么this 就指向ul </span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// ul</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// e.target 触发了事件的对象 我们点击的是li e.target 指向的就是li</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(e.target); <span class="comment">// li</span></span></span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阻止默认行为</li>
</ul>
<p>html中⼀些标签有默认⾏为，例如a标签被单击后，默认会进⾏⻚⾯跳转。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 阻⽌默认⾏为 让链接不跳转</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript"> a.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> e.preventDefault(); <span class="comment">// dom 标准写法</span></span></span><br><span class="line"> &#125;);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 传统的注册⽅式</span></span></span><br><span class="line"><span class="actionscript"> a.onclick = <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 普通浏览器 e.preventDefault(); ⽅法</span></span></span><br><span class="line"> e.preventDefault();</span><br><span class="line"><span class="actionscript"> <span class="comment">// 低版本浏览器 ie678 returnValue 属性</span></span></span><br><span class="line"><span class="actionscript"> e.returnValue = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 我们可以利⽤return false 也能阻⽌默认⾏为 没有兼容性问题</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>阻止事件冒泡</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>son⼉⼦<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> son = <span class="built_in">document</span>.querySelector(<span class="string">'.son'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 给son注册单击事件</span></span></span><br><span class="line"><span class="actionscript"> son.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'son'</span>);</span></span><br><span class="line"><span class="actionscript"> e.stopPropagation(); <span class="comment">// stop 停⽌ Propagation 传播</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">// 非标准 cancel 取消 bubble 泡泡</span></span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> father = <span class="built_in">document</span>.querySelector(<span class="string">'.father'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 给father注册单击事件</span></span></span><br><span class="line"><span class="actionscript"> father.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'father'</span>);</span></span><br><span class="line"><span class="actionscript"> &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 给document注册单击事件</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript"> alert(<span class="string">'document'</span>);</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>事件委托</li>
</ul>
<p>不给⼦元素注册事件，给⽗元素注册事件，把处理代码在⽗元素的事件中执⾏。</p>
<ol>
<li>我们只操作了⼀次 DOM ，提⾼了程序的性能。</li>
<li>动态新创建的⼦元素，也拥有事件。</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在⼿！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在⼿！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在⼿！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在⼿！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>知否知否，点我应有弹框在⼿！<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 事件委托的核⼼原理：给⽗节点添加侦听器， 利⽤事件冒泡影响每⼀个⼦节点</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'ul'</span>);</span></span><br><span class="line"><span class="actionscript"> ul.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// e.target 这个可以得到我们点击的对象</span></span></span><br><span class="line"><span class="actionscript"> e.target.style.backgroundColor = <span class="string">'pink'</span>;</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>禁⽌选中文字和禁⽌右键菜单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> 我是⼀段不愿意分享的文字</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. contextmenu 我们可以禁⽤右键菜单</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.addEventListener(<span class="string">'contextmenu'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"> e.preventDefault();</span><br><span class="line"> &#125;)</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 禁⽌选中文字 selectstart</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.addEventListener(<span class="string">'selectstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"> e.preventDefault();</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标事件对象</li>
</ul>
<table>
<thead>
<tr>
<th>鼠标事件对象</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e.clientX</td>
<td>返回鼠标相对于浏览器窗口可视区的 X 坐标</td>
</tr>
<tr>
<td>e.clientY</td>
<td>返回鼠标相对于浏览器窗口可视区的 Y 坐标</td>
</tr>
<tr>
<td>e.pageX</td>
<td>返回鼠标相对于文档页面的 X 坐标</td>
</tr>
<tr>
<td>e.pageY</td>
<td>返回鼠标相对于文档页面的 Y 坐标</td>
</tr>
<tr>
<td>e.screenX</td>
<td>返回鼠标相对于电脑屏幕的 X 坐标</td>
</tr>
<tr>
<td>e.screenY</td>
<td>返回鼠标相对于电脑屏幕的 Y 坐标</td>
</tr>
</tbody></table>
<p>获取鼠标在⻚⾯的坐标：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 鼠标事件对象 MouseEvent</span></span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 1. client 鼠标在可视区的x和y坐标</span></span><br><span class="line"> <span class="built_in">console</span>.log(e.clientX);</span><br><span class="line"> <span class="built_in">console</span>.log(e.clientY);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'---------------------'</span>);</span><br><span class="line"> <span class="comment">// 2. page 鼠标在⻚⾯文档的x和y坐标</span></span><br><span class="line"> <span class="built_in">console</span>.log(e.pageX);</span><br><span class="line"> <span class="built_in">console</span>.log(e.pageY);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'---------------------'</span>);</span><br><span class="line"> <span class="comment">// 3. screen 鼠标在电脑屏幕的x和y坐标</span></span><br><span class="line"> <span class="built_in">console</span>.log(e.screenX);</span><br><span class="line"> <span class="built_in">console</span>.log(e.screenY);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h2><table>
<thead>
<tr>
<th>键盘事件</th>
<th>触发条件</th>
</tr>
</thead>
<tbody><tr>
<td>onkeyup</td>
<td>某按键被松开时触发</td>
</tr>
<tr>
<td>onkeydown</td>
<td>某按键被按下时触发</td>
</tr>
<tr>
<td>onkeypress</td>
<td>某按键被按下时触发（不识别功能键，如ctrl、shift，区分按键大小写）</td>
</tr>
</tbody></table>
<p>执行顺序：keydown - keypress - keyup</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常⽤的键盘事件</span></span><br><span class="line"><span class="comment">//1. keyup 按键弹起的时候触发</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我弹起了'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//3. keypress 按键按下的时候触发 不能识别功能键 比如 ctrl shift 左右箭头</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我按下了press'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2. keydown 按键按下的时候触发 能识别功能键 比如 ctrl shift 左右箭头</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我按下了down'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>键盘事件对象</li>
</ul>
<p>keyCode：返回该键的ASCII值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 键盘事件对象中的keyCode属性可以得到相应键的ASCII码值</span></span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'up:'</span> + e.keyCode);</span><br><span class="line"> <span class="comment">// 我们可以利⽤keycode返回的ASCII码值来判断⽤户按下了那个键</span></span><br><span class="line"> <span class="keyword">if</span> (e.keyCode === <span class="number">65</span>) &#123;</span><br><span class="line"> alert(<span class="string">'您按下的a键'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> alert(<span class="string">'您没有按下a键'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'keypress'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// console.log(e);</span></span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'press:'</span> + e.keyCode);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p>例：（按下 s 键， 光标就定位到搜索框（文本框获得焦点））</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 获取输入框</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> search = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 给document注册keyup事件</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 判断keyCode的值</span></span></span><br><span class="line"> if (e.keyCode === 83) &#123;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 触发输入框的获得焦点事件</span></span></span><br><span class="line"> search.focus();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p> BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容⽽与浏览器窗⼝进⾏交互的对象，其核⼼对象是 window。</p>
<p> BOM 由⼀系列相关的对象构成，并且每个对象都提供了很多⽅法与属性。</p>
<p> BOM 缺乏标准，JavaScript 语法的标准化组织是 ECMA，DOM 的标准化组织是 W3C，BOM 最初是Netscape浏览器标准的⼀部分。</p>
 <img src="/img/web/JS/11.png">

<ul>
<li>顶级对象window</li>
</ul>
<ol>
<li>window 是 JS 访问浏览器窗口的一个接口</li>
<li>window 是一个全局对象。定义在全局作用域中的变量、函数都会变成 window 对象的属性和方法。在调用的时候可以省略 window，alert()、prompt()等都属于 window 方法。</li>
</ol>
<ul>
<li>window对象的常见事件</li>
</ul>
<p>窗口加载事件（两类）</p>
<p>第一类：</p>
<ol>
<li>window.onload =function(){}</li>
<li>window.addEventListener(“load”,function(){});</li>
</ol>
<p>window.onload 是窗⼝ (⻚⾯）加载事件，当文档内容完全加载完成会触发该事件(包括图像、脚本文件、CSS文件等), 就调⽤的处理函数。</p>
<p>window.onload 进行注册事件只能写一次，多个则以最后一个为准</p>
<p>addEventListener(“load”,function)则没有限制</p>
<p>第二类：</p>
<ol>
<li>document.addEventListener(‘DOMContentLoaded’,function(){});</li>
</ol>
<p>仅当DOM加载完成时运行，不包括样式表、图片等</p>
<p>如果⻚⾯的图片很多的话, 从⽤户访问到onload触发可能需要较⻓的时间, 交互效果就不能实现，必然影响⽤户的体验，此时⽤ DOMContentLoaded 事件比较合适。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span><br><span class="line"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="string">'点击我'</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="number">22</span>);</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> alert(<span class="number">33</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>调整窗口大小事件</li>
</ul>
<ol>
<li>window.onresize = function(){}</li>
<li>window.addEventListener(‘resize’,function(){});</li>
</ol>
<p>window.onresize 是调整窗口⼤⼩加载事件, 当触发时就调⽤的处理函数。</p>
<p>只要窗⼝⼤⼩发⽣像素变化，就会触发这个事件</p>
<p>我们经常利⽤这个事件完成响应式布局。 window.innerWidth 当前屏幕的宽度</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 注册⻚⾯加载事件</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 注册调整窗⼝⼤⼩事件</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// window.innerWidth 获取窗⼝⼤⼩</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'变化了'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth &lt;= <span class="number">800</span>) &#123;</span></span><br><span class="line"><span class="actionscript"> div.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"> div.style.display = <span class="string">'block'</span>;</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>定时器</li>
</ul>
<ol>
<li>setTimeout()</li>
<li>setInterval()</li>
</ol>
<p>window.setTimeout(调用函数,延迟毫秒数);：</p>
<p>window 可以省略。</p>
<p>调用函数可以直接写函数或者函数名，也可以写字符串形式’函数名()’，第三种不推荐</p>
<p>延迟毫秒数默认0</p>
<p>定时器如果有一般为多个，因此需要加标识符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 回调函数是⼀个匿名函数</span></span></span><br><span class="line"><span class="actionscript"> setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'时间到了'</span>);</span></span><br><span class="line"> &#125;, 2000);</span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">callback</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'爆炸了'</span>);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"><span class="comment">// 回调函数是⼀个有名函数</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> timer1 = setTimeout(callback, <span class="number">3000</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> timer2 = setTimeout(callback, <span class="number">5000</span>);</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（5秒后关闭广告）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/ad.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"ad"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 获取要操作的元素</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> ad = <span class="built_in">document</span>.querySelector(<span class="string">'.ad'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="actionscript"> setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> ad.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"> &#125;, 5000);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>停止定时器：window.clearTimeout(timeoutID)</p>
<p>参数为定时器标识符</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击停⽌定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'爆炸了'</span>);</span></span><br><span class="line"> &#125;, 5000);</span><br><span class="line"><span class="actionscript"><span class="comment">// 给按钮注册单击事件</span></span></span><br><span class="line"><span class="actionscript"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 停⽌定时器</span></span></span><br><span class="line"> clearTimeout(timer);</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>window.setInterval(调用函数,间隔毫秒数);</p>
<p>setInterval 将重复调用函数，调用间隔为间隔毫秒数</p>
<p>第一次执行建个毫秒数后执行，之后重复在间隔后执行，其余注意与setTimeout相同</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. setInterval </span></span></span><br><span class="line"><span class="actionscript"> setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="string">'继续输出'</span>);</span></span><br><span class="line"> &#125;, 1000);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>例：（倒计时）</p>
<img src="/img/web/JS/12.png">

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hour"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"minute"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 获取元素（时分秒盒⼦）</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> hour = <span class="built_in">document</span>.querySelector(<span class="string">'.hour'</span>); <span class="comment">// ⼩时的⿊⾊盒⼦</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> minute = <span class="built_in">document</span>.querySelector(<span class="string">'.minute'</span>); <span class="comment">// 分钟的⿊⾊盒⼦</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> second = <span class="built_in">document</span>.querySelector(<span class="string">'.second'</span>); <span class="comment">// 秒数的⿊⾊盒⼦</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> inputTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2020-7-3 18:00:00'</span>); <span class="comment">// 返回的是⽤户输入时间总的</span></span></span><br><span class="line">毫秒数</span><br><span class="line"><span class="actionscript"> countDown(); <span class="comment">// 我们先调⽤⼀次这个函数，防⽌第⼀次刷新⻚⾯有空⽩</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. 开启定时器</span></span></span><br><span class="line"> setInterval(countDown, 1000);</span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">countDown</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> nowTime = +<span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 返回的是当前时间总的毫秒数</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> times = (inputTime - nowTime) / <span class="number">1000</span>; <span class="comment">// times是剩余时间总的秒数</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>); <span class="comment">//时</span></span></span><br><span class="line"><span class="actionscript"> h = h &lt; <span class="number">10</span> ? <span class="string">'0'</span> + h : h;</span></span><br><span class="line"><span class="actionscript"> hour.innerHTML = h; <span class="comment">// 把剩余的⼩时给 ⼩时⿊⾊盒⼦</span></span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>); <span class="comment">// 分</span></span></span><br><span class="line"><span class="actionscript"> m = m &lt; <span class="number">10</span> ? <span class="string">'0'</span> + m : m;</span></span><br><span class="line"> minute.innerHTML = m;</span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>); <span class="comment">// 当前的秒</span></span></span><br><span class="line"><span class="actionscript"> s = s &lt; <span class="number">10</span> ? <span class="string">'0'</span> + s : s;</span></span><br><span class="line"> second.innerHTML = s;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>停止计时器</p>
<p>window.clearInterval(intervalID)</p>
<p>例：（发送短信倒计时）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">⼿机号码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 全局变量，定义剩下的秒数</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> time = <span class="number">3</span>; </span></span><br><span class="line"><span class="actionscript"><span class="comment">// 注册单击事件</span></span></span><br><span class="line"><span class="actionscript"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 禁⽤按钮</span></span></span><br><span class="line"><span class="actionscript"> btn.disabled = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 开启定时器</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 判断剩余秒数</span></span></span><br><span class="line"> if (time == 0) &#123;</span><br><span class="line"><span class="actionscript"> <span class="comment">// 清除定时器和复原按钮</span></span></span><br><span class="line"> clearInterval(timer);</span><br><span class="line"><span class="actionscript"> btn.disabled = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript"> btn.innerHTML = <span class="string">'发送'</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"> btn.innerHTML = <span class="string">'还剩下'</span> + time + <span class="string">'秒'</span>;</span></span><br><span class="line"> time--;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, 1000);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>this指向问题</li>
</ul>
<p>this的指向在函数定义的时候是确定不了的，只有函数执⾏的时候才能确定this到底指向谁，⼀般情况下this的最终指向的是那个调⽤它的对象。</p>
<ol>
<li>全局作⽤域或者普通函数中this指向全局对象window（注意定时器⾥⾯的this指向window）</li>
<li>⽅法调⽤中谁调⽤this指向谁</li>
<li>构造函数中this指向构造函数的实例</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// this 指向问题 ⼀般情况下this的最终指向的是那个调⽤它的对象</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 1. 全局作⽤域或者普通函数中this指向全局对象window（ 注意定时器⾥⾯的this指向window）</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.fn();</span></span><br><span class="line"><span class="javascript"> <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span></span><br><span class="line"> &#125;, 1000);</span><br><span class="line"><span class="actionscript"> <span class="comment">// 2. ⽅法调⽤中谁调⽤this指向谁</span></span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="actionscript"> sayHi: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this指向的是 o 这个对象</span></span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> o.sayHi();</span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 事件处理函数中的this指向的是btn这个按钮对象</span></span></span><br><span class="line"> &#125;)</span><br><span class="line"><span class="actionscript"> <span class="comment">// 3. 构造函数中this指向构造函数的实例</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">Fun</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"> <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// this 指向的是fun 实例对象</span></span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> fun = <span class="keyword">new</span> Fun();</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>location对象</li>
</ul>
<p>window对象提供了一个location属性用于获取窗体或设置窗体的URL，并且可以用于解析URL，该属性返回的是一个对象，所以也称location对象。</p>
<p>对象属性</p>
<table>
<thead>
<tr>
<th>location对象属性</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.href</td>
<td>获取或设置整个URL</td>
</tr>
<tr>
<td>location.host</td>
<td>返回主机（域名）</td>
</tr>
<tr>
<td>location.port</td>
<td>返回端口号，若无则返回空字符串</td>
</tr>
<tr>
<td>location.pathname</td>
<td>返回路径</td>
</tr>
<tr>
<td>location.search</td>
<td>返回参数</td>
</tr>
<tr>
<td>location.hash</td>
<td>返回片段</td>
</tr>
</tbody></table>
<p>例：（5分钟⾃动跳转⻚⾯）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// console.log(location.href);</span></span></span><br><span class="line"><span class="actionscript"> location.href = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line"> &#125;)</span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="actionscript"> setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"> if (timer == 0) &#123;</span><br><span class="line"><span class="actionscript"> location.href = <span class="string">'http://www.baidu.com'</span>;</span></span><br><span class="line"><span class="actionscript"> &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"> div.innerHTML = <span class="string">'您将在'</span> + timer + <span class="string">'秒钟之后跳转到⾸⻚'</span>;</span></span><br><span class="line"> timer--;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;, 1000);</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>常见方法</p>
<table>
<thead>
<tr>
<th>location对象方法</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.assgin()</td>
<td>可跳转页面（重定向页面）</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，不记录历史</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面</td>
</tr>
</tbody></table>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript"> btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 记录浏览历史，所以可以实现后退功能</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// location.assign('http://www.baidu.com');</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// 不记录浏览历史，所以不可以实现后退功能</span></span></span><br><span class="line"><span class="actionscript"> <span class="comment">// location.replace('http://www.baidu.com');</span></span></span><br><span class="line"><span class="actionscript"> location.reload(<span class="literal">true</span>);</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>navigator对象</li>
</ul>
<p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常⽤的是 userAgent，该属性可以返回由客户机发送服务器的 user-agent 头部的值。</p>
<p>下⾯前端代码可以判断⽤户那个终端打开⻚⾯，实现跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|</span></span><br><span class="line"><span class="regexp">BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windo</span></span><br><span class="line"><span class="regexp">ws Phone)/i</span>))) &#123;</span><br><span class="line"> <span class="built_in">window</span>.location.href = <span class="string">""</span>; <span class="comment">//⼿机</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="built_in">window</span>.location.href = <span class="string">""</span>; <span class="comment">//电脑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>history对象</li>
</ul>
<p>window对象给我们提供了⼀个 history对象，与浏览器历史记录进⾏交互。该对象包含⽤户（在浏览器窗⼝中）访问过的URL。</p>
<table>
<thead>
<tr>
<th>history对象方法</th>
<th>返回值</th>
</tr>
</thead>
<tbody><tr>
<td>location.assgin()</td>
<td>可跳转页面（重定向页面）</td>
</tr>
<tr>
<td>location.replace()</td>
<td>替换当前页面，不记录历史</td>
</tr>
<tr>
<td>location.reload()</td>
<td>重新加载页面</td>
</tr>
</tbody></table>
<hr>
<h2 id="JS执行机制"><a href="#JS执行机制" class="headerlink" title="JS执行机制"></a>JS执行机制</h2><ol>
<li>JS是单线程的</li>
</ol>
<ul>
<li>同步任务和异步任务</li>
</ul>
<p>单线程导致的问题就是后⾯的任务等待前⾯任务完成，如果前⾯任务很耗时（比如读取⽹络数据），后⾯任务不得不⼀直等待</p>
<p>为了解决这个问题，利⽤多核 CPU 的计算能⼒，HTML5 提出 Web Worker 标准，允许 JavaScript 脚本创建多个线程，但是⼦线程完全受主线程控制。于是，JS 中出现了同步任务和异步任务。</p>
<p>同步</p>
<p>前⼀个任务结束后再执⾏后⼀个任务，程序的执⾏顺序与任务的排列顺序是⼀致的、同步的。比如做饭的同步做法：我们要烧⽔煮饭，等⽔开了（10分钟之后），再去切菜，炒菜。</p>
<p>异步</p>
<p>你在做⼀件事情时，因为这件事情会花费很⻓时间，在做这件事的同时，你还可以去处理其他事情。比如做饭的异步做法，我们在烧⽔的同时，利⽤这10分钟，去切菜，炒菜。</p>
<p>JS中所有任务可以分成两种，⼀种是同步任务（synchronous），另⼀种是异步任务<br>（asynchronous）。</p>
<p>同步任务指的是：</p>
<p>在主线程上排队执⾏的任务，只有前⼀个任务执⾏完毕，才能执⾏后⼀个任务</p>
<p>异步任务指的是：</p>
<p>不进入主线程、⽽进入”任务队列”的任务，当主线程中的任务运⾏完了，才会从”任务队<br>列”取出异步任务放入主线程执⾏</p>
<ul>
<li>事件循环</li>
</ul>
<ol>
<li>先执行执行栈中的同步任务</li>
<li>异步任务（回调函数）放入任务队列</li>
<li>一旦执行栈同步任务全部执行完毕，系统按次序读取任务队列中的异步任务，被读取异步任务结束等待状态，进入执行栈，开始执行。</li>
</ol>
<img src='/img/web/JS/13.png'>

<hr>
<h2 id="元素偏移量"><a href="#元素偏移量" class="headerlink" title="元素偏移量"></a>元素偏移量</h2><ul>
<li>offset</li>
</ul>
<p>我们使⽤ offset系列相关属性可以动态的得到该元素的位置（偏移）、⼤⼩等。</p>
<ol>
<li>获得元素距离带有定位⽗元素的位置</li>
<li>获得元素⾃⾝的⼤⼩（宽度⾼度）</li>
<li>注意：返回的数值都不带单位</li>
</ol>
<table>
<thead>
<tr>
<th>offset属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>element.offsetParent</td>
<td>返回该元素带有定位的父级元素，若父级元素都无定位则返回body</td>
</tr>
<tr>
<td>element.offsetTop</td>
<td>返回元素相对带有定位的父级元素上方的偏移</td>
</tr>
<tr>
<td>element.offsetLeft</td>
<td>返回元素相对带有定位的父级元素左边框的偏移</td>
</tr>
<tr>
<td>element.offsetWidth</td>
<td>返回自身包括padding、边框、内容区的宽度，返回数值不带单位</td>
</tr>
<tr>
<td>element.offsetHeight</td>
<td>返回自身包括padding、边框、内容区的高度，返回数值不带单位</td>
</tr>
</tbody></table>
<ul>
<li>offset和style的区别</li>
</ul>
<ol>
<li>offset可以得到任意样式表中的样式值</li>
<li>offset系列获得的数值是没有单位的</li>
<li>offsetWidth包含padding + border + width</li>
<li>offsetWidth等属性是只读属性，只能获取不能赋值</li>
</ol>
<p>我们想要获取元素⼤⼩位置，⽤offset更合适</p>
<ol>
<li>style 只能得到⾏内样式表中的样式值</li>
<li>style.width 获得的是带有单位的字符串</li>
<li>style.width 获得不包含 padding和border 的值</li>
<li>style.width 是可读写属性，可以获取也可以赋值</li>
</ol>
<p>我们想要给元素更改值，则需要⽤style改变</p>
<p>例：（获取鼠标在盒⼦内的坐标）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span><br><span class="line">box.addEventListener(<span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> x = e.pageX - <span class="keyword">this</span>.offsetLeft;</span><br><span class="line"><span class="keyword">var</span> y = e.pageY - <span class="keyword">this</span>.offsetTop;</span><br><span class="line"><span class="keyword">this</span>.innerHTML = <span class="string">'x坐标是'</span> + x + <span class="string">' y坐标是'</span> + y;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>例：（模态框拖拽）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 获取元素</span></span><br><span class="line"> <span class="keyword">var</span> login = <span class="built_in">document</span>.querySelector(<span class="string">'.login'</span>);</span><br><span class="line"> <span class="keyword">var</span> mask = <span class="built_in">document</span>.querySelector(<span class="string">'.login-bg'</span>);</span><br><span class="line"> <span class="keyword">var</span> link = <span class="built_in">document</span>.querySelector(<span class="string">'#link'</span>);</span><br><span class="line"> <span class="keyword">var</span> closeBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#closeBtn'</span>);</span><br><span class="line"> <span class="keyword">var</span> title = <span class="built_in">document</span>.querySelector(<span class="string">'#title'</span>);</span><br><span class="line"> <span class="comment">// 2. 点击弹出层这个链接 link 让mask 和login 显⽰出来</span></span><br><span class="line"> link.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> mask.style.display = <span class="string">'block'</span>;</span><br><span class="line"> login.style.display = <span class="string">'block'</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 3. 点击 closeBtn 就隐藏 mask 和 login </span></span><br><span class="line"> closeBtn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> mask.style.display = <span class="string">'none'</span>;</span><br><span class="line"> login.style.display = <span class="string">'none'</span>;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 4. 开始拖拽</span></span><br><span class="line"> <span class="comment">// (1) 当我们鼠标按下， 就获得鼠标在盒⼦内的坐标</span></span><br><span class="line"> title.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> x = e.pageX - login.offsetLeft;</span><br><span class="line"> <span class="keyword">var</span> y = e.pageY - login.offsetTop;</span><br><span class="line"> <span class="comment">// (2) 鼠标移动的时候，把鼠标在⻚⾯中的坐标，减去 鼠标在盒⼦内的坐标就是模态</span></span><br><span class="line">框的left和top值</span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> login.style.left = e.pageX - x + <span class="string">'px'</span>;</span><br><span class="line"> login.style.top = e.pageY - y + <span class="string">'px'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// (3) 鼠标弹起，就让鼠标移动事件移除</span></span><br><span class="line"> <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="元素可视区-client"><a href="#元素可视区-client" class="headerlink" title="元素可视区 client"></a>元素可视区 client</h2><ul>
<li>client概述</li>
</ul>
<p>client 翻译过来就是客户端，我们使⽤ client 系列的相关属性来获取元素可视区的相关信息。通过 client 系列的相关属性可以动态的得到该元素的边框⼤⼩、元素⼤⼩等。</p>
<table>
<thead>
<tr>
<th>client属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>element.clientTop</td>
<td>返回元素上边框的大小</td>
</tr>
<tr>
<td>element.clientLeft</td>
<td>返回元素左边框的大小</td>
</tr>
<tr>
<td>element.clientWidth</td>
<td>返回自身包括padding、内容区的宽度，不含边框，返回数值不带单位</td>
</tr>
<tr>
<td>element.clientHeight</td>
<td>返回自身包括padding、内容区的高度，不含边框，返回数值不带单位</td>
</tr>
</tbody></table>
<img src='/img/web/JS/14.png'>

<hr>
<h2 id="元素滚动-scroll"><a href="#元素滚动-scroll" class="headerlink" title="元素滚动 scroll"></a>元素滚动 scroll</h2><ul>
<li>scroll 概述</li>
</ul>
<table>
<thead>
<tr>
<th>scroll属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>element.scrollTop</td>
<td>返回被上卷的距离，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollLeft</td>
<td>返回被左卷的距离，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollWidth</td>
<td>返回自身实际宽度，不含边框，返回数值不带单位</td>
</tr>
<tr>
<td>element.scrollHeight</td>
<td>返回自身实际高度，不含边框，返回数值不带单位</td>
</tr>
</tbody></table>
<img src='/img/web/JS/15.png'>

<p>例：（⻚⾯被卷去的头部）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素</span></span><br><span class="line"><span class="keyword">var</span> sliderbar = <span class="built_in">document</span>.querySelector(<span class="string">'.slider-bar'</span>);</span><br><span class="line"><span class="keyword">var</span> banner = <span class="built_in">document</span>.querySelector(<span class="string">'.banner'</span>);</span><br><span class="line"><span class="comment">// banner.offestTop 就是被卷去头部的⼤⼩ ⼀定要写到滚动的外⾯</span></span><br><span class="line"><span class="keyword">var</span> bannerTop = banner.offsetTop</span><br><span class="line"><span class="comment">// 当我们侧边栏固定定位之后应该变化的数值</span></span><br><span class="line"><span class="keyword">var</span> sliderbarTop = sliderbar.offsetTop - bannerTop;</span><br><span class="line"><span class="comment">// 获取main 主体元素</span></span><br><span class="line"><span class="keyword">var</span> main = <span class="built_in">document</span>.querySelector(<span class="string">'.main'</span>);</span><br><span class="line"><span class="keyword">var</span> goBack = <span class="built_in">document</span>.querySelector(<span class="string">'.goBack'</span>);</span><br><span class="line"><span class="keyword">var</span> mainTop = main.offsetTop;</span><br><span class="line"><span class="comment">// 2. ⻚⾯滚动事件 scroll</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// console.log(11);</span></span><br><span class="line"><span class="comment">// window.pageYOffset ⻚⾯被卷去的头部</span></span><br><span class="line"><span class="comment">// console.log(window.pageYOffset);</span></span><br><span class="line"><span class="comment">// 3 .当我们⻚⾯被卷去的头部⼤于等于了 172 此时 侧边栏就要改为固定定位</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= bannerTop) &#123;</span><br><span class="line">sliderbar.style.position = <span class="string">'fixed'</span>;</span><br><span class="line">sliderbar.style.top = sliderbarTop + <span class="string">'px'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sliderbar.style.position = <span class="string">'absolute'</span>;</span><br><span class="line">sliderbar.style.top = <span class="string">'300px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4. 当我们⻚⾯滚动到main盒⼦，就显⽰ goback模块</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.pageYOffset &gt;= mainTop) &#123;</span><br><span class="line">goBack.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">goBack.style.display = <span class="string">'none'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="动画函数封装"><a href="#动画函数封装" class="headerlink" title="动画函数封装"></a>动画函数封装</h2><p>核⼼原理：通过定时器 setInterval() 不断移动盒⼦位置。</p>
<ol>
<li>获得盒⼦当前位置</li>
<li>让盒⼦在当前位置加上1个移动距离</li>
<li>利⽤定时器不断重复这个操作</li>
<li>加⼀个结束定时器的条件</li>
<li>注意此元素需要添加定位，才能使⽤element.style.left</li>
</ol>
<p>例：（动画函数给不同元素记录不同定时器）</p>
<p>如果多个元素都使⽤这个动画函数，每次都要 var 声明定时器。我们可以给不同的元素使⽤不同的定时器（⾃⼰专⻔⽤⾃⼰的定时器）。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 当我们不断的点击按钮，这个元素的速度会越来越快，因为开启了太多的定时器</span></span><br><span class="line"> <span class="comment">// 解决⽅案就是 让我们元素只有⼀个定时器执⾏</span></span><br><span class="line"> <span class="comment">// 先清除以前的定时器，只保留当前的⼀个定时器执⾏</span></span><br><span class="line"> clearInterval(obj.timer);</span><br><span class="line"> obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (obj.offsetLeft &gt;= target) &#123;</span><br><span class="line"> <span class="comment">// 停⽌动画 本质是停⽌定时器</span></span><br><span class="line"> clearInterval(obj.timer);</span><br><span class="line"> &#125;</span><br><span class="line"> obj.style.left = obj.offsetLeft + <span class="number">1</span> + <span class="string">'px'</span>;</span><br><span class="line"> &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>缓动效果原理</li>
</ul>
<p>缓动动画就是让元素运动速度有所变化，最常⻅的是让速度慢慢停下来</p>
<ol>
<li>让盒⼦每次移动的距离慢慢变⼩，速度就会慢慢落下来。</li>
<li>核⼼算法： (⽬标值 - 现在的位置)   /  10    做为每次移动的距离步⻓</li>
<li>停⽌的条件是： 让当前盒⼦位置等于⽬标位置就停⽌定时器</li>
<li>注意步⻓值需要取整</li>
</ol>
<ul>
<li>动画函数添加回调函数</li>
</ul>
<p>回调函数原理：函数可以作为⼀个参数。将这个函数作为参数传到另⼀个函数⾥⾯，当那个函数执⾏完之后，再执⾏传进去的这个函数，这个过程就叫做回调。</p>
<p>回调函数写的位置：定时器结束的位置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">animate</span>(<span class="params">obj, target, callback</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// console.log(callback); callback = function() &#123;&#125; 调⽤的时候 callback()</span></span><br><span class="line"> <span class="comment">// 先清除以前的定时器，只保留当前的⼀个定时器执⾏</span></span><br><span class="line"> clearInterval(obj.timer);</span><br><span class="line"> obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 步⻓值写到定时器的⾥⾯</span></span><br><span class="line"> <span class="comment">// 把我们步⻓值改为整数 不要出现⼩数的问题</span></span><br><span class="line"> <span class="comment">// var step = Math.ceil((target - obj.offsetLeft) / 10);</span></span><br><span class="line"> <span class="keyword">var</span> step = (target - obj.offsetLeft) / <span class="number">10</span>;</span><br><span class="line"> step = step &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(step) : <span class="built_in">Math</span>.floor(step);</span><br><span class="line"> <span class="keyword">if</span> (obj.offsetLeft == target) &#123;</span><br><span class="line"> <span class="comment">// 停⽌动画 本质是停⽌定时器</span></span><br><span class="line"> clearInterval(obj.timer);</span><br><span class="line"> <span class="comment">// 回调函数写到定时器结束⾥⾯</span></span><br><span class="line"> <span class="comment">// if (callback) &#123;</span></span><br><span class="line"> <span class="comment">// // 调⽤函数</span></span><br><span class="line"> <span class="comment">// callback();</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> callback &amp;&amp; callback();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 把每次加1 这个步⻓值改为⼀个慢慢变⼩的值 步⻓公式：(⽬标值 - 现在的位置) /</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"> obj.style.left = obj.offsetLeft + step + <span class="string">'px'</span>;</span><br><span class="line"> &#125;, <span class="number">15</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：（⽹⻚轮播图）</p>
<ol>
<li>鼠标经过轮播图模块，左右按钮显⽰，离开隐藏左右按钮。</li>
<li>点击右侧按钮⼀次，图片往左播放⼀张，以此类推，左侧按钮同理。</li>
<li>图片播放的同时，下⾯⼩圆圈模块跟随⼀起变化。</li>
<li>点击⼩圆圈，可以播放相应图片。</li>
<li>鼠标不经过轮播图，轮播图也会⾃动播放图片。</li>
<li>鼠标经过，轮播图模块， ⾃动播放停⽌。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ow.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 1. 获取元素</span></span><br><span class="line"> <span class="keyword">var</span> arrow_l = <span class="built_in">document</span>.querySelector(<span class="string">'.arrow-l'</span>);</span><br><span class="line"> <span class="keyword">var</span> arrow_r = <span class="built_in">document</span>.querySelector(<span class="string">'.arrow-r'</span>);</span><br><span class="line"> <span class="keyword">var</span> focus = <span class="built_in">document</span>.querySelector(<span class="string">'.focus'</span>);</span><br><span class="line"> <span class="keyword">var</span> focusWidth = focus.offsetWidth;</span><br><span class="line"> <span class="comment">// 2. 鼠标经过focus 就显⽰隐藏左右按钮</span></span><br><span class="line"> focus.addEventListener(<span class="string">'mouseenter'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> arrow_l.style.display = <span class="string">'block'</span>;</span><br><span class="line"> arrow_r.style.display = <span class="string">'block'</span>;</span><br><span class="line"> clearInterval(timer);</span><br><span class="line"> timer = <span class="literal">null</span>; <span class="comment">// 清除定时器变量</span></span><br><span class="line"> &#125;);</span><br><span class="line"> focus.addEventListener(<span class="string">'mouseleave'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> arrow_l.style.display = <span class="string">'none'</span>;</span><br><span class="line"> arrow_r.style.display = <span class="string">'none'</span>;</span><br><span class="line"> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">//⼿动调⽤点击事件</span></span><br><span class="line"> arrow_r.click();</span><br><span class="line"> &#125;, <span class="number">2000</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">// 3. 动态⽣成⼩圆圈 有⼏张图片，我就⽣成⼏个⼩圆圈</span></span><br><span class="line"> <span class="keyword">var</span> ul = focus.querySelector(<span class="string">'ul'</span>);</span><br><span class="line"> <span class="keyword">var</span> ol = focus.querySelector(<span class="string">'.circle'</span>);</span><br><span class="line"> <span class="comment">// console.log(ul.children.length);</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ul.children.length; i++) &#123;</span><br><span class="line"> <span class="comment">// 创建⼀个⼩li </span></span><br><span class="line"> <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line"> <span class="comment">// 记录当前⼩圆圈的索引号 通过⾃定义属性来做</span></span><br><span class="line"> li.setAttribute(<span class="string">'index'</span>, i);</span><br><span class="line"> <span class="comment">// 把⼩li插入到ol ⾥⾯</span></span><br><span class="line"> ol.appendChild(li);</span><br><span class="line"> <span class="comment">// 4. ⼩圆圈的排他思想 我们可以直接在⽣成⼩圆圈的同时直接绑定点击事件</span></span><br><span class="line"> li.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// ⼲掉所有⼈ 把所有的⼩li 清除 current 类名</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line"> ol.children[i].className = <span class="string">''</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 留下我⾃⼰ 当前的⼩li 设置current 类名</span></span><br><span class="line"> <span class="keyword">this</span>.className = <span class="string">'current'</span>;</span><br><span class="line"> <span class="comment">// 5. 点击⼩圆圈，移动图片 当然移动的是 ul </span></span><br><span class="line"> <span class="comment">// ul 的移动距离 ⼩圆圈的索引号 乘以 图片的宽度 注意是负值</span></span><br><span class="line"> <span class="comment">// 当我们点击了某个⼩li 就拿到当前⼩li 的索引号</span></span><br><span class="line"> <span class="keyword">var</span> index = <span class="keyword">this</span>.getAttribute(<span class="string">'index'</span>);</span><br><span class="line"> <span class="comment">// 当我们点击了某个⼩li 就要把这个li 的索引号给 num </span></span><br><span class="line"> num = index;</span><br><span class="line"> <span class="comment">// 当我们点击了某个⼩li 就要把这个li 的索引号给 circle </span></span><br><span class="line"> circle = index;</span><br><span class="line"> <span class="comment">// num = circle = index;</span></span><br><span class="line"> <span class="built_in">console</span>.log(focusWidth);</span><br><span class="line"> <span class="built_in">console</span>.log(index);</span><br><span class="line"> animate(ul, -index * focusWidth);</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 把ol⾥⾯的第⼀个⼩li设置类名为 current</span></span><br><span class="line"> ol.children[<span class="number">0</span>].className = <span class="string">'current'</span>;</span><br><span class="line"> <span class="comment">// 6. 克隆第⼀张图片(li)放到ul 最后⾯</span></span><br><span class="line"> <span class="keyword">var</span> first = ul.children[<span class="number">0</span>].cloneNode(<span class="literal">true</span>);</span><br><span class="line"> ul.appendChild(first);</span><br><span class="line"> <span class="comment">// 7. 点击右侧按钮， 图片滚动⼀张</span></span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">// circle 控制⼩圆圈的播放</span></span><br><span class="line"> <span class="keyword">var</span> circle = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">// flag 节流阀</span></span><br><span class="line"> <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line"> arrow_r.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (flag) &#123;</span><br><span class="line"> flag = <span class="literal">false</span>; <span class="comment">// 关闭节流阀</span></span><br><span class="line"> <span class="comment">// 如果⾛到了最后复制的⼀张图片，此时 我们的ul 要快速复原 left 改为 0</span></span><br><span class="line"> <span class="keyword">if</span> (num == ul.children.length - <span class="number">1</span>) &#123;</span><br><span class="line"> ul.style.left = <span class="number">0</span>;</span><br><span class="line"> num = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> num++;</span><br><span class="line"> animate(ul, -num * focusWidth, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> flag = <span class="literal">true</span>; <span class="comment">// 打开节流阀</span></span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">// 8. 点击右侧按钮，⼩圆圈跟随⼀起变化 可以再声明⼀个变量控制⼩圆圈的播放</span></span><br><span class="line"> circle++;</span><br><span class="line"> <span class="comment">// 如果circle == 4 说明⾛到最后我们克隆的这张图片了 我们就复原</span></span><br><span class="line"> <span class="keyword">if</span> (circle == ol.children.length) &#123;</span><br><span class="line"> circle = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 调⽤函数</span></span><br><span class="line"> circleChange();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">// 9. 左侧按钮做法</span></span><br><span class="line"> arrow_l.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (flag) &#123;</span><br><span class="line"> flag = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line"> num = ul.children.length - <span class="number">1</span>;</span><br><span class="line"> ul.style.left = -num * focusWidth + <span class="string">'px'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> num--;</span><br><span class="line"> animate(ul, -num * focusWidth, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> flag = <span class="literal">true</span>;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="comment">// 点击左侧按钮，⼩圆圈跟随⼀起变化 可以再声明⼀个变量控制⼩圆圈的播放</span></span><br><span class="line"> circle--;</span><br><span class="line"> <span class="comment">// 如果circle &lt; 0 说明第⼀张图片，则⼩圆圈要改为第4个⼩圆圈（3）</span></span><br><span class="line"> <span class="comment">// if (circle &lt; 0) &#123;</span></span><br><span class="line"> <span class="comment">// circle = ol.children.length - 1;</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> circle = circle &lt; <span class="number">0</span> ? ol.children.length - <span class="number">1</span> : circle;</span><br><span class="line"> <span class="comment">// 调⽤函数</span></span><br><span class="line"> circleChange();</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">circleChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 先清除其余⼩圆圈的current类名</span></span><br><span class="line">day06_WebAPIs.md <span class="number">8</span>/<span class="number">20</span>/<span class="number">2021</span></span><br><span class="line"><span class="number">5</span> / <span class="number">8</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ol.children.length; i++) &#123;</span><br><span class="line"> ol.children[i].className = <span class="string">''</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 留下当前的⼩圆圈的current类名</span></span><br><span class="line"> ol.children[circle].className = <span class="string">'current'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 10. ⾃动播放轮播图</span></span><br><span class="line"> <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">//⼿动调⽤点击事件</span></span><br><span class="line"> arrow_r.click();</span><br><span class="line"> &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="触屏事件"><a href="#触屏事件" class="headerlink" title="触屏事件"></a>触屏事件</h2><table>
<thead>
<tr>
<th>触屏touch事件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>touchstart</td>
<td>手指触摸到一个DOM元素时触发</td>
</tr>
<tr>
<td>touchmove</td>
<td>手指在一个DOM元素上滑动时触发</td>
</tr>
<tr>
<td>touchend</td>
<td>手指从一个DOM元素上移开时触发</td>
</tr>
</tbody></table>
<ul>
<li>触摸事件对象</li>
</ul>
<p>TouchEvent 是⼀类描述⼿指在触摸平⾯（触摸屏、触摸板等）的状态变化的事件。这类事件⽤于描述⼀个或多个触点，使开发者可以检测触点的移动，触点的增加和减少，等等。</p>
<table>
<thead>
<tr>
<th>触摸列表</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>touches</td>
<td>正在触摸屏幕的所有手指的一个列表</td>
</tr>
<tr>
<td>targetTouches</td>
<td>正在触摸当前DOM元素上的手指的一个列表</td>
</tr>
<tr>
<td>changedTouches</td>
<td>手指状态发生了改变的列表</td>
</tr>
</tbody></table>
<ul>
<li>移动端拖动元素</li>
</ul>
<p>拖动元素三步曲：</p>
<p>（1） 触摸元素 touchstart： 获取⼿指初始坐标，同时获得盒⼦原来的位置</p>
<p>（2） 移动⼿指 touchmove： 计算⼿指的滑动距离，并且移动盒⼦</p>
<p>（3） 离开⼿指 touchend</p>
<p>⼿指移动也会触发滚动屏幕所以这⾥要阻⽌默认的屏幕滚动 e.preventDefault();</p>
<hr>
<h1 id="JS高级"><a href="#JS高级" class="headerlink" title="JS高级"></a>JS高级</h1><h2 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h2><p>对象由属性和方法组成：</p>
<ul>
<li>属性：事物的特征</li>
<li>方法：事物的行为</li>
</ul>
<p>创建对象：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量创建对象</span></span><br><span class="line"><span class="keyword">var</span> ldh = &#123;</span><br><span class="line">name: <span class="string">'刘德华'</span>,</span><br><span class="line">age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br><span class="line"><span class="comment">//构造函数创建对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>)<span class="comment">//实例化对象</span></span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure>

<p>类用来实例化对象，类抽象了对象的公共部分</p>
<p>创建类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"><span class="comment">// 类的共有属性放到 constructor 里面</span></span><br><span class="line"><span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh);</span><br></pre></td></tr></table></figure>

<p>类创建添加属性和方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line"><span class="comment">// 类的共有属性放到 constructor 里面 constructor是 构造器或者构造函数</span></span><br><span class="line"><span class="keyword">constructor</span>(uname, age) &#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">sing(song) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.uname + <span class="string">'唱'</span> + song);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 利用类创建对象 new</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh); <span class="comment">// Star &#123;uname: "刘德华", age: 18&#125;</span></span><br><span class="line">ldh.sing(<span class="string">'冰雨'</span>); <span class="comment">// 刘德华唱冰雨</span></span><br></pre></td></tr></table></figure>

<p>类的继承：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(surname) &#123;</span><br><span class="line"><span class="keyword">this</span>.surname= surname;</span><br><span class="line">&#125;</span><br><span class="line">say() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'你的姓是'</span> + <span class="keyword">this</span>.surname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123; <span class="comment">// 这样子类就继承了父类的属性和方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> damao= <span class="keyword">new</span> Son(<span class="string">'刘'</span>);</span><br><span class="line">damao.say();  <span class="comment">// 结果   你的姓是刘</span></span><br></pre></td></tr></table></figure>

<p>子类访问父类：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义了父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">sum() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.x + <span class="keyword">this</span>.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子元素继承父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line"><span class="keyword">super</span>(x, y); <span class="comment">//使用super调用了父类中的构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">son.sum(); <span class="comment">//结果为3</span></span><br></pre></td></tr></table></figure>

<p>P.S. super要在子类中优先调用</p>
<hr>
<h2 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h2><ul>
<li>实例成员：构造函数内部通过this添加的成员，实例成员只能通过实例化的对象来访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(ldh.uname);<span class="comment">//实例成员只能通过实例化的对象来访问</span></span><br></pre></td></tr></table></figure>

<ul>
<li>静态成员：在构造函数本身上添加的成员，静态成员只能通过构造函数来访问</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Star.sex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(Star.sex);<span class="comment">//静态成员只能通过构造函数来访问</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="构造函数原型prototype"><a href="#构造函数原型prototype" class="headerlink" title="构造函数原型prototype"></a>构造函数原型prototype</h2><p>每一个构造函数都有一个prototype 属性，指向另一个对象。注意这个prototype就是一个对象，这个对象的所有属性和方法，都会被构造函数所拥有。</p>
<p>我们可以把那些不变的方法，直接定义在 prototype 对象上，这样所有对象的实例就可以共享这些方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line">ldh.sing();<span class="comment">//我会唱歌</span></span><br><span class="line">zxy.sing();<span class="comment">//我会唱歌</span></span><br></pre></td></tr></table></figure>

<p>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用<br>constructor指回原来的构造函数如:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span></span><br><span class="line">Star.prototype = &#123;</span><br><span class="line"><span class="keyword">constructor</span>: Star, // 手动设置指回原来的构造函数</span><br><span class="line">sing: function() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">&#125;,</span><br><span class="line">movie: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会演电影'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> zxy = <span class="keyword">new</span> Star(<span class="string">'张学友'</span>, <span class="number">19</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zxy);</span><br></pre></td></tr></table></figure>

<hr>
<p>重点嗷！</p>
<h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>每一个实例对象又有一个proto属性，指向的构造函数的原型对象，构造函数的原型对象也是一个对象，也有proto属性，这样一层一层往上找就形成了原型链。</p>
<img src='/img/web/JS/1.png'>

<hr>
<h2 id="构造函数实例和原型对象三角关系"><a href="#构造函数实例和原型对象三角关系" class="headerlink" title="构造函数实例和原型对象三角关系"></a>构造函数实例和原型对象三角关系</h2><p>构造函数的prototype属性指向了构造函数原型对象</p>
<p>实例对象是由构造函数创建的,实例对象的<strong>proto</strong>属性指向了构造函数的原型对象</p>
<p>构造函数的原型对象的constructor属性指向了构造函数,实例对象的原型的constructor属性也指向了构造函数</p>
<img src='/img/web/JS/2.png'>

<hr>
<h2 id="原型链和成员查找机制"><a href="#原型链和成员查找机制" class="headerlink" title="原型链和成员查找机制"></a>原型链和成员查找机制</h2><p>任何对象都有原型对象,也就是prototype属性,任何原型对象也是一个对象,该对象就有proto属性,这样一层一层往上找,就形成了一条链,我们称此为原型链</p>
<ul>
<li>访问一个对象的属性（或者方法）时，先查找该对象有无该属性</li>
<li>若对象无该属性，即查找他的原型对象有无该属性（<strong>proto</strong>指向的 prototype 原型对象）</li>
<li>若原型对象也无该属性，则查找原型对象的原型（即Object原型对象）</li>
<li>直到查找到Object——null为止</li>
</ul>
<p><strong>proto</strong>对象原型的意义就在于为对象成员查找机制提供一条路线</p>
<hr>
<h2 id="原型对象中this指向问题"><a href="#原型对象中this指向问题" class="headerlink" title="原型对象中this指向问题"></a>原型对象中this指向问题</h2><p>构造函数中的this和原型对象的this,都指向我们new出来的实例对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> that;</span><br><span class="line">Star.prototype.sing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我会唱歌'</span>);</span><br><span class="line">that = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">'刘德华'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1. 在构造函数中,里面this指向的是对象实例 ldh</span></span><br><span class="line"><span class="built_in">console</span>.log(that === ldh);<span class="comment">//true</span></span><br><span class="line"><span class="comment">// 2.原型对象函数里面的this 指向的是 实例对象 ldh</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过原型扩展内置方法"><a href="#通过原型扩展内置方法" class="headerlink" title="通过原型扩展内置方法"></a>通过原型扩展内置方法</h2><p>此处以为数组扩展内置方法为例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</span><br><span class="line">sum += <span class="keyword">this</span>[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//此时数组对象中已经存在sum()方法了 可以始终 数组.sum()进行数据求累加</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="继承之call"><a href="#继承之call" class="headerlink" title="继承之call( )"></a>继承之call( )</h2><ul>
<li>call( )可以调用函数</li>
<li>call()可以修改this的指向,使用call()的时候 参数1是修改后的this指向,参数2,参数3..使用逗号隔开连接</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="string">'andy'</span></span><br><span class="line">&#125;;</span><br><span class="line">fn.call(o, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//调用了函数此时的this指向了对象o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出的x,y还是传入fn是实参，但this指向的并不是fn而变成了o</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="子构造函数继承父构造函数中的属性"><a href="#子构造函数继承父构造函数中的属性" class="headerlink" title="子构造函数继承父构造函数中的属性"></a>子构造函数继承父构造函数中的属性</h2><ul>
<li>定义一个父构造函数</li>
<li>定义一个子构造函数</li>
<li>子构造函数继承父构造函数的属性(使用call方法)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 .子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line"><span class="comment">// this 指向子构造函数的对象实例使用call方式实现子继承父的属性</span></span><br><span class="line">Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">'刘德华'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="借用原型对象继承方法"><a href="#借用原型对象继承方法" class="headerlink" title="借用原型对象继承方法"></a>借用原型对象继承方法</h2><ul>
<li>定义一个父构造函数</li>
<li>定义一个子构造函数</li>
<li>子构造函数继承父构造函数的属性(使用call方法)</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 父构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params">uname, age</span>) </span>&#123;</span><br><span class="line"><span class="comment">// this 指向父构造函数的对象实例</span></span><br><span class="line"><span class="keyword">this</span>.uname = uname;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Father.prototype.money = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 2 .子构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">uname, age, score</span>) </span>&#123;</span><br><span class="line"><span class="comment">// this 指向子构造函数的对象实例</span></span><br><span class="line">Father.call(<span class="keyword">this</span>, uname, age);</span><br><span class="line"><span class="keyword">this</span>.score = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Son.prototype = Father.prototype; 这样直接赋值会有问题,如果修改了子原型对</span></span><br><span class="line"><span class="comment"> *象,父原型对象也会跟着一起变化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Father();</span><br><span class="line"><span class="comment">// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span></span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"><span class="comment">// 这个是子构造函数专门的方法</span></span><br><span class="line">Son.prototype.exam = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'孩子要考试'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="string">'刘德华'</span>, <span class="number">18</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(son);</span><br></pre></td></tr></table></figure>

<img src='/img/web/JS/3.png'>

<hr>
<h2 id="部分数组操作"><a href="#部分数组操作" class="headerlink" title="部分数组操作"></a>部分数组操作</h2><ul>
<li>数组方法forEach遍历数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line"><span class="comment">//参数一是:数组元素</span></span><br><span class="line"><span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line"><span class="comment">//参数三是:当前的数组</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//相当于数组遍历的 for循环 没有返回值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组方法filter过滤数组</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">66</span>, <span class="number">4</span>, <span class="number">88</span>, <span class="number">3</span>, <span class="number">7</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value, index,array</span>) </span>&#123;</span><br><span class="line"><span class="comment">//参数一是:数组元素</span></span><br><span class="line"><span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line"><span class="comment">//参数三是:当前的数组</span></span><br><span class="line"><span class="keyword">return</span> value &gt;= <span class="number">20</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr);<span class="comment">//[66,88] //返回值是一个新数组</span></span><br></pre></td></tr></table></figure>

<ul>
<li>数组方法some查找数组元素</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// some 查找数组中是否有满足条件的元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">30</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> flag = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"><span class="comment">//参数一是:数组元素</span></span><br><span class="line"><span class="comment">//参数二是:数组元素的索引</span></span><br><span class="line"><span class="comment">//参数三是:当前的数组</span></span><br><span class="line"><span class="keyword">return</span> value &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(flag); <span class="comment">// false 返回值是布尔值,只要查找到满足条件的一个元素就立马终止循环</span></span><br></pre></td></tr></table></figure>

<p>筛选例子：</p>
<ol>
<li>定义数组对象数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [&#123;</span><br><span class="line">id: <span class="number">1</span>,</span><br><span class="line">pname: <span class="string">'小米'</span>,</span><br><span class="line">price: <span class="number">3999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">id: <span class="number">2</span>,</span><br><span class="line">pname: <span class="string">'oppo'</span>,</span><br><span class="line">price: <span class="number">999</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">id: <span class="number">3</span>,</span><br><span class="line">pname: <span class="string">'荣耀'</span>,</span><br><span class="line">price: <span class="number">1299</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">id: <span class="number">4</span>,</span><br><span class="line">pname: <span class="string">'华为'</span>,</span><br><span class="line">price: <span class="number">1999</span></span><br><span class="line">&#125;, ];</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用forEach遍历数据并渲染到页面中</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">data.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>);</span><br><span class="line">tr.innerHTML = <span class="string">'&lt;td&gt;'</span> + value.id + <span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.pname +</span><br><span class="line"><span class="string">'&lt;/td&gt;&lt;td&gt;'</span> + value.price + <span class="string">'&lt;/td&gt;'</span>;</span><br><span class="line">tbody.appendChild(tr);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>根据价格筛选数据</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_price.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newDate = data.filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="comment">//start.value是开始区间</span></span><br><span class="line"><span class="comment">//end.value是结束的区间</span></span><br><span class="line"><span class="keyword">return</span> value.price &gt;= start.value &amp;&amp; value.price &lt;=</span><br><span class="line">end.value;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newDate);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>根据商品名称筛选</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">search_pro.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line">data.some(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value.pname === product.value) &#123;</span><br><span class="line"><span class="comment">// console.log(value);</span></span><br><span class="line">arr.push(value);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// return 后面必须写true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 把拿到的数据渲染到页面中</span></span><br><span class="line">setDate(arr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="trim方法去除字符串两端的空格"><a href="#trim方法去除字符串两端的空格" class="headerlink" title="trim方法去除字符串两端的空格"></a>trim方法去除字符串两端的空格</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">' hello '</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()） <span class="comment">//hello 去除两端空格</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">' he l l o '</span></span><br><span class="line"><span class="built_in">console</span>.log(str.trim()） <span class="comment">//he l l o 去除两端空格</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="获取对象的属性名"><a href="#获取对象的属性名" class="headerlink" title="获取对象的属性名"></a>获取对象的属性名</h2><p>Object.keys(对象) 获取到当前对象中的属性名 ，返回值是一个数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">id: <span class="number">1</span>,</span><br><span class="line">pname: <span class="string">'小米'</span>,</span><br><span class="line">price: <span class="number">1999</span>,</span><br><span class="line">num: <span class="number">2000</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line"><span class="built_in">console</span>.log(result)<span class="comment">//[id，pname,price,num]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Object-defineProperty设置或修改对象中的属性"><a href="#Object-defineProperty设置或修改对象中的属性" class="headerlink" title="Object.defineProperty设置或修改对象中的属性"></a>Object.defineProperty设置或修改对象中的属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(对象，修改或新增的属性名，&#123;</span><br><span class="line">value:修改或新增的属性的值,</span><br><span class="line">writable:<span class="literal">true</span>/<span class="literal">false</span>,<span class="comment">//如果值为false 不允许修改这个属性值</span></span><br><span class="line">enumerable: <span class="literal">false</span>,<span class="comment">//enumerable 如果值为false 则不允许遍历</span></span><br><span class="line">configurable: <span class="literal">false</span> <span class="comment">//configurable 如果为false 则不允许删除这个属性属性是否可以被删除或是否可以再次修改特性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数的定义和调用"><a href="#函数的定义和调用" class="headerlink" title="函数的定义和调用"></a>函数的定义和调用</h2><ol>
<li>函数声明方式 function 关键字（命名函数）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>函数表达式（匿名函数）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>new Function()</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'console.log(a + b)'</span>);</span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'参数1'</span>,<span class="string">'参数2'</span>..., <span class="string">'函数体'</span>)</span><br><span class="line"><span class="comment">/*Function 里面参数都必须是字符串格式</span></span><br><span class="line"><span class="comment">第三种方式执行效率低，也不方便书写，因此较少使用</span></span><br><span class="line"><span class="comment">所有函数都是 Function 的实例(对象)</span></span><br><span class="line"><span class="comment">函数也属于对象</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数的调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1. 普通函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'人生的巅峰'</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="comment">/* 2. 对象的方法 */</span></span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">sayHi: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'人生的巅峰'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayHi();</span><br><span class="line"><span class="comment">/* 3. 构造函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">new</span> Star();</span><br><span class="line"><span class="comment">/* 4. 绑定事件函数*/</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 点击了按钮就可以调用这个函数</span></span><br><span class="line"><span class="comment">/* 5. 定时器函数*/</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);   <span class="comment">//这个函数是定时器自动1秒钟调用一次</span></span><br><span class="line"><span class="comment">/* 6. 立即执行函数(自调用函数)*/</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'人生的巅峰'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><ul>
<li>函数内部的this指向</li>
</ul>
<table>
<thead>
<tr>
<th>调用方式</th>
<th>this指向</th>
</tr>
</thead>
<tbody><tr>
<td>普通函数调用</td>
<td>window</td>
</tr>
<tr>
<td>构造函数调用</td>
<td>实例对象</td>
</tr>
<tr>
<td>对象方法调用</td>
<td>该方法所属对象</td>
</tr>
<tr>
<td>事件绑定方法</td>
<td>绑定事件对象</td>
</tr>
<tr>
<td>定时器函数</td>
<td>window</td>
</tr>
<tr>
<td>立即执行函数</td>
<td>window</td>
</tr>
</tbody></table>
<ul>
<li>改变函数内部 this 指向</li>
</ul>
<ol>
<li>call()</li>
</ol>
<p>call()方法调用一个对象。简单理解为调用函数的方式，但是它可以改变函数的 this 指向</p>
<p>应用场景: 经常做继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>)<span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.call(o,<span class="number">1</span>,<span class="number">2</span>)<span class="comment">//此时的this指向的是对象o,参数使用逗号隔开,运行结果为3</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>apply()</li>
</ol>
<p>apply() 方法调用一个函数。简单理解为调用函数的方式，但是它可以改变函数的 this 指<br>向。</p>
<p>应用场景: 经常跟数组有关系</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="string">'andy'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a+b)</span><br><span class="line">&#125;;</span><br><span class="line">fn()<span class="comment">// 此时的this指向的是window 运行结果为3</span></span><br><span class="line">fn.apply(o,[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">//此时的this指向的是对象o,参数使用数组传递 运行结果为3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>bind()</li>
</ul>
<p>bind() 方法不会调用函数,但是能改变函数内部this 指向,返回的是原函数改变this之后产生的新函数</p>
<p>如果只是想改变 this 指向，并且不想调用这个函数的时候，可以使用bind</p>
<p>应用场景:不调用函数,但是还想改变this指向</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">name: <span class="string">'andy'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = fn.bind(o, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">//此处的f是bind返回的新函数</span></span><br><span class="line">f();<span class="comment">//调用新函数 this指向的是对象o 参数使用逗号隔开</span></span><br></pre></td></tr></table></figure>

<ul>
<li>call、apply、bind三者的异同</li>
</ul>
<p>共同点 : 都可以改变this指向</p>
<p>不同点:</p>
<p>call 和 apply 会调用函数, 并且改变函数内部this指向.</p>
<p>call 和 apply传递的参数不一样,call传递参数使用逗号隔开,apply使用数组传递.</p>
<p>bind 不会调用函数, 可以改变函数内部this指向.</p>
<p>应用场景</p>
<p>call 经常做继承.</p>
<p>apply经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值.</p>
<p>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</p>
<hr>
<h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>严格模式对正常的 JavaScript 语义做了一些更改：</p>
<ol>
<li>消除了 Javascript 语法的一些不合理、不严谨之处，减少了一些怪异行为。</li>
<li>消除代码运行的一些不安全之处，保证代码运行的安全。</li>
<li>提高编译器效率，增加运行速度。</li>
<li>禁用了在 ECMAScript 的未来版本中可能会定义的一些语法，为未来新版本的<br>Javascript 做好铺垫。比如一些保留字如：class,enum,export, extends, import, super不能做变量名</li>
</ol>
<ul>
<li>开启严格模式</li>
</ul>
<p>严格模式可以应用到整个脚本或个别函数中。因此在使用时，我们可以将严格模式分为<br>为脚本开启严格模式和为函数开启严格模式两种情况。</p>
<ol>
<li>为脚本开启严格模式</li>
</ol>
<p>有的 script 脚本是严格模式，有的 script 脚本是正常模式，这样不利于文件合<br>并，所以可以将整个脚本文件放在一个立即执行的匿名函数之中。这样独立创建<br>一个作用域而不影响其他script 脚本文件。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//在当前的这个自调用函数中有开启严格模式，当前函数之外还是普通模式</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="meta">"use strict"</span>; <span class="comment">//当前script标签开启了严格模式</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//当前script标签未开启严格模式</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>为函数开启严格模式</li>
</ol>
<p>要给某个函数开启严格模式，需要把“use strict”; (或 ‘use strict’; ) 声明放在函数<br>体所有语句之前。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"123"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当前fn函数开启了严格模式</span></span><br></pre></td></tr></table></figure>

<ul>
<li>严格模式下的变化</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span></span><br><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="built_in">console</span>.log(num)<span class="comment">//严格模式后使用未声明的变量</span></span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> num2;<span class="comment">//严格模式不允许删除变量</span></span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 严格模式下全局作用域中函数中的 this 是 undefined</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐‐</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sex = <span class="string">'男'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Star();严格模式下,如果 构造函数不加new调用, this 指向的是undefined 如果给他赋值则会报错.</span></span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star();</span><br><span class="line"><span class="built_in">console</span>.log(ldh.sex);</span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐‐‐</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//严格模式下，定时器 this 还是指向 window</span></span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><p>高阶函数是对其他函数进行操作的函数，它接收函数作为参数或将函数作为返回值输<br>出。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">(callback)</span></span>&#123;</span></span><br><span class="line">  callback&amp;callback();</span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">fn (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;alert(<span class="string">'hi'</span>)&#125;)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fn</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>此时fn为一个高阶函数</p>
<p>函数也是一种数据类型，同样可以作为参数，传递给另外一个参数使用。最典型的就是<br>作为回调函数。</p>
<p>同理函数也可以作为返回值传递回来</p>
<hr>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包（closure）指有权访问另一个函数作用域中变量的函数。简单理解就是 ，一个作用<br>域可以访问另外一个函数内部的局部变量。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span><span class="params">()</span></span>&#123; <span class="comment">// fn1为一个闭包函数</span></span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> num = <span class="number">10</span>;</span></span><br><span class="line"><span class="actionscript">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>,log(num); <span class="comment">// 10</span></span></span><br><span class="line">  &#125;</span><br><span class="line">  fn2();</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>闭包作用：延伸变量的作用范围</p>
<p>例：（利用闭包的方式得到当前 li 的索引号）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line"><span class="comment">// 利用for循环创建了4个立即执行函数</span></span><br><span class="line"><span class="comment">// 立即执行函数也成为小闭包因为立即执行函数里面的任何一个函数都可以使用它的i这变量</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">lis[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>例：（3秒钟之后,打印所有li元素的内容）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(lis[i].innerHTML);</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归：如果一个函数在内部可以调用其本身，那么这个函数就是递归函数。简单理解:函<br>数内部自己调用自己, 这个函数就是递归函数</p>
<p>注意：递归函数的作用和循环效果一样，由于递归很容易发生“栈溢出”错误（stack<br>overflow），所以必须要加退出条件return。</p>
<p>例：（利用递归求1~n的阶乘）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用递归函数求1~n的阶乘 1 * 2 * 3 * 4 * ..n</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123; <span class="comment">//结束条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n * fn(n ‐ <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">3</span>));   <span class="comment">//  结果 6</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式（ Regular Expression ）是用于匹配字符串中字符组合的模式。在<br>JavaScript中，正则表达式也是对象。</p>
<p>正则表通常被用来检索、替换那些符合某个模式（规则）的文本，例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)。此外，正则表达式还常用于过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</p>
<p>特点：</p>
<ol>
<li>灵活性、逻辑性和功能性非常的强。</li>
<li>可以迅速地用极简单的方式达到字符串的复杂控制。</li>
<li>实际开发,一般都是直接复制写好的正则表达式. 但是要求会使用正则表达式并且根据<br>实际情况修改正则表达式. 比如用户名: /^[a-z0-9_-]{3,16}$/</li>
</ol>
<ul>
<li>正则表达式的创建</li>
</ul>
<ol>
<li>通过调用RegExp对象的构造函数创建</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/123/</span>);</span><br><span class="line"><span class="built_in">console</span>.log(regexp);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>利用字面量创建正则表达式</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试正则表达式</li>
</ul>
<p>test()正则对象方法，用于检测字符串是否符合该规则，该对象会返回 true 或 false，其参数是测试字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/123/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="number">123</span>));<span class="comment">//匹配字符中是否出现123 出现结果为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));<span class="comment">//匹配字符中是否出现123 未出现结果为false</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="正则表达式中特殊字符"><a href="#正则表达式中特殊字符" class="headerlink" title="正则表达式中特殊字符"></a>正则表达式中特殊字符</h2><ul>
<li>正则表达式的组成</li>
</ul>
<p>一个正则表达式可以由简单的字符构成，比如 /abc/，也可以是简单和特殊字符的组合，<br>比如 /ab*c/ 。其中特殊字符也被称为元字符，在正则表达式中是具有特殊意义的专用符<br>号，如 ^ 、$ 、+ 等。</p>
<ul>
<li>边界符</li>
</ul>
<p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>
<ol>
<li>^：表示匹配行首的文本（以谁开始）</li>
<li>$：表示匹配行尾的文本（以谁结束）</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/abc/</span>; <span class="comment">// 正则表达式里面不需要加引号 不管是数字型还是字符串型</span></span><br><span class="line"><span class="comment">// /abc/ 只要包含有abc这个字符串返回的都是true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abc'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'abcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'aabcd'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐'</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'abcd'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐'</span>);</span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^abc$/</span>; <span class="comment">// 精确匹配 要求必须是 abc字符串才符合规范</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abc'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'aabcd'</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg1.test(<span class="string">'abcabc'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>如果 ^和 $ 在一起，表示必须是精确匹配。</p>
<ul>
<li>字符类</li>
</ul>
<p>字符类表示有一系列字符可供选择，只要匹配其中一个就可以了。所有可供选择的字符<br>都放在方括号内。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rg = <span class="regexp">/[abc]/</span>; <span class="comment">// 只要包含有a 或者 包含有b 或者包含有c 都返回为true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'andy'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'baby'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'color'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg.test(<span class="string">'red'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> rg1 = <span class="regexp">/^[abc]$/</span>; <span class="comment">// 三选一 只有是a 或者是 b 或者是c 这三个字母才返回</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'aa'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'b'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'c'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(rg1.test(<span class="string">'abc'</span>));<span class="comment">//true</span></span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐‐‐</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[a‐z]$/</span> <span class="comment">//26个英文字母任何一个字母返回 true ‐ 表示的是a 到z 的范</span></span><br><span class="line">围</span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'a'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'z'</span>));<span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(reg.test(<span class="string">'A'</span>));<span class="comment">//false</span></span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐‐‐‐</span><br><span class="line"><span class="comment">//字符组合</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^[a‐zA‐Z0‐9]$/</span>; <span class="comment">// 26个英文字母(大写和小写都可以)任何一个字母返回</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line">‐‐‐‐‐‐‐‐‐‐‐</span><br><span class="line"><span class="comment">//取反 方括号内部加上 ^ 表示取反，只要包含方括号内的字符，都返回 false 。</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^[^a‐zA‐Z0‐9]$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'a'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'B'</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="number">8</span>));<span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(reg2.test(<span class="string">'!'</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>量词符:</p>
<p>量词符用来设定某个模式出现的次数.</p>
<ol>
<li>*：重复0次或更多次</li>
<li>+：重复1次或更多次</li>
<li>?：重复0次或1次</li>
<li>{n}：重复n次</li>
<li>{n,}：重复n次或更多次</li>
<li>{n,m}：重复n到m次</li>
</ol>
<p>例：（表单验证）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"uname"</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 量词是设定某个模式出现的次数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> reg = <span class="regexp">/^[a‐zA‐Z0‐9_‐]&#123;6,16&#125;$/</span>; <span class="comment">// 这个模式用户只能输入英文字母 数字 下划</span></span></span><br><span class="line">线 中划线</span><br><span class="line"><span class="javascript"><span class="keyword">var</span> uname = <span class="built_in">document</span>.querySelector(<span class="string">'.uname'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelector(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="actionscript">uname.onblur = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span> (reg.test(<span class="keyword">this</span>.value)) &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'正确的'</span>);</span></span><br><span class="line"><span class="actionscript">span.className = <span class="string">'right'</span>;</span></span><br><span class="line"><span class="actionscript">span.innerHTML = <span class="string">'用户名格式输入正确'</span>;</span></span><br><span class="line"><span class="actionscript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'错误的'</span>);</span></span><br><span class="line"><span class="actionscript">span.className = <span class="string">'wrong'</span>;</span></span><br><span class="line"><span class="actionscript">span.innerHTML = <span class="string">'用户名格式输入不正确'</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>预定义类</li>
</ul>
<table>
<thead>
<tr>
<th>预定义类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>\d</td>
<td>匹配0-9之间的任一数字，相当于[0-9]</td>
</tr>
<tr>
<td>\D</td>
<td>匹配0-9以外任一数字，相当于[^0-9]</td>
</tr>
<tr>
<td>\w</td>
<td>匹配任意的字母、数字和下划线，相当于[a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\W</td>
<td>匹配除字母、数字和下划线，相当于[^a-zA-Z0-9_]</td>
</tr>
<tr>
<td>\s</td>
<td>匹配空格（包括换行、制表、空格等），相当于[\t\r\n\v\f]</td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空格，相当于[^\t\r\n\v\f]</td>
</tr>
</tbody></table>
<p>例：（验证手机号）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手机号验证:/^1[3|4|5|7|8][0‐9]&#123;9&#125;$/;</span></span><br><span class="line"><span class="comment">//验证通过与不通过更换元素的类名与元素中的内容</span></span><br><span class="line"><span class="keyword">if</span> (reg.test(<span class="keyword">this</span>.value)) &#123;</span><br><span class="line"><span class="comment">// console.log('正确的');</span></span><br><span class="line"><span class="keyword">this</span>.nextElementSibling.className = <span class="string">'success'</span>;</span><br><span class="line"><span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="success_icon"&gt;&lt;/i&gt; 恭喜</span></span><br><span class="line"><span class="string">您输入正确'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// console.log('不正确');</span></span><br><span class="line"><span class="keyword">this</span>.nextElementSibling.className = <span class="string">'error'</span>;</span><br><span class="line"><span class="keyword">this</span>.nextElementSibling.innerHTML = <span class="string">'&lt;i class="error_icon"&gt;&lt;/i&gt;格式</span></span><br><span class="line"><span class="string">不正确,请从新输入 '</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>正则替换replace</li>
</ul>
<p>replace() 方法可以实现替换字符串操作，用来替换的参数可以是一个字符串或是一个正<br>则表达式。</p>
<p>例：（过滤敏感词）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> text = <span class="built_in">document</span>.querySelector(<span class="string">'textarea'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.querySelector(<span class="string">'div'</span>);</span></span><br><span class="line"><span class="actionscript">btn.onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">div.innerHTML = text.value.replace(<span class="regexp">/激情|gay/g</span>, <span class="string">'**'</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ES6新语法"><a href="#ES6新语法" class="headerlink" title="ES6新语法"></a>ES6新语法</h2><ul>
<li>let</li>
</ul>
<p>let 声明的变量只在块级区域有效</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p>不存在变量提升</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>暂时性死区</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">tmp = <span class="string">'abc'</span>;</span><br><span class="line"><span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>const</li>
</ul>
<p>声明常量，常量就是值（内存地址）不能变化的量</p>
<p>具有块级作用域</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure>

<p>声明常量时必须赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI; <span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<p>常量赋值后，值不能修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14</span>;</span><br><span class="line">PI = <span class="number">100</span>; <span class="comment">// Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> ary = [<span class="number">100</span>, <span class="number">200</span>];</span><br><span class="line">ary[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">ary[<span class="number">1</span>] = <span class="string">'b'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(ary); <span class="comment">// ['a', 'b'];</span></span><br><span class="line">ary = [<span class="string">'a'</span>, <span class="string">'b'</span>]; <span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ul>
<li>解构赋值</li>
</ul>
<p>ES6中允许从数组中提取值，按照对应位置，对变量赋值，对象也可以实现解构</p>
<p>数组解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a)<span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(b)<span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(c)<span class="comment">//3</span></span><br><span class="line"><span class="comment">//如果解构不成功，变量的值为undefined</span></span><br></pre></td></tr></table></figure>

<p>对象解构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">'zhangsan'</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, age &#125; = person;</span><br><span class="line"><span class="built_in">console</span>.log(name); <span class="comment">// 'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: myName, <span class="attr">age</span>: myAge&#125; = person; <span class="comment">// myName myAge 属于别名</span></span><br><span class="line"><span class="built_in">console</span>.log(myName); <span class="comment">// 'zhangsan'</span></span><br><span class="line"><span class="built_in">console</span>.log(myAge); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>

<ul>
<li>箭头函数</li>
</ul>
<p>ES6中新增的定义函数的方式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">() =&gt; &#123;&#125; <span class="comment">//()：代表是函数； =&gt;：必须要的符号，指向哪一个代码块；&#123;&#125;：函数体</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;<span class="comment">//代表把一个函数赋值给fn</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> num1 + num2;</span><br></pre></td></tr></table></figure>

<p>如果形参只有一个，可以省略小括号</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//es6写法</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">v</span> =&gt;</span> v;</span><br></pre></td></tr></table></figure>

<p>箭头函数不绑定this关键字，箭头函数中的this，指向的是函数定义位置的上下文this</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'张三'</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this 指向 是obj对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this 指向 的是箭头函数定义的位置，那么这个箭头函数定义在fn里面，而这个fn指向是的obj对象，所以这个this也指向是obj对象</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> resFn = fn.call(obj);</span><br><span class="line">resFn()</span><br></pre></td></tr></table></figure>

<ul>
<li>剩余参数</li>
</ul>
<p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组，不定参数定义方式，这<br>种方式很方便的去声明不知道参数情况下的一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">first, ...args</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(args); <span class="comment">// [20, 30]</span></span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="ES6内置对象扩展"><a href="#ES6内置对象扩展" class="headerlink" title="ES6内置对象扩展"></a>ES6内置对象扩展</h2><ul>
<li>Array 的扩展方法</li>
</ul>
<p>扩展运算符可以将数组或者对象转为用逗号分隔的参数序列</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">...ary <span class="comment">// 1, 2, 3</span></span><br><span class="line"><span class="built_in">console</span>.log(...ary); <span class="comment">// 1 2 3,相当于下面的代码</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>扩展运算符可以应用于合并数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> ary2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> ary3 = [...ary1, ...ary2];</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">ary1.push(...ary2);</span><br></pre></td></tr></table></figure>

<p>将类数组或可遍历对象转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> oDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line">oDivs = [...oDivs];</span><br></pre></td></tr></table></figure>

<ul>
<li>构造函数方法：Array.from()</li>
</ul>
<p>将伪数组或可遍历对象转换为真正的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个集合</span></span><br><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line"><span class="string">'0'</span>: <span class="string">'a'</span>,</span><br><span class="line"><span class="string">'1'</span>: <span class="string">'b'</span>,</span><br><span class="line"><span class="string">'2'</span>: <span class="string">'c'</span>,</span><br><span class="line">length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//转成数组</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.from(arrayLike); <span class="comment">// ['a', 'b', 'c']</span></span><br></pre></td></tr></table></figure>

<p>方法还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，<br>将处理后的值放入返回的数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line"><span class="string">"0"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">"1"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"length"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newAry = <span class="built_in">Array</span>.from(arrayLike, item =&gt; item *<span class="number">2</span>)<span class="comment">//[2,4]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法：find()</li>
</ul>
<p>用于找出第一个符合条件的数组成员，如果没有找到返回undefined</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [&#123;</span><br><span class="line">id: <span class="number">1</span>,</span><br><span class="line">name: <span class="string">'张三'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">id: <span class="number">2</span>,</span><br><span class="line">name: <span class="string">'李四'</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="keyword">let</span> target = ary.find(<span class="function">(<span class="params">item, index</span>) =&gt;</span> item.id == <span class="number">2</span>);<span class="comment">//找数组里面符合条件</span></span><br><span class="line">的值，当数组中元素id等于<span class="number">2</span>的查找出来，注意，只会匹配第一个</span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法：findIndex()</li>
</ul>
<p>用于找出第一个符合条件的数组成员的位置，如果没有找到返回-1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">let</span> index = ary.findIndex(<span class="function">(<span class="params">value, index</span>) =&gt;</span> value &gt; <span class="number">9</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法：includes()</li>
</ul>
<p>判断某个数组是否包含给定的值，返回布尔值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>String 的扩展方法</p>
<ul>
<li>模板字符串</li>
</ul>
<p>ES6新增的创建字符串的方式，使用反引号定义</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">`zhangsan`</span>;</span><br></pre></td></tr></table></figure>

<p>模板字符串中可以解析变量</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'张三'</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="string">`hello,my name is <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// hello, my name is zhangsan</span></span><br></pre></td></tr></table></figure>

<p>模板字符串中可以换行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">name: <span class="string">'zhangsan'</span>,</span><br><span class="line">age: <span class="number">20</span>,</span><br><span class="line">sex: <span class="string">'男'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> html = <span class="string">` &lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;<span class="subst">$&#123;result.name&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;<span class="subst">$&#123;result.age&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;<span class="subst">$&#123;result.sex&#125;</span>&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt; `</span>;</span><br></pre></td></tr></table></figure>

<p>在模板字符串中可以调用函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sayHello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'time end'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> greet = <span class="string">`<span class="subst">$&#123;sayHello()&#125;</span> over`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(greet); <span class="comment">// time end over</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法：startsWith() 和 endsWith()</li>
</ul>
<ol>
<li>startsWith()：表示参数字符串是否在原字符串的头部，返回布尔值</li>
<li>endsWith()：表示参数字符串是否在原字符串的尾部，返回布尔值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'Hello world!'</span>;</span><br><span class="line">str.startsWith(<span class="string">'Hello'</span>) <span class="comment">// true</span></span><br><span class="line">str.endsWith(<span class="string">'!'</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实例方法：repeat()</li>
</ul>
<p>repeat方法表示将原字符串重复n次，返回一个新字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>) <span class="comment">// "xxx"</span></span><br><span class="line"><span class="string">'hello'</span>.repeat(<span class="number">2</span>) <span class="comment">// "hellohello"</span></span><br></pre></td></tr></table></figure>

<p>Set 数据结构</p>
<p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的<br>值。</p>
<p>Set本身是一个构造函数，用来生成 Set 数据结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br></pre></td></tr></table></figure>

<p>Set函数可以接受一个数组作为参数，用来初始化。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = new Set([1, 2, 3, 4, 4]);//&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure>

<p>实例方法</p>
<ol>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功</li>
<li>has(value)：返回一个布尔值，表示该值是否为 Set 的成员</li>
<li>clear()：清除所有成员，没有返回值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="number">1</span>).add(<span class="number">2</span>).add(<span class="number">3</span>); <span class="comment">// 向 set 结构中添加值</span></span><br><span class="line">s.delete(<span class="number">2</span>) <span class="comment">// 删除 set 结构中的2值</span></span><br><span class="line">s.has(<span class="number">1</span>) <span class="comment">// 表示 set 结构中是否有1这个值 返回布尔值</span></span><br><span class="line">s.clear() <span class="comment">// 清除 set 结构中的所有值</span></span><br><span class="line"><span class="comment">//注意：删除的是元素的值，不是代表的索引</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
</search>
